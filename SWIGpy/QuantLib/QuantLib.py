# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_QuantLib')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_QuantLib')
    _QuantLib = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_QuantLib', [dirname(__file__)])
        except ImportError:
            import _QuantLib
            return _QuantLib
        try:
            _mod = imp.load_module('_QuantLib', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _QuantLib = swig_import_helper()
    del swig_import_helper
else:
    import _QuantLib
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _QuantLib.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _QuantLib.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _QuantLib.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _QuantLib.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _QuantLib.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _QuantLib.SwigPyIterator_equal(self, x)

    def copy(self):
        return _QuantLib.SwigPyIterator_copy(self)

    def next(self):
        return _QuantLib.SwigPyIterator_next(self)

    def __next__(self):
        return _QuantLib.SwigPyIterator___next__(self)

    def previous(self):
        return _QuantLib.SwigPyIterator_previous(self)

    def advance(self, n):
        return _QuantLib.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _QuantLib.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _QuantLib.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _QuantLib.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _QuantLib.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _QuantLib.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _QuantLib.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _QuantLib.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)
cvar = _QuantLib.cvar
__hexversion__ = cvar.__hexversion__
__version__ = cvar.__version__

SHARED_PTR_DISOWN = _QuantLib.SHARED_PTR_DISOWN
class Period(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Period, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Period, name)

    def length(self):
        return _QuantLib.Period_length(self)

    def units(self):
        return _QuantLib.Period_units(self)

    def frequency(self):
        return _QuantLib.Period_frequency(self)

    def __init__(self, *args):
        this = _QuantLib.new_Period(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self):
        return _QuantLib.Period___str__(self)

    def __repr__(self):
        return _QuantLib.Period___repr__(self)

    def __neg__(self):
        return _QuantLib.Period___neg__(self)

    def __add__(self, p):
        return _QuantLib.Period___add__(self, p)

    def __sub__(self, p):
        return _QuantLib.Period___sub__(self, p)

    def __mul__(self, n):
        return _QuantLib.Period___mul__(self, n)

    def __rmul__(self, n):
        return _QuantLib.Period___rmul__(self, n)

    def __lt__(self, other):
        return _QuantLib.Period___lt__(self, other)

    def __gt__(self, other):
        return _QuantLib.Period___gt__(self, other)

    def __le__(self, other):
        return _QuantLib.Period___le__(self, other)

    def __ge__(self, other):
        return _QuantLib.Period___ge__(self, other)

    def __eq__(self, other):
        return _QuantLib.Period___eq__(self, other)

    def __cmp__(self, other):
        return _QuantLib.Period___cmp__(self, other)

    def __hash__(self):
        return hash(str(self))

    __swig_destroy__ = _QuantLib.delete_Period
    __del__ = lambda self: None
Period_swigregister = _QuantLib.Period_swigregister
Period_swigregister(Period)

class PeriodVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PeriodVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PeriodVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.PeriodVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.PeriodVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.PeriodVector___bool__(self)

    def __len__(self):
        return _QuantLib.PeriodVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.PeriodVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.PeriodVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.PeriodVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.PeriodVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.PeriodVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.PeriodVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.PeriodVector_pop(self)

    def append(self, x):
        return _QuantLib.PeriodVector_append(self, x)

    def empty(self):
        return _QuantLib.PeriodVector_empty(self)

    def size(self):
        return _QuantLib.PeriodVector_size(self)

    def swap(self, v):
        return _QuantLib.PeriodVector_swap(self, v)

    def begin(self):
        return _QuantLib.PeriodVector_begin(self)

    def end(self):
        return _QuantLib.PeriodVector_end(self)

    def rbegin(self):
        return _QuantLib.PeriodVector_rbegin(self)

    def rend(self):
        return _QuantLib.PeriodVector_rend(self)

    def clear(self):
        return _QuantLib.PeriodVector_clear(self)

    def get_allocator(self):
        return _QuantLib.PeriodVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.PeriodVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.PeriodVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_PeriodVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.PeriodVector_push_back(self, x)

    def front(self):
        return _QuantLib.PeriodVector_front(self)

    def back(self):
        return _QuantLib.PeriodVector_back(self)

    def assign(self, n, x):
        return _QuantLib.PeriodVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.PeriodVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.PeriodVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.PeriodVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.PeriodVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_PeriodVector
    __del__ = lambda self: None
PeriodVector_swigregister = _QuantLib.PeriodVector_swigregister
PeriodVector_swigregister(PeriodVector)

class PeriodParser(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PeriodParser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PeriodParser, name)
    __repr__ = _swig_repr
    if _newclass:
        parse = staticmethod(_QuantLib.PeriodParser_parse)
    else:
        parse = _QuantLib.PeriodParser_parse

    def __init__(self):
        this = _QuantLib.new_PeriodParser()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_PeriodParser
    __del__ = lambda self: None
PeriodParser_swigregister = _QuantLib.PeriodParser_swigregister
PeriodParser_swigregister(PeriodParser)

def PeriodParser_parse(str):
    return _QuantLib.PeriodParser_parse(str)
PeriodParser_parse = _QuantLib.PeriodParser_parse


import datetime as _datetime

class Date(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Date, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Date, name)

    def weekday(self):
        return _QuantLib.Date_weekday(self)

    def dayOfMonth(self):
        return _QuantLib.Date_dayOfMonth(self)

    def dayOfYear(self):
        return _QuantLib.Date_dayOfYear(self)

    def month(self):
        return _QuantLib.Date_month(self)

    def year(self):
        return _QuantLib.Date_year(self)

    def serialNumber(self):
        return _QuantLib.Date_serialNumber(self)
    if _newclass:
        isLeap = staticmethod(_QuantLib.Date_isLeap)
    else:
        isLeap = _QuantLib.Date_isLeap
    if _newclass:
        minDate = staticmethod(_QuantLib.Date_minDate)
    else:
        minDate = _QuantLib.Date_minDate
    if _newclass:
        maxDate = staticmethod(_QuantLib.Date_maxDate)
    else:
        maxDate = _QuantLib.Date_maxDate
    if _newclass:
        todaysDate = staticmethod(_QuantLib.Date_todaysDate)
    else:
        todaysDate = _QuantLib.Date_todaysDate
    if _newclass:
        endOfMonth = staticmethod(_QuantLib.Date_endOfMonth)
    else:
        endOfMonth = _QuantLib.Date_endOfMonth
    if _newclass:
        isEndOfMonth = staticmethod(_QuantLib.Date_isEndOfMonth)
    else:
        isEndOfMonth = _QuantLib.Date_isEndOfMonth
    if _newclass:
        nextWeekday = staticmethod(_QuantLib.Date_nextWeekday)
    else:
        nextWeekday = _QuantLib.Date_nextWeekday
    if _newclass:
        nthWeekday = staticmethod(_QuantLib.Date_nthWeekday)
    else:
        nthWeekday = _QuantLib.Date_nthWeekday

    def __add__(self, *args):
        return _QuantLib.Date___add__(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_Date(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def weekdayNumber(self):
        return _QuantLib.Date_weekdayNumber(self)

    def __str__(self):
        return _QuantLib.Date___str__(self)

    def __repr__(self):
        return _QuantLib.Date___repr__(self)

    def ISO(self):
        return _QuantLib.Date_ISO(self)

    def __sub__(self, *args):
        return _QuantLib.Date___sub__(self, *args)

    def __eq__(self, other):
        return _QuantLib.Date___eq__(self, other)

    def __cmp__(self, other):
        return _QuantLib.Date___cmp__(self, other)

    def __nonzero__(self):
        return _QuantLib.Date___nonzero__(self)

    def __bool__(self):
        return _QuantLib.Date___bool__(self)

    def __hash__(self):
        return _QuantLib.Date___hash__(self)

    def __lt__(self, other):
        return _QuantLib.Date___lt__(self, other)

    def __gt__(self, other):
        return _QuantLib.Date___gt__(self, other)

    def __le__(self, other):
        return _QuantLib.Date___le__(self, other)

    def __ge__(self, other):
        return _QuantLib.Date___ge__(self, other)

    def __ne__(self, other):
        return _QuantLib.Date___ne__(self, other)

    def to_date(self):
        return _datetime.date(
            self.year(), self.month(), self.dayOfMonth())

    @staticmethod
    def from_date(date):
        return Date(date.day, date.month, date.year)

    __swig_destroy__ = _QuantLib.delete_Date
    __del__ = lambda self: None
Date_swigregister = _QuantLib.Date_swigregister
Date_swigregister(Date)

def Date_isLeap(y):
    return _QuantLib.Date_isLeap(y)
Date_isLeap = _QuantLib.Date_isLeap

def Date_minDate():
    return _QuantLib.Date_minDate()
Date_minDate = _QuantLib.Date_minDate

def Date_maxDate():
    return _QuantLib.Date_maxDate()
Date_maxDate = _QuantLib.Date_maxDate

def Date_todaysDate():
    return _QuantLib.Date_todaysDate()
Date_todaysDate = _QuantLib.Date_todaysDate

def Date_endOfMonth(arg2):
    return _QuantLib.Date_endOfMonth(arg2)
Date_endOfMonth = _QuantLib.Date_endOfMonth

def Date_isEndOfMonth(arg2):
    return _QuantLib.Date_isEndOfMonth(arg2)
Date_isEndOfMonth = _QuantLib.Date_isEndOfMonth

def Date_nextWeekday(arg2, arg3):
    return _QuantLib.Date_nextWeekday(arg2, arg3)
Date_nextWeekday = _QuantLib.Date_nextWeekday

def Date_nthWeekday(n, arg3, m, y):
    return _QuantLib.Date_nthWeekday(n, arg3, m, y)
Date_nthWeekday = _QuantLib.Date_nthWeekday

class DateParser(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DateParser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DateParser, name)
    __repr__ = _swig_repr
    if _newclass:
        parseFormatted = staticmethod(_QuantLib.DateParser_parseFormatted)
    else:
        parseFormatted = _QuantLib.DateParser_parseFormatted
    if _newclass:
        parseISO = staticmethod(_QuantLib.DateParser_parseISO)
    else:
        parseISO = _QuantLib.DateParser_parseISO
    if _newclass:
        parse = staticmethod(_QuantLib.DateParser_parse)
    else:
        parse = _QuantLib.DateParser_parse

    def __init__(self):
        this = _QuantLib.new_DateParser()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_DateParser
    __del__ = lambda self: None
DateParser_swigregister = _QuantLib.DateParser_swigregister
DateParser_swigregister(DateParser)

def DateParser_parseFormatted(str, fmt):
    return _QuantLib.DateParser_parseFormatted(str, fmt)
DateParser_parseFormatted = _QuantLib.DateParser_parseFormatted

def DateParser_parseISO(str):
    return _QuantLib.DateParser_parseISO(str)
DateParser_parseISO = _QuantLib.DateParser_parseISO

def DateParser_parse(str, fmt):
    return _QuantLib.DateParser_parse(str, fmt)
DateParser_parse = _QuantLib.DateParser_parse


Date._old___add__ = Date.__add__
Date._old___sub__ = Date.__sub__
def Date_new___add__(self,x):
    if type(x) is tuple and len(x) == 2:
        return self._old___add__(Period(x[0],x[1]))
    else:
        return self._old___add__(x)
def Date_new___sub__(self,x):
    if type(x) is tuple and len(x) == 2:
        return self._old___sub__(Period(x[0],x[1]))
    else:
        return self._old___sub__(x)
Date.__add__ = Date_new___add__
Date.__sub__ = Date_new___sub__

class DateVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DateVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DateVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.DateVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.DateVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.DateVector___bool__(self)

    def __len__(self):
        return _QuantLib.DateVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.DateVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.DateVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.DateVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.DateVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.DateVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.DateVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.DateVector_pop(self)

    def append(self, x):
        return _QuantLib.DateVector_append(self, x)

    def empty(self):
        return _QuantLib.DateVector_empty(self)

    def size(self):
        return _QuantLib.DateVector_size(self)

    def swap(self, v):
        return _QuantLib.DateVector_swap(self, v)

    def begin(self):
        return _QuantLib.DateVector_begin(self)

    def end(self):
        return _QuantLib.DateVector_end(self)

    def rbegin(self):
        return _QuantLib.DateVector_rbegin(self)

    def rend(self):
        return _QuantLib.DateVector_rend(self)

    def clear(self):
        return _QuantLib.DateVector_clear(self)

    def get_allocator(self):
        return _QuantLib.DateVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.DateVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.DateVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_DateVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.DateVector_push_back(self, x)

    def front(self):
        return _QuantLib.DateVector_front(self)

    def back(self):
        return _QuantLib.DateVector_back(self)

    def assign(self, n, x):
        return _QuantLib.DateVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.DateVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.DateVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.DateVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.DateVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_DateVector
    __del__ = lambda self: None
DateVector_swigregister = _QuantLib.DateVector_swigregister
DateVector_swigregister(DateVector)


def daysBetween(arg1, arg2):
    return _QuantLib.daysBetween(arg1, arg2)
daysBetween = _QuantLib.daysBetween
class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.IntVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.IntVector___bool__(self)

    def __len__(self):
        return _QuantLib.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.IntVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.IntVector_pop(self)

    def append(self, x):
        return _QuantLib.IntVector_append(self, x)

    def empty(self):
        return _QuantLib.IntVector_empty(self)

    def size(self):
        return _QuantLib.IntVector_size(self)

    def swap(self, v):
        return _QuantLib.IntVector_swap(self, v)

    def begin(self):
        return _QuantLib.IntVector_begin(self)

    def end(self):
        return _QuantLib.IntVector_end(self)

    def rbegin(self):
        return _QuantLib.IntVector_rbegin(self)

    def rend(self):
        return _QuantLib.IntVector_rend(self)

    def clear(self):
        return _QuantLib.IntVector_clear(self)

    def get_allocator(self):
        return _QuantLib.IntVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.IntVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.IntVector_push_back(self, x)

    def front(self):
        return _QuantLib.IntVector_front(self)

    def back(self):
        return _QuantLib.IntVector_back(self)

    def assign(self, n, x):
        return _QuantLib.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.IntVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.IntVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.IntVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.IntVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _QuantLib.IntVector_swigregister
IntVector_swigregister(IntVector)

class UnsignedIntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsignedIntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnsignedIntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.UnsignedIntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.UnsignedIntVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.UnsignedIntVector___bool__(self)

    def __len__(self):
        return _QuantLib.UnsignedIntVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.UnsignedIntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.UnsignedIntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.UnsignedIntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.UnsignedIntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.UnsignedIntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.UnsignedIntVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.UnsignedIntVector_pop(self)

    def append(self, x):
        return _QuantLib.UnsignedIntVector_append(self, x)

    def empty(self):
        return _QuantLib.UnsignedIntVector_empty(self)

    def size(self):
        return _QuantLib.UnsignedIntVector_size(self)

    def swap(self, v):
        return _QuantLib.UnsignedIntVector_swap(self, v)

    def begin(self):
        return _QuantLib.UnsignedIntVector_begin(self)

    def end(self):
        return _QuantLib.UnsignedIntVector_end(self)

    def rbegin(self):
        return _QuantLib.UnsignedIntVector_rbegin(self)

    def rend(self):
        return _QuantLib.UnsignedIntVector_rend(self)

    def clear(self):
        return _QuantLib.UnsignedIntVector_clear(self)

    def get_allocator(self):
        return _QuantLib.UnsignedIntVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.UnsignedIntVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.UnsignedIntVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_UnsignedIntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.UnsignedIntVector_push_back(self, x)

    def front(self):
        return _QuantLib.UnsignedIntVector_front(self)

    def back(self):
        return _QuantLib.UnsignedIntVector_back(self)

    def assign(self, n, x):
        return _QuantLib.UnsignedIntVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.UnsignedIntVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.UnsignedIntVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.UnsignedIntVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.UnsignedIntVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_UnsignedIntVector
    __del__ = lambda self: None
UnsignedIntVector_swigregister = _QuantLib.UnsignedIntVector_swigregister
UnsignedIntVector_swigregister(UnsignedIntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.DoubleVector___bool__(self)

    def __len__(self):
        return _QuantLib.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.DoubleVector_pop(self)

    def append(self, x):
        return _QuantLib.DoubleVector_append(self, x)

    def empty(self):
        return _QuantLib.DoubleVector_empty(self)

    def size(self):
        return _QuantLib.DoubleVector_size(self)

    def swap(self, v):
        return _QuantLib.DoubleVector_swap(self, v)

    def begin(self):
        return _QuantLib.DoubleVector_begin(self)

    def end(self):
        return _QuantLib.DoubleVector_end(self)

    def rbegin(self):
        return _QuantLib.DoubleVector_rbegin(self)

    def rend(self):
        return _QuantLib.DoubleVector_rend(self)

    def clear(self):
        return _QuantLib.DoubleVector_clear(self)

    def get_allocator(self):
        return _QuantLib.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.DoubleVector_push_back(self, x)

    def front(self):
        return _QuantLib.DoubleVector_front(self)

    def back(self):
        return _QuantLib.DoubleVector_back(self)

    def assign(self, n, x):
        return _QuantLib.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.DoubleVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.DoubleVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _QuantLib.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.StrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.StrVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.StrVector___bool__(self)

    def __len__(self):
        return _QuantLib.StrVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.StrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.StrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.StrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.StrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.StrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.StrVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.StrVector_pop(self)

    def append(self, x):
        return _QuantLib.StrVector_append(self, x)

    def empty(self):
        return _QuantLib.StrVector_empty(self)

    def size(self):
        return _QuantLib.StrVector_size(self)

    def swap(self, v):
        return _QuantLib.StrVector_swap(self, v)

    def begin(self):
        return _QuantLib.StrVector_begin(self)

    def end(self):
        return _QuantLib.StrVector_end(self)

    def rbegin(self):
        return _QuantLib.StrVector_rbegin(self)

    def rend(self):
        return _QuantLib.StrVector_rend(self)

    def clear(self):
        return _QuantLib.StrVector_clear(self)

    def get_allocator(self):
        return _QuantLib.StrVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.StrVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.StrVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_StrVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.StrVector_push_back(self, x)

    def front(self):
        return _QuantLib.StrVector_front(self)

    def back(self):
        return _QuantLib.StrVector_back(self)

    def assign(self, n, x):
        return _QuantLib.StrVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.StrVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.StrVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.StrVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.StrVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_StrVector
    __del__ = lambda self: None
StrVector_swigregister = _QuantLib.StrVector_swigregister
StrVector_swigregister(StrVector)

class BoolVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.BoolVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.BoolVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.BoolVector___bool__(self)

    def __len__(self):
        return _QuantLib.BoolVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.BoolVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.BoolVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.BoolVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.BoolVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.BoolVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.BoolVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.BoolVector_pop(self)

    def append(self, x):
        return _QuantLib.BoolVector_append(self, x)

    def empty(self):
        return _QuantLib.BoolVector_empty(self)

    def size(self):
        return _QuantLib.BoolVector_size(self)

    def swap(self, v):
        return _QuantLib.BoolVector_swap(self, v)

    def begin(self):
        return _QuantLib.BoolVector_begin(self)

    def end(self):
        return _QuantLib.BoolVector_end(self)

    def rbegin(self):
        return _QuantLib.BoolVector_rbegin(self)

    def rend(self):
        return _QuantLib.BoolVector_rend(self)

    def clear(self):
        return _QuantLib.BoolVector_clear(self)

    def get_allocator(self):
        return _QuantLib.BoolVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.BoolVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.BoolVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_BoolVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.BoolVector_push_back(self, x)

    def front(self):
        return _QuantLib.BoolVector_front(self)

    def back(self):
        return _QuantLib.BoolVector_back(self)

    def assign(self, n, x):
        return _QuantLib.BoolVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.BoolVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.BoolVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.BoolVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.BoolVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_BoolVector
    __del__ = lambda self: None
BoolVector_swigregister = _QuantLib.BoolVector_swigregister
BoolVector_swigregister(BoolVector)

class DoublePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoublePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoublePair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_DoublePair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _QuantLib.DoublePair_first_set
    __swig_getmethods__["first"] = _QuantLib.DoublePair_first_get
    if _newclass:
        first = _swig_property(_QuantLib.DoublePair_first_get, _QuantLib.DoublePair_first_set)
    __swig_setmethods__["second"] = _QuantLib.DoublePair_second_set
    __swig_getmethods__["second"] = _QuantLib.DoublePair_second_get
    if _newclass:
        second = _swig_property(_QuantLib.DoublePair_second_get, _QuantLib.DoublePair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _QuantLib.delete_DoublePair
    __del__ = lambda self: None
DoublePair_swigregister = _QuantLib.DoublePair_swigregister
DoublePair_swigregister(DoublePair)

class DoublePairVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoublePairVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoublePairVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.DoublePairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.DoublePairVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.DoublePairVector___bool__(self)

    def __len__(self):
        return _QuantLib.DoublePairVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.DoublePairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.DoublePairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.DoublePairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.DoublePairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.DoublePairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.DoublePairVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.DoublePairVector_pop(self)

    def append(self, x):
        return _QuantLib.DoublePairVector_append(self, x)

    def empty(self):
        return _QuantLib.DoublePairVector_empty(self)

    def size(self):
        return _QuantLib.DoublePairVector_size(self)

    def swap(self, v):
        return _QuantLib.DoublePairVector_swap(self, v)

    def begin(self):
        return _QuantLib.DoublePairVector_begin(self)

    def end(self):
        return _QuantLib.DoublePairVector_end(self)

    def rbegin(self):
        return _QuantLib.DoublePairVector_rbegin(self)

    def rend(self):
        return _QuantLib.DoublePairVector_rend(self)

    def clear(self):
        return _QuantLib.DoublePairVector_clear(self)

    def get_allocator(self):
        return _QuantLib.DoublePairVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.DoublePairVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.DoublePairVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_DoublePairVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.DoublePairVector_push_back(self, x)

    def front(self):
        return _QuantLib.DoublePairVector_front(self)

    def back(self):
        return _QuantLib.DoublePairVector_back(self)

    def assign(self, n, x):
        return _QuantLib.DoublePairVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.DoublePairVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.DoublePairVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.DoublePairVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.DoublePairVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_DoublePairVector
    __del__ = lambda self: None
DoublePairVector_swigregister = _QuantLib.DoublePairVector_swigregister
DoublePairVector_swigregister(DoublePairVector)

class PairDoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairDoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairDoubleVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PairDoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _QuantLib.PairDoubleVector_first_set
    __swig_getmethods__["first"] = _QuantLib.PairDoubleVector_first_get
    if _newclass:
        first = _swig_property(_QuantLib.PairDoubleVector_first_get, _QuantLib.PairDoubleVector_first_set)
    __swig_setmethods__["second"] = _QuantLib.PairDoubleVector_second_set
    __swig_getmethods__["second"] = _QuantLib.PairDoubleVector_second_get
    if _newclass:
        second = _swig_property(_QuantLib.PairDoubleVector_second_get, _QuantLib.PairDoubleVector_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _QuantLib.delete_PairDoubleVector
    __del__ = lambda self: None
PairDoubleVector_swigregister = _QuantLib.PairDoubleVector_swigregister
PairDoubleVector_swigregister(PairDoubleVector)

class NodePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodePair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_NodePair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _QuantLib.NodePair_first_set
    __swig_getmethods__["first"] = _QuantLib.NodePair_first_get
    if _newclass:
        first = _swig_property(_QuantLib.NodePair_first_get, _QuantLib.NodePair_first_set)
    __swig_setmethods__["second"] = _QuantLib.NodePair_second_set
    __swig_getmethods__["second"] = _QuantLib.NodePair_second_get
    if _newclass:
        second = _swig_property(_QuantLib.NodePair_second_get, _QuantLib.NodePair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _QuantLib.delete_NodePair
    __del__ = lambda self: None
NodePair_swigregister = _QuantLib.NodePair_swigregister
NodePair_swigregister(NodePair)

class NodeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.NodeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.NodeVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.NodeVector___bool__(self)

    def __len__(self):
        return _QuantLib.NodeVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.NodeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.NodeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.NodeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.NodeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.NodeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.NodeVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.NodeVector_pop(self)

    def append(self, x):
        return _QuantLib.NodeVector_append(self, x)

    def empty(self):
        return _QuantLib.NodeVector_empty(self)

    def size(self):
        return _QuantLib.NodeVector_size(self)

    def swap(self, v):
        return _QuantLib.NodeVector_swap(self, v)

    def begin(self):
        return _QuantLib.NodeVector_begin(self)

    def end(self):
        return _QuantLib.NodeVector_end(self)

    def rbegin(self):
        return _QuantLib.NodeVector_rbegin(self)

    def rend(self):
        return _QuantLib.NodeVector_rend(self)

    def clear(self):
        return _QuantLib.NodeVector_clear(self)

    def get_allocator(self):
        return _QuantLib.NodeVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.NodeVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.NodeVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_NodeVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.NodeVector_push_back(self, x)

    def front(self):
        return _QuantLib.NodeVector_front(self)

    def back(self):
        return _QuantLib.NodeVector_back(self)

    def assign(self, n, x):
        return _QuantLib.NodeVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.NodeVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.NodeVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.NodeVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.NodeVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_NodeVector
    __del__ = lambda self: None
NodeVector_swigregister = _QuantLib.NodeVector_swigregister
NodeVector_swigregister(NodeVector)

class Schedule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schedule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Schedule, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Schedule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __len__(self):
        return _QuantLib.Schedule___len__(self)

    def at(self, i):
        return _QuantLib.Schedule_at(self, i)

    def date(self, i):
        return _QuantLib.Schedule_date(self, i)

    def previousDate(self, refDate):
        return _QuantLib.Schedule_previousDate(self, refDate)

    def nextDate(self, refDate):
        return _QuantLib.Schedule_nextDate(self, refDate)

    def dates(self):
        return _QuantLib.Schedule_dates(self)

    def hasIsRegular(self):
        return _QuantLib.Schedule_hasIsRegular(self)

    def isRegular(self, *args):
        return _QuantLib.Schedule_isRegular(self, *args)

    def empty(self):
        return _QuantLib.Schedule_empty(self)

    def calendar(self):
        return _QuantLib.Schedule_calendar(self)

    def startDate(self):
        return _QuantLib.Schedule_startDate(self)

    def endDate(self):
        return _QuantLib.Schedule_endDate(self)

    def hasTenor(self):
        return _QuantLib.Schedule_hasTenor(self)

    def tenor(self):
        return _QuantLib.Schedule_tenor(self)

    def businessDayConvention(self):
        return _QuantLib.Schedule_businessDayConvention(self)

    def hasTerminationDateBusinessDayConvention(self):
        return _QuantLib.Schedule_hasTerminationDateBusinessDayConvention(self)

    def terminationDateBusinessDayConvention(self):
        return _QuantLib.Schedule_terminationDateBusinessDayConvention(self)

    def hasRule(self):
        return _QuantLib.Schedule_hasRule(self)

    def rule(self):
        return _QuantLib.Schedule_rule(self)

    def hasEndOfMonth(self):
        return _QuantLib.Schedule_hasEndOfMonth(self)

    def endOfMonth(self):
        return _QuantLib.Schedule_endOfMonth(self)

    def after(self, truncationDate):
        return _QuantLib.Schedule_after(self, truncationDate)

    def until(self, truncationDate):
        return _QuantLib.Schedule_until(self, truncationDate)

    def __getitem__(self, i):
        return _QuantLib.Schedule___getitem__(self, i)
    __swig_destroy__ = _QuantLib.delete_Schedule
    __del__ = lambda self: None
Schedule_swigregister = _QuantLib.Schedule_swigregister
Schedule_swigregister(Schedule)

class _MakeSchedule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _MakeSchedule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _MakeSchedule, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new__MakeSchedule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def fromDate(self, effectiveDate):
        return _QuantLib._MakeSchedule_fromDate(self, effectiveDate)

    def to(self, terminationDate):
        return _QuantLib._MakeSchedule_to(self, terminationDate)

    def withTenor(self, arg2):
        return _QuantLib._MakeSchedule_withTenor(self, arg2)

    def withFrequency(self, arg2):
        return _QuantLib._MakeSchedule_withFrequency(self, arg2)

    def withCalendar(self, arg2):
        return _QuantLib._MakeSchedule_withCalendar(self, arg2)

    def withConvention(self, arg2):
        return _QuantLib._MakeSchedule_withConvention(self, arg2)

    def withTerminationDateConvention(self, arg2):
        return _QuantLib._MakeSchedule_withTerminationDateConvention(self, arg2)

    def withRule(self, arg2):
        return _QuantLib._MakeSchedule_withRule(self, arg2)

    def forwards(self):
        return _QuantLib._MakeSchedule_forwards(self)

    def backwards(self):
        return _QuantLib._MakeSchedule_backwards(self)

    def endOfMonth(self, flag=True):
        return _QuantLib._MakeSchedule_endOfMonth(self, flag)

    def withFirstDate(self, d):
        return _QuantLib._MakeSchedule_withFirstDate(self, d)

    def withNextToLastDate(self, d):
        return _QuantLib._MakeSchedule_withNextToLastDate(self, d)

    def schedule(self):
        return _QuantLib._MakeSchedule_schedule(self)
    __swig_destroy__ = _QuantLib.delete__MakeSchedule
    __del__ = lambda self: None
_MakeSchedule_swigregister = _QuantLib._MakeSchedule_swigregister
_MakeSchedule_swigregister(_MakeSchedule)


def MakeSchedule(
        effectiveDate=None, terminationDate=None, tenor=None,
        frequency=None, calendar=None,
        convention=None, terminalDateConvention=None,
        rule=None, forwards=False, backwards=False,
        endOfMonth=None, firstDate=None, nextToLastDate=None):
    ms = _MakeSchedule()
    if effectiveDate is not None:
        ms.fromDate(effectiveDate)
    if terminationDate is not None:
        ms.to(terminationDate)
    if tenor is not None:
        ms.withTenor(tenor)
    if frequency is not None:
        ms.withFrequency(frequency)
    if calendar is not None:
        ms.withCalendar(calendar)
    if convention is not None:
        ms.withConvention(convention)
    if terminalDateConvention is not None:
        ms.withTerminationDateConvention(terminalDateConvention)
    if rule is not None:
        ms.withRule(rule)
    if forwards:
        ms.forwards()
    if backwards:
        ms.backwards()
    if endOfMonth is not None:
        ms.endOfMonth(endOfMonth)
    if firstDate is not None:
        ms.withFirstDate(firstDate)
    if nextToLastDate is not None:
        ms.withNextToLastDate(nextToLastDate)
    return ms.schedule()


def nullInt():
    return _QuantLib.nullInt()
nullInt = _QuantLib.nullInt

def nullDouble():
    return _QuantLib.nullDouble()
nullDouble = _QuantLib.nullDouble

def NullSize():
    return _QuantLib.NullSize()
NullSize = _QuantLib.NullSize

def NullReal():
    return _QuantLib.NullReal()
NullReal = _QuantLib.NullReal

def SizeNull():
    return _QuantLib.SizeNull()
SizeNull = _QuantLib.SizeNull

def RealNull():
    return _QuantLib.RealNull()
RealNull = _QuantLib.RealNull
class SampleNumber(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleNumber, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SampleNumber, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self):
        return _QuantLib.SampleNumber_value(self)

    def weight(self):
        return _QuantLib.SampleNumber_weight(self)
    __swig_destroy__ = _QuantLib.delete_SampleNumber
    __del__ = lambda self: None
SampleNumber_swigregister = _QuantLib.SampleNumber_swigregister
SampleNumber_swigregister(SampleNumber)

class SampleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SampleArray, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self):
        return _QuantLib.SampleArray_value(self)

    def weight(self):
        return _QuantLib.SampleArray_weight(self)
    __swig_destroy__ = _QuantLib.delete_SampleArray
    __del__ = lambda self: None
SampleArray_swigregister = _QuantLib.SampleArray_swigregister
SampleArray_swigregister(SampleArray)

class SampleRealVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleRealVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SampleRealVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self):
        return _QuantLib.SampleRealVector_value(self)

    def weight(self):
        return _QuantLib.SampleRealVector_weight(self)
    __swig_destroy__ = _QuantLib.delete_SampleRealVector
    __del__ = lambda self: None
SampleRealVector_swigregister = _QuantLib.SampleRealVector_swigregister
SampleRealVector_swigregister(SampleRealVector)

class IterativeBootstrap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IterativeBootstrap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IterativeBootstrap, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_IterativeBootstrap(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_IterativeBootstrap
    __del__ = lambda self: None
IterativeBootstrap_swigregister = _QuantLib.IterativeBootstrap_swigregister
IterativeBootstrap_swigregister(IterativeBootstrap)

class GlobalBootstrap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GlobalBootstrap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GlobalBootstrap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_GlobalBootstrap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_GlobalBootstrap
    __del__ = lambda self: None
GlobalBootstrap_swigregister = _QuantLib.GlobalBootstrap_swigregister
GlobalBootstrap_swigregister(GlobalBootstrap)


def close(*args):
    return _QuantLib.close(*args)
close = _QuantLib.close

def close_enough(*args):
    return _QuantLib.close_enough(*args)
close_enough = _QuantLib.close_enough

def enableTracing():
    return _QuantLib.enableTracing()
enableTracing = _QuantLib.enableTracing

def disableTracing():
    return _QuantLib.disableTracing()
disableTracing = _QuantLib.disableTracing
class LsmBasisSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LsmBasisSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LsmBasisSystem, name)
    __repr__ = _swig_repr
    Monomial = _QuantLib.LsmBasisSystem_Monomial
    Laguerre = _QuantLib.LsmBasisSystem_Laguerre
    Hermite = _QuantLib.LsmBasisSystem_Hermite
    Hyperbolic = _QuantLib.LsmBasisSystem_Hyperbolic
    Legendre = _QuantLib.LsmBasisSystem_Legendre
    Chebyshev = _QuantLib.LsmBasisSystem_Chebyshev
    Chebyshev2nd = _QuantLib.LsmBasisSystem_Chebyshev2nd

    def __init__(self):
        this = _QuantLib.new_LsmBasisSystem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_LsmBasisSystem
    __del__ = lambda self: None
LsmBasisSystem_swigregister = _QuantLib.LsmBasisSystem_swigregister
LsmBasisSystem_swigregister(LsmBasisSystem)

class CPI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPI, name)
    __repr__ = _swig_repr
    AsIndex = _QuantLib.CPI_AsIndex
    Flat = _QuantLib.CPI_Flat
    Linear = _QuantLib.CPI_Linear

    def __init__(self):
        this = _QuantLib.new_CPI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CPI
    __del__ = lambda self: None
CPI_swigregister = _QuantLib.CPI_swigregister
CPI_swigregister(CPI)

class Duration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Duration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Duration, name)
    __repr__ = _swig_repr
    Simple = _QuantLib.Duration_Simple
    Macaulay = _QuantLib.Duration_Macaulay
    Modified = _QuantLib.Duration_Modified

    def __init__(self):
        this = _QuantLib.new_Duration()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Duration
    __del__ = lambda self: None
Duration_swigregister = _QuantLib.Duration_swigregister
Duration_swigregister(Duration)

class Futures(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Futures, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Futures, name)
    __repr__ = _swig_repr
    IMM = _QuantLib.Futures_IMM
    ASX = _QuantLib.Futures_ASX

    def __init__(self):
        this = _QuantLib.new_Futures()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Futures
    __del__ = lambda self: None
Futures_swigregister = _QuantLib.Futures_swigregister
Futures_swigregister(Futures)

class Position(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Position, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Position, name)
    __repr__ = _swig_repr
    Long = _QuantLib.Position_Long
    Short = _QuantLib.Position_Short

    def __init__(self):
        this = _QuantLib.new_Position()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Position
    __del__ = lambda self: None
Position_swigregister = _QuantLib.Position_swigregister
Position_swigregister(Position)

class Settlement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Settlement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Settlement, name)
    __repr__ = _swig_repr
    Physical = _QuantLib.Settlement_Physical
    Cash = _QuantLib.Settlement_Cash
    PhysicalOTC = _QuantLib.Settlement_PhysicalOTC
    PhysicalCleared = _QuantLib.Settlement_PhysicalCleared
    CollateralizedCashPrice = _QuantLib.Settlement_CollateralizedCashPrice
    ParYieldCurve = _QuantLib.Settlement_ParYieldCurve

    def __init__(self):
        this = _QuantLib.new_Settlement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Settlement
    __del__ = lambda self: None
Settlement_swigregister = _QuantLib.Settlement_swigregister
Settlement_swigregister(Settlement)

class Protection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Protection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Protection, name)
    __repr__ = _swig_repr
    Buyer = _QuantLib.Protection_Buyer
    Seller = _QuantLib.Protection_Seller

    def __init__(self):
        this = _QuantLib.new_Protection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Protection
    __del__ = lambda self: None
Protection_swigregister = _QuantLib.Protection_swigregister
Protection_swigregister(Protection)

ShiftedLognormal = _QuantLib.ShiftedLognormal
Normal = _QuantLib.Normal
Following = _QuantLib.Following
ModifiedFollowing = _QuantLib.ModifiedFollowing
Preceding = _QuantLib.Preceding
ModifiedPreceding = _QuantLib.ModifiedPreceding
Unadjusted = _QuantLib.Unadjusted
HalfMonthModifiedFollowing = _QuantLib.HalfMonthModifiedFollowing
JoinHolidays = _QuantLib.JoinHolidays
JoinBusinessDays = _QuantLib.JoinBusinessDays
Sunday = _QuantLib.Sunday
Monday = _QuantLib.Monday
Tuesday = _QuantLib.Tuesday
Wednesday = _QuantLib.Wednesday
Thursday = _QuantLib.Thursday
Friday = _QuantLib.Friday
Saturday = _QuantLib.Saturday
January = _QuantLib.January
February = _QuantLib.February
March = _QuantLib.March
April = _QuantLib.April
May = _QuantLib.May
June = _QuantLib.June
July = _QuantLib.July
August = _QuantLib.August
September = _QuantLib.September
October = _QuantLib.October
November = _QuantLib.November
December = _QuantLib.December
Days = _QuantLib.Days
Weeks = _QuantLib.Weeks
Months = _QuantLib.Months
Years = _QuantLib.Years
Hours = _QuantLib.Hours
Minutes = _QuantLib.Minutes
Seconds = _QuantLib.Seconds
Milliseconds = _QuantLib.Milliseconds
Microseconds = _QuantLib.Microseconds
NoFrequency = _QuantLib.NoFrequency
Once = _QuantLib.Once
Annual = _QuantLib.Annual
Semiannual = _QuantLib.Semiannual
EveryFourthMonth = _QuantLib.EveryFourthMonth
Quarterly = _QuantLib.Quarterly
Bimonthly = _QuantLib.Bimonthly
Monthly = _QuantLib.Monthly
EveryFourthWeek = _QuantLib.EveryFourthWeek
Biweekly = _QuantLib.Biweekly
Weekly = _QuantLib.Weekly
Daily = _QuantLib.Daily
OtherFrequency = _QuantLib.OtherFrequency
Simple = _QuantLib.Simple
Compounded = _QuantLib.Compounded
Continuous = _QuantLib.Continuous
SimpleThenCompounded = _QuantLib.SimpleThenCompounded
CompoundedThenSimple = _QuantLib.CompoundedThenSimple
class ASX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ASX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ASX, name)
    __repr__ = _swig_repr
    F = _QuantLib.ASX_F
    G = _QuantLib.ASX_G
    H = _QuantLib.ASX_H
    J = _QuantLib.ASX_J
    K = _QuantLib.ASX_K
    M = _QuantLib.ASX_M
    N = _QuantLib.ASX_N
    Q = _QuantLib.ASX_Q
    U = _QuantLib.ASX_U
    V = _QuantLib.ASX_V
    X = _QuantLib.ASX_X
    Z = _QuantLib.ASX_Z
    if _newclass:
        isASXdate = staticmethod(_QuantLib.ASX_isASXdate)
    else:
        isASXdate = _QuantLib.ASX_isASXdate
    if _newclass:
        isASXcode = staticmethod(_QuantLib.ASX_isASXcode)
    else:
        isASXcode = _QuantLib.ASX_isASXcode
    if _newclass:
        code = staticmethod(_QuantLib.ASX_code)
    else:
        code = _QuantLib.ASX_code
    if _newclass:
        date = staticmethod(_QuantLib.ASX_date)
    else:
        date = _QuantLib.ASX_date
    if _newclass:
        nextDate = staticmethod(_QuantLib.ASX_nextDate)
    else:
        nextDate = _QuantLib.ASX_nextDate
    if _newclass:
        nextCode = staticmethod(_QuantLib.ASX_nextCode)
    else:
        nextCode = _QuantLib.ASX_nextCode

    def __init__(self):
        this = _QuantLib.new_ASX()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ASX
    __del__ = lambda self: None
ASX_swigregister = _QuantLib.ASX_swigregister
ASX_swigregister(ASX)

def ASX_isASXdate(d, mainCycle=True):
    return _QuantLib.ASX_isASXdate(d, mainCycle)
ASX_isASXdate = _QuantLib.ASX_isASXdate

def ASX_isASXcode(code, mainCycle=True):
    return _QuantLib.ASX_isASXcode(code, mainCycle)
ASX_isASXcode = _QuantLib.ASX_isASXcode

def ASX_code(asxDate):
    return _QuantLib.ASX_code(asxDate)
ASX_code = _QuantLib.ASX_code

def ASX_date(*args):
    return _QuantLib.ASX_date(*args)
ASX_date = _QuantLib.ASX_date

def ASX_nextDate(*args):
    return _QuantLib.ASX_nextDate(*args)
ASX_nextDate = _QuantLib.ASX_nextDate

def ASX_nextCode(*args):
    return _QuantLib.ASX_nextCode(*args)
ASX_nextCode = _QuantLib.ASX_nextCode

class IMM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMM, name)
    __repr__ = _swig_repr
    F = _QuantLib.IMM_F
    G = _QuantLib.IMM_G
    H = _QuantLib.IMM_H
    J = _QuantLib.IMM_J
    K = _QuantLib.IMM_K
    M = _QuantLib.IMM_M
    N = _QuantLib.IMM_N
    Q = _QuantLib.IMM_Q
    U = _QuantLib.IMM_U
    V = _QuantLib.IMM_V
    X = _QuantLib.IMM_X
    Z = _QuantLib.IMM_Z
    if _newclass:
        isIMMdate = staticmethod(_QuantLib.IMM_isIMMdate)
    else:
        isIMMdate = _QuantLib.IMM_isIMMdate
    if _newclass:
        isIMMcode = staticmethod(_QuantLib.IMM_isIMMcode)
    else:
        isIMMcode = _QuantLib.IMM_isIMMcode
    if _newclass:
        code = staticmethod(_QuantLib.IMM_code)
    else:
        code = _QuantLib.IMM_code
    if _newclass:
        date = staticmethod(_QuantLib.IMM_date)
    else:
        date = _QuantLib.IMM_date
    if _newclass:
        nextDate = staticmethod(_QuantLib.IMM_nextDate)
    else:
        nextDate = _QuantLib.IMM_nextDate
    if _newclass:
        nextCode = staticmethod(_QuantLib.IMM_nextCode)
    else:
        nextCode = _QuantLib.IMM_nextCode

    def __init__(self):
        this = _QuantLib.new_IMM()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_IMM
    __del__ = lambda self: None
IMM_swigregister = _QuantLib.IMM_swigregister
IMM_swigregister(IMM)

def IMM_isIMMdate(d, mainCycle=True):
    return _QuantLib.IMM_isIMMdate(d, mainCycle)
IMM_isIMMdate = _QuantLib.IMM_isIMMdate

def IMM_isIMMcode(code, mainCycle=True):
    return _QuantLib.IMM_isIMMcode(code, mainCycle)
IMM_isIMMcode = _QuantLib.IMM_isIMMcode

def IMM_code(immDate):
    return _QuantLib.IMM_code(immDate)
IMM_code = _QuantLib.IMM_code

def IMM_date(*args):
    return _QuantLib.IMM_date(*args)
IMM_date = _QuantLib.IMM_date

def IMM_nextDate(*args):
    return _QuantLib.IMM_nextDate(*args)
IMM_nextDate = _QuantLib.IMM_nextDate

def IMM_nextCode(*args):
    return _QuantLib.IMM_nextCode(*args)
IMM_nextCode = _QuantLib.IMM_nextCode

class DateGeneration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DateGeneration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DateGeneration, name)
    __repr__ = _swig_repr
    Backward = _QuantLib.DateGeneration_Backward
    Forward = _QuantLib.DateGeneration_Forward
    Zero = _QuantLib.DateGeneration_Zero
    ThirdWednesday = _QuantLib.DateGeneration_ThirdWednesday
    Twentieth = _QuantLib.DateGeneration_Twentieth
    TwentiethIMM = _QuantLib.DateGeneration_TwentiethIMM
    OldCDS = _QuantLib.DateGeneration_OldCDS
    CDS = _QuantLib.DateGeneration_CDS
    CDS2015 = _QuantLib.DateGeneration_CDS2015

    def __init__(self):
        this = _QuantLib.new_DateGeneration()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_DateGeneration
    __del__ = lambda self: None
DateGeneration_swigregister = _QuantLib.DateGeneration_swigregister
DateGeneration_swigregister(DateGeneration)

class Pillar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pillar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pillar, name)
    __repr__ = _swig_repr
    MaturityDate = _QuantLib.Pillar_MaturityDate
    LastRelevantDate = _QuantLib.Pillar_LastRelevantDate
    CustomDate = _QuantLib.Pillar_CustomDate

    def __init__(self):
        this = _QuantLib.new_Pillar()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Pillar
    __del__ = lambda self: None
Pillar_swigregister = _QuantLib.Pillar_swigregister
Pillar_swigregister(Pillar)

class Constraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Constraint, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def empty(self):
        return _QuantLib.Constraint_empty(self)

    def test(self, p):
        return _QuantLib.Constraint_test(self, p)

    def upperBound(self, params):
        return _QuantLib.Constraint_upperBound(self, params)

    def lowerBound(self, params):
        return _QuantLib.Constraint_lowerBound(self, params)

    def update(self, p, direction, beta):
        return _QuantLib.Constraint_update(self, p, direction, beta)
    __swig_destroy__ = _QuantLib.delete_Constraint
    __del__ = lambda self: None
Constraint_swigregister = _QuantLib.Constraint_swigregister
Constraint_swigregister(Constraint)

class BoundaryConstraint(Constraint):
    __swig_setmethods__ = {}
    for _s in [Constraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundaryConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Constraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoundaryConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, lower, upper):
        this = _QuantLib.new_BoundaryConstraint(lower, upper)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BoundaryConstraint
    __del__ = lambda self: None
BoundaryConstraint_swigregister = _QuantLib.BoundaryConstraint_swigregister
BoundaryConstraint_swigregister(BoundaryConstraint)

class NoConstraint(Constraint):
    __swig_setmethods__ = {}
    for _s in [Constraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Constraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_NoConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_NoConstraint
    __del__ = lambda self: None
NoConstraint_swigregister = _QuantLib.NoConstraint_swigregister
NoConstraint_swigregister(NoConstraint)

class PositiveConstraint(Constraint):
    __swig_setmethods__ = {}
    for _s in [Constraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositiveConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Constraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PositiveConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_PositiveConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_PositiveConstraint
    __del__ = lambda self: None
PositiveConstraint_swigregister = _QuantLib.PositiveConstraint_swigregister
PositiveConstraint_swigregister(PositiveConstraint)

class CompositeConstraint(Constraint):
    __swig_setmethods__ = {}
    for _s in [Constraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Constraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, c1, c2):
        this = _QuantLib.new_CompositeConstraint(c1, c2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CompositeConstraint
    __del__ = lambda self: None
CompositeConstraint_swigregister = _QuantLib.CompositeConstraint_swigregister
CompositeConstraint_swigregister(CompositeConstraint)

class NonhomogeneousBoundaryConstraint(Constraint):
    __swig_setmethods__ = {}
    for _s in [Constraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NonhomogeneousBoundaryConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Constraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NonhomogeneousBoundaryConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, l, u):
        this = _QuantLib.new_NonhomogeneousBoundaryConstraint(l, u)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_NonhomogeneousBoundaryConstraint
    __del__ = lambda self: None
NonhomogeneousBoundaryConstraint_swigregister = _QuantLib.NonhomogeneousBoundaryConstraint_swigregister
NonhomogeneousBoundaryConstraint_swigregister(NonhomogeneousBoundaryConstraint)

class EndCriteria(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EndCriteria, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EndCriteria, name)
    __repr__ = _swig_repr
    NoCriteria = _QuantLib.EndCriteria_NoCriteria
    MaxIterations = _QuantLib.EndCriteria_MaxIterations
    StationaryPoint = _QuantLib.EndCriteria_StationaryPoint
    StationaryFunctionValue = _QuantLib.EndCriteria_StationaryFunctionValue
    StationaryFunctionAccuracy = _QuantLib.EndCriteria_StationaryFunctionAccuracy
    ZeroGradientNorm = _QuantLib.EndCriteria_ZeroGradientNorm
    Unknown = _QuantLib.EndCriteria_Unknown

    def __init__(self, maxIteration, maxStationaryStateIterations, rootEpsilon, functionEpsilon, gradientNormEpsilon):
        this = _QuantLib.new_EndCriteria(maxIteration, maxStationaryStateIterations, rootEpsilon, functionEpsilon, gradientNormEpsilon)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, iteration, statState, positiveOptimization, fold, normgold, fnew, normgnewx, ecType):
        return _QuantLib.EndCriteria___call__(self, iteration, statState, positiveOptimization, fold, normgold, fnew, normgnewx, ecType)
    __swig_destroy__ = _QuantLib.delete_EndCriteria
    __del__ = lambda self: None
EndCriteria_swigregister = _QuantLib.EndCriteria_swigregister
EndCriteria_swigregister(EndCriteria)

class OptimizationMethod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptimizationMethod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptimizationMethod, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _QuantLib.delete_OptimizationMethod
    __del__ = lambda self: None
OptimizationMethod_swigregister = _QuantLib.OptimizationMethod_swigregister
OptimizationMethod_swigregister(OptimizationMethod)

class ConjugateGradient(OptimizationMethod):
    __swig_setmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConjugateGradient, name, value)
    __swig_getmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConjugateGradient, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_ConjugateGradient()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ConjugateGradient
    __del__ = lambda self: None
ConjugateGradient_swigregister = _QuantLib.ConjugateGradient_swigregister
ConjugateGradient_swigregister(ConjugateGradient)

class Simplex(OptimizationMethod):
    __swig_setmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Simplex, name, value)
    __swig_getmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Simplex, name)
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _QuantLib.new_Simplex(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getLambda(self):
        return _QuantLib.Simplex_getLambda(self)
    __swig_destroy__ = _QuantLib.delete_Simplex
    __del__ = lambda self: None
Simplex_swigregister = _QuantLib.Simplex_swigregister
Simplex_swigregister(Simplex)

class SteepestDescent(OptimizationMethod):
    __swig_setmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SteepestDescent, name, value)
    __swig_getmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SteepestDescent, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_SteepestDescent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SteepestDescent
    __del__ = lambda self: None
SteepestDescent_swigregister = _QuantLib.SteepestDescent_swigregister
SteepestDescent_swigregister(SteepestDescent)

class BFGS(OptimizationMethod):
    __swig_setmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BFGS, name, value)
    __swig_getmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BFGS, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_BFGS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BFGS
    __del__ = lambda self: None
BFGS_swigregister = _QuantLib.BFGS_swigregister
BFGS_swigregister(BFGS)

class LevenbergMarquardt(OptimizationMethod):
    __swig_setmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LevenbergMarquardt, name, value)
    __swig_getmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LevenbergMarquardt, name)
    __repr__ = _swig_repr

    def __init__(self, epsfcn=1.0e-8, xtol=1.0e-8, gtol=1.0e-8, useCostFunctionsJacobian=False):
        this = _QuantLib.new_LevenbergMarquardt(epsfcn, xtol, gtol, useCostFunctionsJacobian)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_LevenbergMarquardt
    __del__ = lambda self: None
LevenbergMarquardt_swigregister = _QuantLib.LevenbergMarquardt_swigregister
LevenbergMarquardt_swigregister(LevenbergMarquardt)

class DifferentialEvolution(OptimizationMethod):
    __swig_setmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DifferentialEvolution, name, value)
    __swig_getmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DifferentialEvolution, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_DifferentialEvolution()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_DifferentialEvolution
    __del__ = lambda self: None
DifferentialEvolution_swigregister = _QuantLib.DifferentialEvolution_swigregister
DifferentialEvolution_swigregister(DifferentialEvolution)

class SamplerGaussian(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SamplerGaussian, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SamplerGaussian, name)
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        this = _QuantLib.new_SamplerGaussian(seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SamplerGaussian
    __del__ = lambda self: None
SamplerGaussian_swigregister = _QuantLib.SamplerGaussian_swigregister
SamplerGaussian_swigregister(SamplerGaussian)

class SamplerLogNormal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SamplerLogNormal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SamplerLogNormal, name)
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        this = _QuantLib.new_SamplerLogNormal(seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SamplerLogNormal
    __del__ = lambda self: None
SamplerLogNormal_swigregister = _QuantLib.SamplerLogNormal_swigregister
SamplerLogNormal_swigregister(SamplerLogNormal)

class SamplerMirrorGaussian(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SamplerMirrorGaussian, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SamplerMirrorGaussian, name)
    __repr__ = _swig_repr

    def __init__(self, lower, upper, seed=0):
        this = _QuantLib.new_SamplerMirrorGaussian(lower, upper, seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SamplerMirrorGaussian
    __del__ = lambda self: None
SamplerMirrorGaussian_swigregister = _QuantLib.SamplerMirrorGaussian_swigregister
SamplerMirrorGaussian_swigregister(SamplerMirrorGaussian)

class ProbabilityBoltzmannDownhill(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProbabilityBoltzmannDownhill, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProbabilityBoltzmannDownhill, name)
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        this = _QuantLib.new_ProbabilityBoltzmannDownhill(seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ProbabilityBoltzmannDownhill
    __del__ = lambda self: None
ProbabilityBoltzmannDownhill_swigregister = _QuantLib.ProbabilityBoltzmannDownhill_swigregister
ProbabilityBoltzmannDownhill_swigregister(ProbabilityBoltzmannDownhill)

class TemperatureExponential(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TemperatureExponential, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TemperatureExponential, name)
    __repr__ = _swig_repr

    def __init__(self, initialTemp, dimension, power=0.95):
        this = _QuantLib.new_TemperatureExponential(initialTemp, dimension, power)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_TemperatureExponential
    __del__ = lambda self: None
TemperatureExponential_swigregister = _QuantLib.TemperatureExponential_swigregister
TemperatureExponential_swigregister(TemperatureExponential)

class ReannealingTrivial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReannealingTrivial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReannealingTrivial, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_ReannealingTrivial()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ReannealingTrivial
    __del__ = lambda self: None
ReannealingTrivial_swigregister = _QuantLib.ReannealingTrivial_swigregister
ReannealingTrivial_swigregister(ReannealingTrivial)

class GaussianSimulatedAnnealing(OptimizationMethod):
    __swig_setmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianSimulatedAnnealing, name, value)
    __swig_getmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianSimulatedAnnealing, name)
    __repr__ = _swig_repr
    NoResetScheme = _QuantLib.GaussianSimulatedAnnealing_NoResetScheme
    ResetToBestPoint = _QuantLib.GaussianSimulatedAnnealing_ResetToBestPoint
    ResetToOrigin = _QuantLib.GaussianSimulatedAnnealing_ResetToOrigin

    def __init__(self, *args):
        this = _QuantLib.new_GaussianSimulatedAnnealing(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_GaussianSimulatedAnnealing
    __del__ = lambda self: None
GaussianSimulatedAnnealing_swigregister = _QuantLib.GaussianSimulatedAnnealing_swigregister
GaussianSimulatedAnnealing_swigregister(GaussianSimulatedAnnealing)

class MirrorGaussianSimulatedAnnealing(OptimizationMethod):
    __swig_setmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MirrorGaussianSimulatedAnnealing, name, value)
    __swig_getmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MirrorGaussianSimulatedAnnealing, name)
    __repr__ = _swig_repr
    NoResetScheme = _QuantLib.MirrorGaussianSimulatedAnnealing_NoResetScheme
    ResetToBestPoint = _QuantLib.MirrorGaussianSimulatedAnnealing_ResetToBestPoint
    ResetToOrigin = _QuantLib.MirrorGaussianSimulatedAnnealing_ResetToOrigin

    def __init__(self, *args):
        this = _QuantLib.new_MirrorGaussianSimulatedAnnealing(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MirrorGaussianSimulatedAnnealing
    __del__ = lambda self: None
MirrorGaussianSimulatedAnnealing_swigregister = _QuantLib.MirrorGaussianSimulatedAnnealing_swigregister
MirrorGaussianSimulatedAnnealing_swigregister(MirrorGaussianSimulatedAnnealing)

class LogNormalSimulatedAnnealing(OptimizationMethod):
    __swig_setmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogNormalSimulatedAnnealing, name, value)
    __swig_getmethods__ = {}
    for _s in [OptimizationMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LogNormalSimulatedAnnealing, name)
    __repr__ = _swig_repr
    NoResetScheme = _QuantLib.LogNormalSimulatedAnnealing_NoResetScheme
    ResetToBestPoint = _QuantLib.LogNormalSimulatedAnnealing_ResetToBestPoint
    ResetToOrigin = _QuantLib.LogNormalSimulatedAnnealing_ResetToOrigin

    def __init__(self, *args):
        this = _QuantLib.new_LogNormalSimulatedAnnealing(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_LogNormalSimulatedAnnealing
    __del__ = lambda self: None
LogNormalSimulatedAnnealing_swigregister = _QuantLib.LogNormalSimulatedAnnealing_swigregister
LogNormalSimulatedAnnealing_swigregister(LogNormalSimulatedAnnealing)

class Optimizer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Optimizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Optimizer, name)
    __repr__ = _swig_repr

    def solve(self, function, c, m, e, iv):
        return _QuantLib.Optimizer_solve(self, function, c, m, e, iv)

    def __init__(self):
        this = _QuantLib.new_Optimizer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Optimizer
    __del__ = lambda self: None
Optimizer_swigregister = _QuantLib.Optimizer_swigregister
Optimizer_swigregister(Optimizer)

class Observable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Observable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Observable, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_Observable()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Observable
    __del__ = lambda self: None
Observable_swigregister = _QuantLib.Observable_swigregister
Observable_swigregister(Observable)

class PricingEngine(Observable):
    __swig_setmethods__ = {}
    for _s in [Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PricingEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PricingEngine, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _QuantLib.delete_PricingEngine
    __del__ = lambda self: None
PricingEngine_swigregister = _QuantLib.PricingEngine_swigregister
PricingEngine_swigregister(PricingEngine)

class Instrument(Observable):
    __swig_setmethods__ = {}
    for _s in [Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Instrument, name, value)
    __swig_getmethods__ = {}
    for _s in [Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Instrument, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def NPV(self):
        return _QuantLib.Instrument_NPV(self)

    def errorEstimate(self):
        return _QuantLib.Instrument_errorEstimate(self)

    def isExpired(self):
        return _QuantLib.Instrument_isExpired(self)

    def setPricingEngine(self, arg2):
        return _QuantLib.Instrument_setPricingEngine(self, arg2)

    def recalculate(self):
        return _QuantLib.Instrument_recalculate(self)

    def freeze(self):
        return _QuantLib.Instrument_freeze(self)

    def unfreeze(self):
        return _QuantLib.Instrument_unfreeze(self)
    __swig_destroy__ = _QuantLib.delete_Instrument
    __del__ = lambda self: None
Instrument_swigregister = _QuantLib.Instrument_swigregister
Instrument_swigregister(Instrument)

class InstrumentVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstrumentVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InstrumentVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.InstrumentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.InstrumentVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.InstrumentVector___bool__(self)

    def __len__(self):
        return _QuantLib.InstrumentVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.InstrumentVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.InstrumentVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.InstrumentVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.InstrumentVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.InstrumentVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.InstrumentVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.InstrumentVector_pop(self)

    def append(self, x):
        return _QuantLib.InstrumentVector_append(self, x)

    def empty(self):
        return _QuantLib.InstrumentVector_empty(self)

    def size(self):
        return _QuantLib.InstrumentVector_size(self)

    def swap(self, v):
        return _QuantLib.InstrumentVector_swap(self, v)

    def begin(self):
        return _QuantLib.InstrumentVector_begin(self)

    def end(self):
        return _QuantLib.InstrumentVector_end(self)

    def rbegin(self):
        return _QuantLib.InstrumentVector_rbegin(self)

    def rend(self):
        return _QuantLib.InstrumentVector_rend(self)

    def clear(self):
        return _QuantLib.InstrumentVector_clear(self)

    def get_allocator(self):
        return _QuantLib.InstrumentVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.InstrumentVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.InstrumentVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_InstrumentVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.InstrumentVector_push_back(self, x)

    def front(self):
        return _QuantLib.InstrumentVector_front(self)

    def back(self):
        return _QuantLib.InstrumentVector_back(self)

    def assign(self, n, x):
        return _QuantLib.InstrumentVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.InstrumentVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.InstrumentVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.InstrumentVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.InstrumentVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_InstrumentVector
    __del__ = lambda self: None
InstrumentVector_swigregister = _QuantLib.InstrumentVector_swigregister
InstrumentVector_swigregister(InstrumentVector)

class TermStructure(Observable):
    __swig_setmethods__ = {}
    for _s in [Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TermStructure, name, value)
    __swig_getmethods__ = {}
    for _s in [Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TermStructure, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def dayCounter(self):
        return _QuantLib.TermStructure_dayCounter(self)

    def timeFromReference(self, date):
        return _QuantLib.TermStructure_timeFromReference(self, date)

    def calendar(self):
        return _QuantLib.TermStructure_calendar(self)

    def referenceDate(self):
        return _QuantLib.TermStructure_referenceDate(self)

    def maxDate(self):
        return _QuantLib.TermStructure_maxDate(self)

    def maxTime(self):
        return _QuantLib.TermStructure_maxTime(self)

    def enableExtrapolation(self):
        return _QuantLib.TermStructure_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _QuantLib.TermStructure_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _QuantLib.TermStructure_allowsExtrapolation(self)
    __swig_destroy__ = _QuantLib.delete_TermStructure
    __del__ = lambda self: None
TermStructure_swigregister = _QuantLib.TermStructure_swigregister
TermStructure_swigregister(TermStructure)

class CashFlow(Observable):
    __swig_setmethods__ = {}
    for _s in [Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashFlow, name, value)
    __swig_getmethods__ = {}
    for _s in [Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CashFlow, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def amount(self):
        return _QuantLib.CashFlow_amount(self)

    def date(self):
        return _QuantLib.CashFlow_date(self)

    def hasOccurred(self, *args):
        return _QuantLib.CashFlow_hasOccurred(self, *args)
    __swig_destroy__ = _QuantLib.delete_CashFlow
    __del__ = lambda self: None
CashFlow_swigregister = _QuantLib.CashFlow_swigregister
CashFlow_swigregister(CashFlow)

class Leg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Leg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Leg, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.Leg_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.Leg___nonzero__(self)

    def __bool__(self):
        return _QuantLib.Leg___bool__(self)

    def __len__(self):
        return _QuantLib.Leg___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.Leg___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.Leg___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.Leg___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.Leg___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.Leg___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.Leg___setitem__(self, *args)

    def pop(self):
        return _QuantLib.Leg_pop(self)

    def append(self, x):
        return _QuantLib.Leg_append(self, x)

    def empty(self):
        return _QuantLib.Leg_empty(self)

    def size(self):
        return _QuantLib.Leg_size(self)

    def swap(self, v):
        return _QuantLib.Leg_swap(self, v)

    def begin(self):
        return _QuantLib.Leg_begin(self)

    def end(self):
        return _QuantLib.Leg_end(self)

    def rbegin(self):
        return _QuantLib.Leg_rbegin(self)

    def rend(self):
        return _QuantLib.Leg_rend(self)

    def clear(self):
        return _QuantLib.Leg_clear(self)

    def get_allocator(self):
        return _QuantLib.Leg_get_allocator(self)

    def pop_back(self):
        return _QuantLib.Leg_pop_back(self)

    def erase(self, *args):
        return _QuantLib.Leg_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_Leg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.Leg_push_back(self, x)

    def front(self):
        return _QuantLib.Leg_front(self)

    def back(self):
        return _QuantLib.Leg_back(self)

    def assign(self, n, x):
        return _QuantLib.Leg_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.Leg_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.Leg_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.Leg_reserve(self, n)

    def capacity(self):
        return _QuantLib.Leg_capacity(self)
    __swig_destroy__ = _QuantLib.delete_Leg
    __del__ = lambda self: None
Leg_swigregister = _QuantLib.Leg_swigregister
Leg_swigregister(Leg)

class LegVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LegVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.LegVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.LegVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.LegVector___bool__(self)

    def __len__(self):
        return _QuantLib.LegVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.LegVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.LegVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.LegVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.LegVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.LegVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.LegVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.LegVector_pop(self)

    def append(self, x):
        return _QuantLib.LegVector_append(self, x)

    def empty(self):
        return _QuantLib.LegVector_empty(self)

    def size(self):
        return _QuantLib.LegVector_size(self)

    def swap(self, v):
        return _QuantLib.LegVector_swap(self, v)

    def begin(self):
        return _QuantLib.LegVector_begin(self)

    def end(self):
        return _QuantLib.LegVector_end(self)

    def rbegin(self):
        return _QuantLib.LegVector_rbegin(self)

    def rend(self):
        return _QuantLib.LegVector_rend(self)

    def clear(self):
        return _QuantLib.LegVector_clear(self)

    def get_allocator(self):
        return _QuantLib.LegVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.LegVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.LegVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_LegVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.LegVector_push_back(self, x)

    def front(self):
        return _QuantLib.LegVector_front(self)

    def back(self):
        return _QuantLib.LegVector_back(self)

    def assign(self, n, x):
        return _QuantLib.LegVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.LegVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.LegVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.LegVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.LegVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_LegVector
    __del__ = lambda self: None
LegVector_swigregister = _QuantLib.LegVector_swigregister
LegVector_swigregister(LegVector)

class CalibratedModel(Observable):
    __swig_setmethods__ = {}
    for _s in [Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalibratedModel, name, value)
    __swig_getmethods__ = {}
    for _s in [Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CalibratedModel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def params(self):
        return _QuantLib.CalibratedModel_params(self)

    def setParams(self, params):
        return _QuantLib.CalibratedModel_setParams(self, params)

    def calibrate(self, *args):
        return _QuantLib.CalibratedModel_calibrate(self, *args)

    def value(self, params, helpers):
        return _QuantLib.CalibratedModel_value(self, params, helpers)

    def constraint(self):
        return _QuantLib.CalibratedModel_constraint(self)

    def endCriteria(self):
        return _QuantLib.CalibratedModel_endCriteria(self)

    def problemValues(self):
        return _QuantLib.CalibratedModel_problemValues(self)

    def functionEvaluation(self):
        return _QuantLib.CalibratedModel_functionEvaluation(self)
    __swig_destroy__ = _QuantLib.delete_CalibratedModel
    __del__ = lambda self: None
CalibratedModel_swigregister = _QuantLib.CalibratedModel_swigregister
CalibratedModel_swigregister(CalibratedModel)

class TermStructureConsistentModel(Observable):
    __swig_setmethods__ = {}
    for _s in [Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TermStructureConsistentModel, name, value)
    __swig_getmethods__ = {}
    for _s in [Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TermStructureConsistentModel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def termStructure(self):
        return _QuantLib.TermStructureConsistentModel_termStructure(self)
    __swig_destroy__ = _QuantLib.delete_TermStructureConsistentModel
    __del__ = lambda self: None
TermStructureConsistentModel_swigregister = _QuantLib.TermStructureConsistentModel_swigregister
TermStructureConsistentModel_swigregister(TermStructureConsistentModel)

class Index(Observable):
    __swig_setmethods__ = {}
    for _s in [Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Index, name, value)
    __swig_getmethods__ = {}
    for _s in [Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Index, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def name(self):
        return _QuantLib.Index_name(self)

    def fixingCalendar(self):
        return _QuantLib.Index_fixingCalendar(self)

    def isValidFixingDate(self, fixingDate):
        return _QuantLib.Index_isValidFixingDate(self, fixingDate)

    def fixing(self, fixingDate, forecastTodaysFixing=False):
        return _QuantLib.Index_fixing(self, fixingDate, forecastTodaysFixing)

    def allowsNativeFixings(self):
        return _QuantLib.Index_allowsNativeFixings(self)

    def addFixing(self, fixingDate, fixing, forceOverwrite=False):
        return _QuantLib.Index_addFixing(self, fixingDate, fixing, forceOverwrite)

    def timeSeries(self):
        return _QuantLib.Index_timeSeries(self)

    def clearFixings(self):
        return _QuantLib.Index_clearFixings(self)

    def addFixings(self, *args):
        return _QuantLib.Index_addFixings(self, *args)

    def __str__(self):
        return _QuantLib.Index___str__(self)
    __swig_destroy__ = _QuantLib.delete_Index
    __del__ = lambda self: None
Index_swigregister = _QuantLib.Index_swigregister
Index_swigregister(Index)

class SmileSection(Observable):
    __swig_setmethods__ = {}
    for _s in [Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SmileSection, name, value)
    __swig_getmethods__ = {}
    for _s in [Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SmileSection, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def minStrike(self):
        return _QuantLib.SmileSection_minStrike(self)

    def maxStrike(self):
        return _QuantLib.SmileSection_maxStrike(self)

    def atmLevel(self):
        return _QuantLib.SmileSection_atmLevel(self)

    def variance(self, strike):
        return _QuantLib.SmileSection_variance(self, strike)

    def exerciseDate(self):
        return _QuantLib.SmileSection_exerciseDate(self)

    def volatilityType(self):
        return _QuantLib.SmileSection_volatilityType(self)

    def shift(self):
        return _QuantLib.SmileSection_shift(self)

    def referenceDate(self):
        return _QuantLib.SmileSection_referenceDate(self)

    def exerciseTime(self):
        return _QuantLib.SmileSection_exerciseTime(self)

    def dayCounter(self):
        return _QuantLib.SmileSection_dayCounter(self)

    def optionPrice(self, *args):
        return _QuantLib.SmileSection_optionPrice(self, *args)

    def digitalOptionPrice(self, *args):
        return _QuantLib.SmileSection_digitalOptionPrice(self, *args)

    def vega(self, strike, discount=1.0):
        return _QuantLib.SmileSection_vega(self, strike, discount)

    def density(self, strike, discount=1.0, gap=1.0E-4):
        return _QuantLib.SmileSection_density(self, strike, discount, gap)

    def volatility(self, *args):
        return _QuantLib.SmileSection_volatility(self, *args)
    __swig_destroy__ = _QuantLib.delete_SmileSection
    __del__ = lambda self: None
SmileSection_swigregister = _QuantLib.SmileSection_swigregister
SmileSection_swigregister(SmileSection)

class SmileSectionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SmileSectionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SmileSectionVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.SmileSectionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.SmileSectionVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.SmileSectionVector___bool__(self)

    def __len__(self):
        return _QuantLib.SmileSectionVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.SmileSectionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.SmileSectionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.SmileSectionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.SmileSectionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.SmileSectionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.SmileSectionVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.SmileSectionVector_pop(self)

    def append(self, x):
        return _QuantLib.SmileSectionVector_append(self, x)

    def empty(self):
        return _QuantLib.SmileSectionVector_empty(self)

    def size(self):
        return _QuantLib.SmileSectionVector_size(self)

    def swap(self, v):
        return _QuantLib.SmileSectionVector_swap(self, v)

    def begin(self):
        return _QuantLib.SmileSectionVector_begin(self)

    def end(self):
        return _QuantLib.SmileSectionVector_end(self)

    def rbegin(self):
        return _QuantLib.SmileSectionVector_rbegin(self)

    def rend(self):
        return _QuantLib.SmileSectionVector_rend(self)

    def clear(self):
        return _QuantLib.SmileSectionVector_clear(self)

    def get_allocator(self):
        return _QuantLib.SmileSectionVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.SmileSectionVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.SmileSectionVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_SmileSectionVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.SmileSectionVector_push_back(self, x)

    def front(self):
        return _QuantLib.SmileSectionVector_front(self)

    def back(self):
        return _QuantLib.SmileSectionVector_back(self)

    def assign(self, n, x):
        return _QuantLib.SmileSectionVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.SmileSectionVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.SmileSectionVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.SmileSectionVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.SmileSectionVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_SmileSectionVector
    __del__ = lambda self: None
SmileSectionVector_swigregister = _QuantLib.SmileSectionVector_swigregister
SmileSectionVector_swigregister(SmileSectionVector)

class DefaultProbabilityHelper(Observable):
    __swig_setmethods__ = {}
    for _s in [Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultProbabilityHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultProbabilityHelper, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def quote(self):
        return _QuantLib.DefaultProbabilityHelper_quote(self)

    def latestDate(self):
        return _QuantLib.DefaultProbabilityHelper_latestDate(self)

    def earliestDate(self):
        return _QuantLib.DefaultProbabilityHelper_earliestDate(self)

    def maturityDate(self):
        return _QuantLib.DefaultProbabilityHelper_maturityDate(self)

    def latestRelevantDate(self):
        return _QuantLib.DefaultProbabilityHelper_latestRelevantDate(self)

    def pillarDate(self):
        return _QuantLib.DefaultProbabilityHelper_pillarDate(self)

    def impliedQuote(self):
        return _QuantLib.DefaultProbabilityHelper_impliedQuote(self)

    def quoteError(self):
        return _QuantLib.DefaultProbabilityHelper_quoteError(self)
    __swig_destroy__ = _QuantLib.delete_DefaultProbabilityHelper
    __del__ = lambda self: None
DefaultProbabilityHelper_swigregister = _QuantLib.DefaultProbabilityHelper_swigregister
DefaultProbabilityHelper_swigregister(DefaultProbabilityHelper)

class DefaultProbabilityHelperVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultProbabilityHelperVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultProbabilityHelperVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.DefaultProbabilityHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.DefaultProbabilityHelperVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.DefaultProbabilityHelperVector___bool__(self)

    def __len__(self):
        return _QuantLib.DefaultProbabilityHelperVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.DefaultProbabilityHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.DefaultProbabilityHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.DefaultProbabilityHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.DefaultProbabilityHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.DefaultProbabilityHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.DefaultProbabilityHelperVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.DefaultProbabilityHelperVector_pop(self)

    def append(self, x):
        return _QuantLib.DefaultProbabilityHelperVector_append(self, x)

    def empty(self):
        return _QuantLib.DefaultProbabilityHelperVector_empty(self)

    def size(self):
        return _QuantLib.DefaultProbabilityHelperVector_size(self)

    def swap(self, v):
        return _QuantLib.DefaultProbabilityHelperVector_swap(self, v)

    def begin(self):
        return _QuantLib.DefaultProbabilityHelperVector_begin(self)

    def end(self):
        return _QuantLib.DefaultProbabilityHelperVector_end(self)

    def rbegin(self):
        return _QuantLib.DefaultProbabilityHelperVector_rbegin(self)

    def rend(self):
        return _QuantLib.DefaultProbabilityHelperVector_rend(self)

    def clear(self):
        return _QuantLib.DefaultProbabilityHelperVector_clear(self)

    def get_allocator(self):
        return _QuantLib.DefaultProbabilityHelperVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.DefaultProbabilityHelperVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.DefaultProbabilityHelperVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_DefaultProbabilityHelperVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.DefaultProbabilityHelperVector_push_back(self, x)

    def front(self):
        return _QuantLib.DefaultProbabilityHelperVector_front(self)

    def back(self):
        return _QuantLib.DefaultProbabilityHelperVector_back(self)

    def assign(self, n, x):
        return _QuantLib.DefaultProbabilityHelperVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.DefaultProbabilityHelperVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.DefaultProbabilityHelperVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.DefaultProbabilityHelperVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.DefaultProbabilityHelperVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_DefaultProbabilityHelperVector
    __del__ = lambda self: None
DefaultProbabilityHelperVector_swigregister = _QuantLib.DefaultProbabilityHelperVector_swigregister
DefaultProbabilityHelperVector_swigregister(DefaultProbabilityHelperVector)

class ZeroHelper(Observable):
    __swig_setmethods__ = {}
    for _s in [Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZeroHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZeroHelper, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def quote(self):
        return _QuantLib.ZeroHelper_quote(self)

    def latestDate(self):
        return _QuantLib.ZeroHelper_latestDate(self)

    def earliestDate(self):
        return _QuantLib.ZeroHelper_earliestDate(self)

    def maturityDate(self):
        return _QuantLib.ZeroHelper_maturityDate(self)

    def latestRelevantDate(self):
        return _QuantLib.ZeroHelper_latestRelevantDate(self)

    def pillarDate(self):
        return _QuantLib.ZeroHelper_pillarDate(self)

    def impliedQuote(self):
        return _QuantLib.ZeroHelper_impliedQuote(self)

    def quoteError(self):
        return _QuantLib.ZeroHelper_quoteError(self)
    __swig_destroy__ = _QuantLib.delete_ZeroHelper
    __del__ = lambda self: None
ZeroHelper_swigregister = _QuantLib.ZeroHelper_swigregister
ZeroHelper_swigregister(ZeroHelper)

class YoYHelper(Observable):
    __swig_setmethods__ = {}
    for _s in [Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YoYHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YoYHelper, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def quote(self):
        return _QuantLib.YoYHelper_quote(self)

    def latestDate(self):
        return _QuantLib.YoYHelper_latestDate(self)

    def earliestDate(self):
        return _QuantLib.YoYHelper_earliestDate(self)

    def maturityDate(self):
        return _QuantLib.YoYHelper_maturityDate(self)

    def latestRelevantDate(self):
        return _QuantLib.YoYHelper_latestRelevantDate(self)

    def pillarDate(self):
        return _QuantLib.YoYHelper_pillarDate(self)

    def impliedQuote(self):
        return _QuantLib.YoYHelper_impliedQuote(self)

    def quoteError(self):
        return _QuantLib.YoYHelper_quoteError(self)
    __swig_destroy__ = _QuantLib.delete_YoYHelper
    __del__ = lambda self: None
YoYHelper_swigregister = _QuantLib.YoYHelper_swigregister
YoYHelper_swigregister(YoYHelper)

class YoYOptionHelper(Observable):
    __swig_setmethods__ = {}
    for _s in [Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YoYOptionHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YoYOptionHelper, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def quote(self):
        return _QuantLib.YoYOptionHelper_quote(self)

    def latestDate(self):
        return _QuantLib.YoYOptionHelper_latestDate(self)

    def earliestDate(self):
        return _QuantLib.YoYOptionHelper_earliestDate(self)

    def maturityDate(self):
        return _QuantLib.YoYOptionHelper_maturityDate(self)

    def latestRelevantDate(self):
        return _QuantLib.YoYOptionHelper_latestRelevantDate(self)

    def pillarDate(self):
        return _QuantLib.YoYOptionHelper_pillarDate(self)

    def impliedQuote(self):
        return _QuantLib.YoYOptionHelper_impliedQuote(self)

    def quoteError(self):
        return _QuantLib.YoYOptionHelper_quoteError(self)
    __swig_destroy__ = _QuantLib.delete_YoYOptionHelper
    __del__ = lambda self: None
YoYOptionHelper_swigregister = _QuantLib.YoYOptionHelper_swigregister
YoYOptionHelper_swigregister(YoYOptionHelper)

class ZeroHelperVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZeroHelperVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZeroHelperVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.ZeroHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.ZeroHelperVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.ZeroHelperVector___bool__(self)

    def __len__(self):
        return _QuantLib.ZeroHelperVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.ZeroHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.ZeroHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.ZeroHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.ZeroHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.ZeroHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.ZeroHelperVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.ZeroHelperVector_pop(self)

    def append(self, x):
        return _QuantLib.ZeroHelperVector_append(self, x)

    def empty(self):
        return _QuantLib.ZeroHelperVector_empty(self)

    def size(self):
        return _QuantLib.ZeroHelperVector_size(self)

    def swap(self, v):
        return _QuantLib.ZeroHelperVector_swap(self, v)

    def begin(self):
        return _QuantLib.ZeroHelperVector_begin(self)

    def end(self):
        return _QuantLib.ZeroHelperVector_end(self)

    def rbegin(self):
        return _QuantLib.ZeroHelperVector_rbegin(self)

    def rend(self):
        return _QuantLib.ZeroHelperVector_rend(self)

    def clear(self):
        return _QuantLib.ZeroHelperVector_clear(self)

    def get_allocator(self):
        return _QuantLib.ZeroHelperVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.ZeroHelperVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.ZeroHelperVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_ZeroHelperVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.ZeroHelperVector_push_back(self, x)

    def front(self):
        return _QuantLib.ZeroHelperVector_front(self)

    def back(self):
        return _QuantLib.ZeroHelperVector_back(self)

    def assign(self, n, x):
        return _QuantLib.ZeroHelperVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.ZeroHelperVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.ZeroHelperVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.ZeroHelperVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.ZeroHelperVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_ZeroHelperVector
    __del__ = lambda self: None
ZeroHelperVector_swigregister = _QuantLib.ZeroHelperVector_swigregister
ZeroHelperVector_swigregister(ZeroHelperVector)

class YoYHelperVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, YoYHelperVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, YoYHelperVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.YoYHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.YoYHelperVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.YoYHelperVector___bool__(self)

    def __len__(self):
        return _QuantLib.YoYHelperVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.YoYHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.YoYHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.YoYHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.YoYHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.YoYHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.YoYHelperVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.YoYHelperVector_pop(self)

    def append(self, x):
        return _QuantLib.YoYHelperVector_append(self, x)

    def empty(self):
        return _QuantLib.YoYHelperVector_empty(self)

    def size(self):
        return _QuantLib.YoYHelperVector_size(self)

    def swap(self, v):
        return _QuantLib.YoYHelperVector_swap(self, v)

    def begin(self):
        return _QuantLib.YoYHelperVector_begin(self)

    def end(self):
        return _QuantLib.YoYHelperVector_end(self)

    def rbegin(self):
        return _QuantLib.YoYHelperVector_rbegin(self)

    def rend(self):
        return _QuantLib.YoYHelperVector_rend(self)

    def clear(self):
        return _QuantLib.YoYHelperVector_clear(self)

    def get_allocator(self):
        return _QuantLib.YoYHelperVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.YoYHelperVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.YoYHelperVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_YoYHelperVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.YoYHelperVector_push_back(self, x)

    def front(self):
        return _QuantLib.YoYHelperVector_front(self)

    def back(self):
        return _QuantLib.YoYHelperVector_back(self)

    def assign(self, n, x):
        return _QuantLib.YoYHelperVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.YoYHelperVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.YoYHelperVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.YoYHelperVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.YoYHelperVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_YoYHelperVector
    __del__ = lambda self: None
YoYHelperVector_swigregister = _QuantLib.YoYHelperVector_swigregister
YoYHelperVector_swigregister(YoYHelperVector)

class YoYOptionHelperVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, YoYOptionHelperVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, YoYOptionHelperVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.YoYOptionHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.YoYOptionHelperVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.YoYOptionHelperVector___bool__(self)

    def __len__(self):
        return _QuantLib.YoYOptionHelperVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.YoYOptionHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.YoYOptionHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.YoYOptionHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.YoYOptionHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.YoYOptionHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.YoYOptionHelperVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.YoYOptionHelperVector_pop(self)

    def append(self, x):
        return _QuantLib.YoYOptionHelperVector_append(self, x)

    def empty(self):
        return _QuantLib.YoYOptionHelperVector_empty(self)

    def size(self):
        return _QuantLib.YoYOptionHelperVector_size(self)

    def swap(self, v):
        return _QuantLib.YoYOptionHelperVector_swap(self, v)

    def begin(self):
        return _QuantLib.YoYOptionHelperVector_begin(self)

    def end(self):
        return _QuantLib.YoYOptionHelperVector_end(self)

    def rbegin(self):
        return _QuantLib.YoYOptionHelperVector_rbegin(self)

    def rend(self):
        return _QuantLib.YoYOptionHelperVector_rend(self)

    def clear(self):
        return _QuantLib.YoYOptionHelperVector_clear(self)

    def get_allocator(self):
        return _QuantLib.YoYOptionHelperVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.YoYOptionHelperVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.YoYOptionHelperVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_YoYOptionHelperVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.YoYOptionHelperVector_push_back(self, x)

    def front(self):
        return _QuantLib.YoYOptionHelperVector_front(self)

    def back(self):
        return _QuantLib.YoYOptionHelperVector_back(self)

    def assign(self, n, x):
        return _QuantLib.YoYOptionHelperVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.YoYOptionHelperVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.YoYOptionHelperVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.YoYOptionHelperVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.YoYOptionHelperVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_YoYOptionHelperVector
    __del__ = lambda self: None
YoYOptionHelperVector_swigregister = _QuantLib.YoYOptionHelperVector_swigregister
YoYOptionHelperVector_swigregister(YoYOptionHelperVector)

class Quote(Observable):
    __swig_setmethods__ = {}
    for _s in [Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quote, name, value)
    __swig_getmethods__ = {}
    for _s in [Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Quote, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self):
        return _QuantLib.Quote_value(self)

    def isValid(self):
        return _QuantLib.Quote_isValid(self)
    __swig_destroy__ = _QuantLib.delete_Quote
    __del__ = lambda self: None
Quote_swigregister = _QuantLib.Quote_swigregister
Quote_swigregister(Quote)

class QuoteHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_QuoteHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _QuantLib.QuoteHandle___deref__(self)

    def currentLink(self):
        return _QuantLib.QuoteHandle_currentLink(self)

    def __ref__(self):
        return _QuantLib.QuoteHandle___ref__(self)

    def __nonzero__(self):
        return _QuantLib.QuoteHandle___nonzero__(self)

    def __bool__(self):
        return _QuantLib.QuoteHandle___bool__(self)

    def asObservable(self):
        return _QuantLib.QuoteHandle_asObservable(self)
    __swig_destroy__ = _QuantLib.delete_QuoteHandle
    __del__ = lambda self: None

    def value(self):
        return _QuantLib.QuoteHandle_value(self)

    def isValid(self):
        return _QuantLib.QuoteHandle_isValid(self)
QuoteHandle_swigregister = _QuantLib.QuoteHandle_swigregister
QuoteHandle_swigregister(QuoteHandle)

class RelinkableQuoteHandle(QuoteHandle):
    __swig_setmethods__ = {}
    for _s in [QuoteHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelinkableQuoteHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [QuoteHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RelinkableQuoteHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_RelinkableQuoteHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def linkTo(self, arg2):
        return _QuantLib.RelinkableQuoteHandle_linkTo(self, arg2)

    def reset(self):
        return _QuantLib.RelinkableQuoteHandle_reset(self)
    __swig_destroy__ = _QuantLib.delete_RelinkableQuoteHandle
    __del__ = lambda self: None
RelinkableQuoteHandle_swigregister = _QuantLib.RelinkableQuoteHandle_swigregister
RelinkableQuoteHandle_swigregister(RelinkableQuoteHandle)

class RateHelper(Observable):
    __swig_setmethods__ = {}
    for _s in [Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RateHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RateHelper, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def quote(self):
        return _QuantLib.RateHelper_quote(self)

    def latestDate(self):
        return _QuantLib.RateHelper_latestDate(self)

    def earliestDate(self):
        return _QuantLib.RateHelper_earliestDate(self)

    def maturityDate(self):
        return _QuantLib.RateHelper_maturityDate(self)

    def latestRelevantDate(self):
        return _QuantLib.RateHelper_latestRelevantDate(self)

    def pillarDate(self):
        return _QuantLib.RateHelper_pillarDate(self)

    def impliedQuote(self):
        return _QuantLib.RateHelper_impliedQuote(self)

    def quoteError(self):
        return _QuantLib.RateHelper_quoteError(self)
    __swig_destroy__ = _QuantLib.delete_RateHelper
    __del__ = lambda self: None
RateHelper_swigregister = _QuantLib.RateHelper_swigregister
RateHelper_swigregister(RateHelper)

class StochasticProcess(Observable):
    __swig_setmethods__ = {}
    for _s in [Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StochasticProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StochasticProcess, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def size(self):
        return _QuantLib.StochasticProcess_size(self)

    def factors(self):
        return _QuantLib.StochasticProcess_factors(self)

    def initialValues(self):
        return _QuantLib.StochasticProcess_initialValues(self)

    def drift(self, t, x):
        return _QuantLib.StochasticProcess_drift(self, t, x)

    def diffusion(self, t, x):
        return _QuantLib.StochasticProcess_diffusion(self, t, x)

    def expectation(self, t0, x0, dt):
        return _QuantLib.StochasticProcess_expectation(self, t0, x0, dt)

    def stdDeviation(self, t0, x0, dt):
        return _QuantLib.StochasticProcess_stdDeviation(self, t0, x0, dt)

    def covariance(self, t0, x0, dt):
        return _QuantLib.StochasticProcess_covariance(self, t0, x0, dt)

    def evolve(self, t0, x0, dt, dw):
        return _QuantLib.StochasticProcess_evolve(self, t0, x0, dt, dw)
    __swig_destroy__ = _QuantLib.delete_StochasticProcess
    __del__ = lambda self: None
StochasticProcess_swigregister = _QuantLib.StochasticProcess_swigregister
StochasticProcess_swigregister(StochasticProcess)

class StochasticProcessVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StochasticProcessVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StochasticProcessVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.StochasticProcessVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.StochasticProcessVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.StochasticProcessVector___bool__(self)

    def __len__(self):
        return _QuantLib.StochasticProcessVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.StochasticProcessVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.StochasticProcessVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.StochasticProcessVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.StochasticProcessVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.StochasticProcessVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.StochasticProcessVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.StochasticProcessVector_pop(self)

    def append(self, x):
        return _QuantLib.StochasticProcessVector_append(self, x)

    def empty(self):
        return _QuantLib.StochasticProcessVector_empty(self)

    def size(self):
        return _QuantLib.StochasticProcessVector_size(self)

    def swap(self, v):
        return _QuantLib.StochasticProcessVector_swap(self, v)

    def begin(self):
        return _QuantLib.StochasticProcessVector_begin(self)

    def end(self):
        return _QuantLib.StochasticProcessVector_end(self)

    def rbegin(self):
        return _QuantLib.StochasticProcessVector_rbegin(self)

    def rend(self):
        return _QuantLib.StochasticProcessVector_rend(self)

    def clear(self):
        return _QuantLib.StochasticProcessVector_clear(self)

    def get_allocator(self):
        return _QuantLib.StochasticProcessVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.StochasticProcessVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.StochasticProcessVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_StochasticProcessVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.StochasticProcessVector_push_back(self, x)

    def front(self):
        return _QuantLib.StochasticProcessVector_front(self)

    def back(self):
        return _QuantLib.StochasticProcessVector_back(self)

    def assign(self, n, x):
        return _QuantLib.StochasticProcessVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.StochasticProcessVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.StochasticProcessVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.StochasticProcessVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.StochasticProcessVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_StochasticProcessVector
    __del__ = lambda self: None
StochasticProcessVector_swigregister = _QuantLib.StochasticProcessVector_swigregister
StochasticProcessVector_swigregister(StochasticProcessVector)

class CalibrationErrorTuple(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalibrationErrorTuple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalibrationErrorTuple, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3, arg4):
        this = _QuantLib.new_CalibrationErrorTuple(arg2, arg3, arg4)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def first(self):
        return _QuantLib.CalibrationErrorTuple_first(self)

    def second(self):
        return _QuantLib.CalibrationErrorTuple_second(self)

    def third(self):
        return _QuantLib.CalibrationErrorTuple_third(self)
    __swig_destroy__ = _QuantLib.delete_CalibrationErrorTuple
    __del__ = lambda self: None
CalibrationErrorTuple_swigregister = _QuantLib.CalibrationErrorTuple_swigregister
CalibrationErrorTuple_swigregister(CalibrationErrorTuple)

class CalibrationPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalibrationPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalibrationPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_CalibrationPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _QuantLib.CalibrationPair_first_set
    __swig_getmethods__["first"] = _QuantLib.CalibrationPair_first_get
    if _newclass:
        first = _swig_property(_QuantLib.CalibrationPair_first_get, _QuantLib.CalibrationPair_first_set)
    __swig_setmethods__["second"] = _QuantLib.CalibrationPair_second_set
    __swig_getmethods__["second"] = _QuantLib.CalibrationPair_second_get
    if _newclass:
        second = _swig_property(_QuantLib.CalibrationPair_second_get, _QuantLib.CalibrationPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _QuantLib.delete_CalibrationPair
    __del__ = lambda self: None
CalibrationPair_swigregister = _QuantLib.CalibrationPair_swigregister
CalibrationPair_swigregister(CalibrationPair)

class CalibrationSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalibrationSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalibrationSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.CalibrationSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.CalibrationSet___nonzero__(self)

    def __bool__(self):
        return _QuantLib.CalibrationSet___bool__(self)

    def __len__(self):
        return _QuantLib.CalibrationSet___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.CalibrationSet___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.CalibrationSet___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.CalibrationSet___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.CalibrationSet___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.CalibrationSet___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.CalibrationSet___setitem__(self, *args)

    def pop(self):
        return _QuantLib.CalibrationSet_pop(self)

    def append(self, x):
        return _QuantLib.CalibrationSet_append(self, x)

    def empty(self):
        return _QuantLib.CalibrationSet_empty(self)

    def size(self):
        return _QuantLib.CalibrationSet_size(self)

    def swap(self, v):
        return _QuantLib.CalibrationSet_swap(self, v)

    def begin(self):
        return _QuantLib.CalibrationSet_begin(self)

    def end(self):
        return _QuantLib.CalibrationSet_end(self)

    def rbegin(self):
        return _QuantLib.CalibrationSet_rbegin(self)

    def rend(self):
        return _QuantLib.CalibrationSet_rend(self)

    def clear(self):
        return _QuantLib.CalibrationSet_clear(self)

    def get_allocator(self):
        return _QuantLib.CalibrationSet_get_allocator(self)

    def pop_back(self):
        return _QuantLib.CalibrationSet_pop_back(self)

    def erase(self, *args):
        return _QuantLib.CalibrationSet_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_CalibrationSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.CalibrationSet_push_back(self, x)

    def front(self):
        return _QuantLib.CalibrationSet_front(self)

    def back(self):
        return _QuantLib.CalibrationSet_back(self)

    def assign(self, n, x):
        return _QuantLib.CalibrationSet_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.CalibrationSet_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.CalibrationSet_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.CalibrationSet_reserve(self, n)

    def capacity(self):
        return _QuantLib.CalibrationSet_capacity(self)
    __swig_destroy__ = _QuantLib.delete_CalibrationSet
    __del__ = lambda self: None
CalibrationSet_swigregister = _QuantLib.CalibrationSet_swigregister
CalibrationSet_swigregister(CalibrationSet)

class AndreasenHugeVolatilityInterpl(Observable):
    __swig_setmethods__ = {}
    for _s in [Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AndreasenHugeVolatilityInterpl, name, value)
    __swig_getmethods__ = {}
    for _s in [Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AndreasenHugeVolatilityInterpl, name)
    __repr__ = _swig_repr
    PiecewiseConstant = _QuantLib.AndreasenHugeVolatilityInterpl_PiecewiseConstant
    Linear = _QuantLib.AndreasenHugeVolatilityInterpl_Linear
    CubicSpline = _QuantLib.AndreasenHugeVolatilityInterpl_CubicSpline
    Call = _QuantLib.AndreasenHugeVolatilityInterpl_Call
    Put = _QuantLib.AndreasenHugeVolatilityInterpl_Put
    CallPut = _QuantLib.AndreasenHugeVolatilityInterpl_CallPut

    def __init__(self, *args):
        this = _QuantLib.new_AndreasenHugeVolatilityInterpl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def maxDate(self):
        return _QuantLib.AndreasenHugeVolatilityInterpl_maxDate(self)

    def minStrike(self):
        return _QuantLib.AndreasenHugeVolatilityInterpl_minStrike(self)

    def maxStrike(self):
        return _QuantLib.AndreasenHugeVolatilityInterpl_maxStrike(self)

    def fwd(self, t):
        return _QuantLib.AndreasenHugeVolatilityInterpl_fwd(self, t)

    def riskFreeRate(self):
        return _QuantLib.AndreasenHugeVolatilityInterpl_riskFreeRate(self)

    def calibrationError(self):
        return _QuantLib.AndreasenHugeVolatilityInterpl_calibrationError(self)

    def optionPrice(self, t, strike, optionType):
        return _QuantLib.AndreasenHugeVolatilityInterpl_optionPrice(self, t, strike, optionType)

    def localVol(self, t, strike):
        return _QuantLib.AndreasenHugeVolatilityInterpl_localVol(self, t, strike)
    __swig_destroy__ = _QuantLib.delete_AndreasenHugeVolatilityInterpl
    __del__ = lambda self: None
AndreasenHugeVolatilityInterpl_swigregister = _QuantLib.AndreasenHugeVolatilityInterpl_swigregister
AndreasenHugeVolatilityInterpl_swigregister(AndreasenHugeVolatilityInterpl)

class AffineModel(Observable):
    __swig_setmethods__ = {}
    for _s in [Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AffineModel, name, value)
    __swig_getmethods__ = {}
    for _s in [Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AffineModel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def discount(self, t):
        return _QuantLib.AffineModel_discount(self, t)

    def discountBond(self, now, maturity, factors):
        return _QuantLib.AffineModel_discountBond(self, now, maturity, factors)

    def discountBondOption(self, *args):
        return _QuantLib.AffineModel_discountBondOption(self, *args)
    __swig_destroy__ = _QuantLib.delete_AffineModel
    __del__ = lambda self: None
AffineModel_swigregister = _QuantLib.AffineModel_swigregister
AffineModel_swigregister(AffineModel)


def bachelierBlackFormula(optionType, strike, forward, stdDev, discount=1.0):
    return _QuantLib.bachelierBlackFormula(optionType, strike, forward, stdDev, discount)
bachelierBlackFormula = _QuantLib.bachelierBlackFormula

def bachelierBlackFormulaAssetItmProbability(*args):
    return _QuantLib.bachelierBlackFormulaAssetItmProbability(*args)
bachelierBlackFormulaAssetItmProbability = _QuantLib.bachelierBlackFormulaAssetItmProbability

def bachelierBlackFormulaImpliedVol(optionType, strike, forward, tte, bachelierPrice, discount=1.0):
    return _QuantLib.bachelierBlackFormulaImpliedVol(optionType, strike, forward, tte, bachelierPrice, discount)
bachelierBlackFormulaImpliedVol = _QuantLib.bachelierBlackFormulaImpliedVol

def blackFormula(optionType, strike, forward, stdDev, discount=1.0, displacement=0.0):
    return _QuantLib.blackFormula(optionType, strike, forward, stdDev, discount, displacement)
blackFormula = _QuantLib.blackFormula

def blackFormulaAssetItmProbability(*args):
    return _QuantLib.blackFormulaAssetItmProbability(*args)
blackFormulaAssetItmProbability = _QuantLib.blackFormulaAssetItmProbability

def blackFormulaCashItmProbability(*args):
    return _QuantLib.blackFormulaCashItmProbability(*args)
blackFormulaCashItmProbability = _QuantLib.blackFormulaCashItmProbability

def blackFormulaImpliedStdDev(*args):
    return _QuantLib.blackFormulaImpliedStdDev(*args)
blackFormulaImpliedStdDev = _QuantLib.blackFormulaImpliedStdDev

def blackFormulaImpliedStdDevLiRS(*args):
    return _QuantLib.blackFormulaImpliedStdDevLiRS(*args)
blackFormulaImpliedStdDevLiRS = _QuantLib.blackFormulaImpliedStdDevLiRS
class BlackCalculator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackCalculator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlackCalculator, name)
    __repr__ = _swig_repr

    def __init__(self, payoff, forward, stdDev, discount=1.0):
        this = _QuantLib.new_BlackCalculator(payoff, forward, stdDev, discount)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def value(self):
        return _QuantLib.BlackCalculator_value(self)

    def deltaForward(self):
        return _QuantLib.BlackCalculator_deltaForward(self)

    def delta(self, spot):
        return _QuantLib.BlackCalculator_delta(self, spot)

    def elasticityForward(self):
        return _QuantLib.BlackCalculator_elasticityForward(self)

    def elasticity(self, spot):
        return _QuantLib.BlackCalculator_elasticity(self, spot)

    def gammaForward(self):
        return _QuantLib.BlackCalculator_gammaForward(self)

    def gamma(self, spot):
        return _QuantLib.BlackCalculator_gamma(self, spot)

    def theta(self, spot, maturity):
        return _QuantLib.BlackCalculator_theta(self, spot, maturity)

    def thetaPerDay(self, spot, maturity):
        return _QuantLib.BlackCalculator_thetaPerDay(self, spot, maturity)

    def vega(self, maturity):
        return _QuantLib.BlackCalculator_vega(self, maturity)

    def rho(self, maturity):
        return _QuantLib.BlackCalculator_rho(self, maturity)

    def dividendRho(self, maturity):
        return _QuantLib.BlackCalculator_dividendRho(self, maturity)

    def itmCashProbability(self):
        return _QuantLib.BlackCalculator_itmCashProbability(self)

    def itmAssetProbability(self):
        return _QuantLib.BlackCalculator_itmAssetProbability(self)

    def strikeSensitivity(self):
        return _QuantLib.BlackCalculator_strikeSensitivity(self)

    def alpha(self):
        return _QuantLib.BlackCalculator_alpha(self)

    def beta(self):
        return _QuantLib.BlackCalculator_beta(self)
    __swig_destroy__ = _QuantLib.delete_BlackCalculator
    __del__ = lambda self: None
BlackCalculator_swigregister = _QuantLib.BlackCalculator_swigregister
BlackCalculator_swigregister(BlackCalculator)

class BlackDeltaCalculator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackDeltaCalculator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlackDeltaCalculator, name)
    __repr__ = _swig_repr

    def __init__(self, ot, dt, spot, dDiscount, fDiscount, stDev):
        this = _QuantLib.new_BlackDeltaCalculator(ot, dt, spot, dDiscount, fDiscount, stDev)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def deltaFromStrike(self, strike):
        return _QuantLib.BlackDeltaCalculator_deltaFromStrike(self, strike)

    def strikeFromDelta(self, delta):
        return _QuantLib.BlackDeltaCalculator_strikeFromDelta(self, delta)

    def atmStrike(self, atmT):
        return _QuantLib.BlackDeltaCalculator_atmStrike(self, atmT)
    __swig_destroy__ = _QuantLib.delete_BlackDeltaCalculator
    __del__ = lambda self: None
BlackDeltaCalculator_swigregister = _QuantLib.BlackDeltaCalculator_swigregister
BlackDeltaCalculator_swigregister(BlackDeltaCalculator)

class BondFunctions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BondFunctions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BondFunctions, name)
    __repr__ = _swig_repr
    if _newclass:
        startDate = staticmethod(_QuantLib.BondFunctions_startDate)
    else:
        startDate = _QuantLib.BondFunctions_startDate
    if _newclass:
        maturityDate = staticmethod(_QuantLib.BondFunctions_maturityDate)
    else:
        maturityDate = _QuantLib.BondFunctions_maturityDate
    if _newclass:
        isTradable = staticmethod(_QuantLib.BondFunctions_isTradable)
    else:
        isTradable = _QuantLib.BondFunctions_isTradable
    if _newclass:
        previousCashFlowDate = staticmethod(_QuantLib.BondFunctions_previousCashFlowDate)
    else:
        previousCashFlowDate = _QuantLib.BondFunctions_previousCashFlowDate
    if _newclass:
        nextCashFlowDate = staticmethod(_QuantLib.BondFunctions_nextCashFlowDate)
    else:
        nextCashFlowDate = _QuantLib.BondFunctions_nextCashFlowDate
    if _newclass:
        previousCashFlowAmount = staticmethod(_QuantLib.BondFunctions_previousCashFlowAmount)
    else:
        previousCashFlowAmount = _QuantLib.BondFunctions_previousCashFlowAmount
    if _newclass:
        nextCashFlowAmount = staticmethod(_QuantLib.BondFunctions_nextCashFlowAmount)
    else:
        nextCashFlowAmount = _QuantLib.BondFunctions_nextCashFlowAmount
    if _newclass:
        previousCouponRate = staticmethod(_QuantLib.BondFunctions_previousCouponRate)
    else:
        previousCouponRate = _QuantLib.BondFunctions_previousCouponRate
    if _newclass:
        nextCouponRate = staticmethod(_QuantLib.BondFunctions_nextCouponRate)
    else:
        nextCouponRate = _QuantLib.BondFunctions_nextCouponRate
    if _newclass:
        accrualStartDate = staticmethod(_QuantLib.BondFunctions_accrualStartDate)
    else:
        accrualStartDate = _QuantLib.BondFunctions_accrualStartDate
    if _newclass:
        accrualEndDate = staticmethod(_QuantLib.BondFunctions_accrualEndDate)
    else:
        accrualEndDate = _QuantLib.BondFunctions_accrualEndDate
    if _newclass:
        accrualPeriod = staticmethod(_QuantLib.BondFunctions_accrualPeriod)
    else:
        accrualPeriod = _QuantLib.BondFunctions_accrualPeriod
    if _newclass:
        accrualDays = staticmethod(_QuantLib.BondFunctions_accrualDays)
    else:
        accrualDays = _QuantLib.BondFunctions_accrualDays
    if _newclass:
        accruedPeriod = staticmethod(_QuantLib.BondFunctions_accruedPeriod)
    else:
        accruedPeriod = _QuantLib.BondFunctions_accruedPeriod
    if _newclass:
        accruedDays = staticmethod(_QuantLib.BondFunctions_accruedDays)
    else:
        accruedDays = _QuantLib.BondFunctions_accruedDays
    if _newclass:
        accruedAmount = staticmethod(_QuantLib.BondFunctions_accruedAmount)
    else:
        accruedAmount = _QuantLib.BondFunctions_accruedAmount
    if _newclass:
        atmRate = staticmethod(_QuantLib.BondFunctions_atmRate)
    else:
        atmRate = _QuantLib.BondFunctions_atmRate
    if _newclass:
        cleanPrice = staticmethod(_QuantLib.BondFunctions_cleanPrice)
    else:
        cleanPrice = _QuantLib.BondFunctions_cleanPrice
    if _newclass:
        bps = staticmethod(_QuantLib.BondFunctions_bps)
    else:
        bps = _QuantLib.BondFunctions_bps
    if _newclass:
        bondYield = staticmethod(_QuantLib.BondFunctions_bondYield)
    else:
        bondYield = _QuantLib.BondFunctions_bondYield
    if _newclass:
        duration = staticmethod(_QuantLib.BondFunctions_duration)
    else:
        duration = _QuantLib.BondFunctions_duration
    if _newclass:
        convexity = staticmethod(_QuantLib.BondFunctions_convexity)
    else:
        convexity = _QuantLib.BondFunctions_convexity
    if _newclass:
        basisPointValue = staticmethod(_QuantLib.BondFunctions_basisPointValue)
    else:
        basisPointValue = _QuantLib.BondFunctions_basisPointValue
    if _newclass:
        yieldValueBasisPoint = staticmethod(_QuantLib.BondFunctions_yieldValueBasisPoint)
    else:
        yieldValueBasisPoint = _QuantLib.BondFunctions_yieldValueBasisPoint
    if _newclass:
        zSpread = staticmethod(_QuantLib.BondFunctions_zSpread)
    else:
        zSpread = _QuantLib.BondFunctions_zSpread
    if _newclass:
        yieldBisection = staticmethod(_QuantLib.BondFunctions_yieldBisection)
    else:
        yieldBisection = _QuantLib.BondFunctions_yieldBisection
    if _newclass:
        yieldBrent = staticmethod(_QuantLib.BondFunctions_yieldBrent)
    else:
        yieldBrent = _QuantLib.BondFunctions_yieldBrent
    if _newclass:
        yieldFalsePosition = staticmethod(_QuantLib.BondFunctions_yieldFalsePosition)
    else:
        yieldFalsePosition = _QuantLib.BondFunctions_yieldFalsePosition
    if _newclass:
        yieldNewton = staticmethod(_QuantLib.BondFunctions_yieldNewton)
    else:
        yieldNewton = _QuantLib.BondFunctions_yieldNewton
    if _newclass:
        yieldNewtonSafe = staticmethod(_QuantLib.BondFunctions_yieldNewtonSafe)
    else:
        yieldNewtonSafe = _QuantLib.BondFunctions_yieldNewtonSafe
    if _newclass:
        yieldRidder = staticmethod(_QuantLib.BondFunctions_yieldRidder)
    else:
        yieldRidder = _QuantLib.BondFunctions_yieldRidder
    if _newclass:
        yieldSecant = staticmethod(_QuantLib.BondFunctions_yieldSecant)
    else:
        yieldSecant = _QuantLib.BondFunctions_yieldSecant

    def __init__(self):
        this = _QuantLib.new_BondFunctions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BondFunctions
    __del__ = lambda self: None
BondFunctions_swigregister = _QuantLib.BondFunctions_swigregister
BondFunctions_swigregister(BondFunctions)

def BondFunctions_startDate(bond):
    return _QuantLib.BondFunctions_startDate(bond)
BondFunctions_startDate = _QuantLib.BondFunctions_startDate

def BondFunctions_maturityDate(bond):
    return _QuantLib.BondFunctions_maturityDate(bond)
BondFunctions_maturityDate = _QuantLib.BondFunctions_maturityDate

def BondFunctions_isTradable(*args):
    return _QuantLib.BondFunctions_isTradable(*args)
BondFunctions_isTradable = _QuantLib.BondFunctions_isTradable

def BondFunctions_previousCashFlowDate(*args):
    return _QuantLib.BondFunctions_previousCashFlowDate(*args)
BondFunctions_previousCashFlowDate = _QuantLib.BondFunctions_previousCashFlowDate

def BondFunctions_nextCashFlowDate(*args):
    return _QuantLib.BondFunctions_nextCashFlowDate(*args)
BondFunctions_nextCashFlowDate = _QuantLib.BondFunctions_nextCashFlowDate

def BondFunctions_previousCashFlowAmount(*args):
    return _QuantLib.BondFunctions_previousCashFlowAmount(*args)
BondFunctions_previousCashFlowAmount = _QuantLib.BondFunctions_previousCashFlowAmount

def BondFunctions_nextCashFlowAmount(*args):
    return _QuantLib.BondFunctions_nextCashFlowAmount(*args)
BondFunctions_nextCashFlowAmount = _QuantLib.BondFunctions_nextCashFlowAmount

def BondFunctions_previousCouponRate(*args):
    return _QuantLib.BondFunctions_previousCouponRate(*args)
BondFunctions_previousCouponRate = _QuantLib.BondFunctions_previousCouponRate

def BondFunctions_nextCouponRate(*args):
    return _QuantLib.BondFunctions_nextCouponRate(*args)
BondFunctions_nextCouponRate = _QuantLib.BondFunctions_nextCouponRate

def BondFunctions_accrualStartDate(*args):
    return _QuantLib.BondFunctions_accrualStartDate(*args)
BondFunctions_accrualStartDate = _QuantLib.BondFunctions_accrualStartDate

def BondFunctions_accrualEndDate(*args):
    return _QuantLib.BondFunctions_accrualEndDate(*args)
BondFunctions_accrualEndDate = _QuantLib.BondFunctions_accrualEndDate

def BondFunctions_accrualPeriod(*args):
    return _QuantLib.BondFunctions_accrualPeriod(*args)
BondFunctions_accrualPeriod = _QuantLib.BondFunctions_accrualPeriod

def BondFunctions_accrualDays(*args):
    return _QuantLib.BondFunctions_accrualDays(*args)
BondFunctions_accrualDays = _QuantLib.BondFunctions_accrualDays

def BondFunctions_accruedPeriod(*args):
    return _QuantLib.BondFunctions_accruedPeriod(*args)
BondFunctions_accruedPeriod = _QuantLib.BondFunctions_accruedPeriod

def BondFunctions_accruedDays(*args):
    return _QuantLib.BondFunctions_accruedDays(*args)
BondFunctions_accruedDays = _QuantLib.BondFunctions_accruedDays

def BondFunctions_accruedAmount(*args):
    return _QuantLib.BondFunctions_accruedAmount(*args)
BondFunctions_accruedAmount = _QuantLib.BondFunctions_accruedAmount

def BondFunctions_atmRate(*args):
    return _QuantLib.BondFunctions_atmRate(*args)
BondFunctions_atmRate = _QuantLib.BondFunctions_atmRate

def BondFunctions_cleanPrice(*args):
    return _QuantLib.BondFunctions_cleanPrice(*args)
BondFunctions_cleanPrice = _QuantLib.BondFunctions_cleanPrice

def BondFunctions_bps(*args):
    return _QuantLib.BondFunctions_bps(*args)
BondFunctions_bps = _QuantLib.BondFunctions_bps

def BondFunctions_bondYield(*args):
    return _QuantLib.BondFunctions_bondYield(*args)
BondFunctions_bondYield = _QuantLib.BondFunctions_bondYield

def BondFunctions_duration(*args):
    return _QuantLib.BondFunctions_duration(*args)
BondFunctions_duration = _QuantLib.BondFunctions_duration

def BondFunctions_convexity(*args):
    return _QuantLib.BondFunctions_convexity(*args)
BondFunctions_convexity = _QuantLib.BondFunctions_convexity

def BondFunctions_basisPointValue(*args):
    return _QuantLib.BondFunctions_basisPointValue(*args)
BondFunctions_basisPointValue = _QuantLib.BondFunctions_basisPointValue

def BondFunctions_yieldValueBasisPoint(*args):
    return _QuantLib.BondFunctions_yieldValueBasisPoint(*args)
BondFunctions_yieldValueBasisPoint = _QuantLib.BondFunctions_yieldValueBasisPoint

def BondFunctions_zSpread(*args):
    return _QuantLib.BondFunctions_zSpread(*args)
BondFunctions_zSpread = _QuantLib.BondFunctions_zSpread

def BondFunctions_yieldBisection(*args):
    return _QuantLib.BondFunctions_yieldBisection(*args)
BondFunctions_yieldBisection = _QuantLib.BondFunctions_yieldBisection

def BondFunctions_yieldBrent(*args):
    return _QuantLib.BondFunctions_yieldBrent(*args)
BondFunctions_yieldBrent = _QuantLib.BondFunctions_yieldBrent

def BondFunctions_yieldFalsePosition(*args):
    return _QuantLib.BondFunctions_yieldFalsePosition(*args)
BondFunctions_yieldFalsePosition = _QuantLib.BondFunctions_yieldFalsePosition

def BondFunctions_yieldNewton(*args):
    return _QuantLib.BondFunctions_yieldNewton(*args)
BondFunctions_yieldNewton = _QuantLib.BondFunctions_yieldNewton

def BondFunctions_yieldNewtonSafe(*args):
    return _QuantLib.BondFunctions_yieldNewtonSafe(*args)
BondFunctions_yieldNewtonSafe = _QuantLib.BondFunctions_yieldNewtonSafe

def BondFunctions_yieldRidder(*args):
    return _QuantLib.BondFunctions_yieldRidder(*args)
BondFunctions_yieldRidder = _QuantLib.BondFunctions_yieldRidder

def BondFunctions_yieldSecant(*args):
    return _QuantLib.BondFunctions_yieldSecant(*args)
BondFunctions_yieldSecant = _QuantLib.BondFunctions_yieldSecant

class ZeroCouponInflationSwapHelper(ZeroHelper):
    __swig_setmethods__ = {}
    for _s in [ZeroHelper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZeroCouponInflationSwapHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [ZeroHelper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZeroCouponInflationSwapHelper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ZeroCouponInflationSwapHelper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ZeroCouponInflationSwapHelper
    __del__ = lambda self: None
ZeroCouponInflationSwapHelper_swigregister = _QuantLib.ZeroCouponInflationSwapHelper_swigregister
ZeroCouponInflationSwapHelper_swigregister(ZeroCouponInflationSwapHelper)

class YearOnYearInflationSwapHelper(YoYHelper):
    __swig_setmethods__ = {}
    for _s in [YoYHelper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YearOnYearInflationSwapHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [YoYHelper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YearOnYearInflationSwapHelper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_YearOnYearInflationSwapHelper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_YearOnYearInflationSwapHelper
    __del__ = lambda self: None
YearOnYearInflationSwapHelper_swigregister = _QuantLib.YearOnYearInflationSwapHelper_swigregister
YearOnYearInflationSwapHelper_swigregister(YearOnYearInflationSwapHelper)

class YoYOptionletHelper(YoYOptionHelper):
    __swig_setmethods__ = {}
    for _s in [YoYOptionHelper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YoYOptionletHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [YoYOptionHelper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YoYOptionletHelper, name)
    __repr__ = _swig_repr

    def __init__(self, price, notional, capFloorType, lag, yoyDayCounter, paymentCalendar, fixingDays, index, strike, n, pricer):
        this = _QuantLib.new_YoYOptionletHelper(price, notional, capFloorType, lag, yoyDayCounter, paymentCalendar, fixingDays, index, strike, n, pricer)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_YoYOptionletHelper
    __del__ = lambda self: None
YoYOptionletHelper_swigregister = _QuantLib.YoYOptionletHelper_swigregister
YoYOptionletHelper_swigregister(YoYOptionletHelper)

class Calendar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Calendar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Calendar, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isWeekend(self, w):
        return _QuantLib.Calendar_isWeekend(self, w)

    def endOfMonth(self, arg2):
        return _QuantLib.Calendar_endOfMonth(self, arg2)

    def isBusinessDay(self, arg2):
        return _QuantLib.Calendar_isBusinessDay(self, arg2)

    def isHoliday(self, arg2):
        return _QuantLib.Calendar_isHoliday(self, arg2)

    def isEndOfMonth(self, arg2):
        return _QuantLib.Calendar_isEndOfMonth(self, arg2)

    def addHoliday(self, arg2):
        return _QuantLib.Calendar_addHoliday(self, arg2)

    def removeHoliday(self, arg2):
        return _QuantLib.Calendar_removeHoliday(self, arg2)

    def adjust(self, *args):
        return _QuantLib.Calendar_adjust(self, *args)

    def advance(self, *args):
        return _QuantLib.Calendar_advance(self, *args)

    def businessDaysBetween(self, arg2, to, includeFirst=True, includeLast=False):
        return _QuantLib.Calendar_businessDaysBetween(self, arg2, to, includeFirst, includeLast)

    def holidayList(self, arg2, to, includeWeekEnds=False):
        return _QuantLib.Calendar_holidayList(self, arg2, to, includeWeekEnds)

    def businessDayList(self, arg2, to):
        return _QuantLib.Calendar_businessDayList(self, arg2, to)

    def name(self):
        return _QuantLib.Calendar_name(self)

    def __str__(self):
        return _QuantLib.Calendar___str__(self)

    def __eq__(self, other):
        return _QuantLib.Calendar___eq__(self, other)

    def __ne__(self, other):
        return _QuantLib.Calendar___ne__(self, other)

    def __hash__(self):
        return hash(self.name())

    __swig_destroy__ = _QuantLib.delete_Calendar
    __del__ = lambda self: None
Calendar_swigregister = _QuantLib.Calendar_swigregister
Calendar_swigregister(Calendar)

class Argentina(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Argentina, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Argentina, name)
    __repr__ = _swig_repr
    Merval = _QuantLib.Argentina_Merval

    def __init__(self, *args):
        this = _QuantLib.new_Argentina(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Argentina
    __del__ = lambda self: None
Argentina_swigregister = _QuantLib.Argentina_swigregister
Argentina_swigregister(Argentina)

class Australia(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Australia, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Australia, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_Australia()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Australia
    __del__ = lambda self: None
Australia_swigregister = _QuantLib.Australia_swigregister
Australia_swigregister(Australia)

class Brazil(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Brazil, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Brazil, name)
    __repr__ = _swig_repr
    Settlement = _QuantLib.Brazil_Settlement
    Exchange = _QuantLib.Brazil_Exchange

    def __init__(self, *args):
        this = _QuantLib.new_Brazil(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Brazil
    __del__ = lambda self: None
Brazil_swigregister = _QuantLib.Brazil_swigregister
Brazil_swigregister(Brazil)

class Canada(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Canada, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Canada, name)
    __repr__ = _swig_repr
    Settlement = _QuantLib.Canada_Settlement
    TSX = _QuantLib.Canada_TSX

    def __init__(self, *args):
        this = _QuantLib.new_Canada(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Canada
    __del__ = lambda self: None
Canada_swigregister = _QuantLib.Canada_swigregister
Canada_swigregister(Canada)

class China(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, China, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, China, name)
    __repr__ = _swig_repr
    SSE = _QuantLib.China_SSE
    IB = _QuantLib.China_IB

    def __init__(self, *args):
        this = _QuantLib.new_China(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_China
    __del__ = lambda self: None
China_swigregister = _QuantLib.China_swigregister
China_swigregister(China)

class CzechRepublic(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CzechRepublic, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CzechRepublic, name)
    __repr__ = _swig_repr
    PSE = _QuantLib.CzechRepublic_PSE

    def __init__(self, *args):
        this = _QuantLib.new_CzechRepublic(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CzechRepublic
    __del__ = lambda self: None
CzechRepublic_swigregister = _QuantLib.CzechRepublic_swigregister
CzechRepublic_swigregister(CzechRepublic)

class Denmark(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Denmark, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Denmark, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_Denmark()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Denmark
    __del__ = lambda self: None
Denmark_swigregister = _QuantLib.Denmark_swigregister
Denmark_swigregister(Denmark)

class Finland(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Finland, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Finland, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_Finland()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Finland
    __del__ = lambda self: None
Finland_swigregister = _QuantLib.Finland_swigregister
Finland_swigregister(Finland)

class France(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, France, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, France, name)
    __repr__ = _swig_repr
    Settlement = _QuantLib.France_Settlement
    Exchange = _QuantLib.France_Exchange

    def __init__(self, *args):
        this = _QuantLib.new_France(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_France
    __del__ = lambda self: None
France_swigregister = _QuantLib.France_swigregister
France_swigregister(France)

class Germany(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Germany, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Germany, name)
    __repr__ = _swig_repr
    Settlement = _QuantLib.Germany_Settlement
    FrankfurtStockExchange = _QuantLib.Germany_FrankfurtStockExchange
    Xetra = _QuantLib.Germany_Xetra
    Eurex = _QuantLib.Germany_Eurex

    def __init__(self, *args):
        this = _QuantLib.new_Germany(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Germany
    __del__ = lambda self: None
Germany_swigregister = _QuantLib.Germany_swigregister
Germany_swigregister(Germany)

class HongKong(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HongKong, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HongKong, name)
    __repr__ = _swig_repr
    HKEx = _QuantLib.HongKong_HKEx

    def __init__(self, *args):
        this = _QuantLib.new_HongKong(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_HongKong
    __del__ = lambda self: None
HongKong_swigregister = _QuantLib.HongKong_swigregister
HongKong_swigregister(HongKong)

class Hungary(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hungary, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Hungary, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_Hungary()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Hungary
    __del__ = lambda self: None
Hungary_swigregister = _QuantLib.Hungary_swigregister
Hungary_swigregister(Hungary)

class Iceland(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Iceland, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Iceland, name)
    __repr__ = _swig_repr
    ICEX = _QuantLib.Iceland_ICEX

    def __init__(self, *args):
        this = _QuantLib.new_Iceland(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Iceland
    __del__ = lambda self: None
Iceland_swigregister = _QuantLib.Iceland_swigregister
Iceland_swigregister(Iceland)

class India(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, India, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, India, name)
    __repr__ = _swig_repr
    NSE = _QuantLib.India_NSE

    def __init__(self, *args):
        this = _QuantLib.new_India(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_India
    __del__ = lambda self: None
India_swigregister = _QuantLib.India_swigregister
India_swigregister(India)

class Indonesia(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Indonesia, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Indonesia, name)
    __repr__ = _swig_repr
    BEJ = _QuantLib.Indonesia_BEJ
    JSX = _QuantLib.Indonesia_JSX

    def __init__(self, *args):
        this = _QuantLib.new_Indonesia(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Indonesia
    __del__ = lambda self: None
Indonesia_swigregister = _QuantLib.Indonesia_swigregister
Indonesia_swigregister(Indonesia)

class Israel(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Israel, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Israel, name)
    __repr__ = _swig_repr
    Settlement = _QuantLib.Israel_Settlement
    TASE = _QuantLib.Israel_TASE

    def __init__(self, *args):
        this = _QuantLib.new_Israel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Israel
    __del__ = lambda self: None
Israel_swigregister = _QuantLib.Israel_swigregister
Israel_swigregister(Israel)

class Italy(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Italy, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Italy, name)
    __repr__ = _swig_repr
    Settlement = _QuantLib.Italy_Settlement
    Exchange = _QuantLib.Italy_Exchange

    def __init__(self, *args):
        this = _QuantLib.new_Italy(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Italy
    __del__ = lambda self: None
Italy_swigregister = _QuantLib.Italy_swigregister
Italy_swigregister(Italy)

class Japan(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Japan, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Japan, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_Japan()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Japan
    __del__ = lambda self: None
Japan_swigregister = _QuantLib.Japan_swigregister
Japan_swigregister(Japan)

class Mexico(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mexico, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Mexico, name)
    __repr__ = _swig_repr
    BMV = _QuantLib.Mexico_BMV

    def __init__(self, *args):
        this = _QuantLib.new_Mexico(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Mexico
    __del__ = lambda self: None
Mexico_swigregister = _QuantLib.Mexico_swigregister
Mexico_swigregister(Mexico)

class NewZealand(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NewZealand, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NewZealand, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_NewZealand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_NewZealand
    __del__ = lambda self: None
NewZealand_swigregister = _QuantLib.NewZealand_swigregister
NewZealand_swigregister(NewZealand)

class Norway(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Norway, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Norway, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_Norway()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Norway
    __del__ = lambda self: None
Norway_swigregister = _QuantLib.Norway_swigregister
Norway_swigregister(Norway)

class Poland(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Poland, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Poland, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_Poland()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Poland
    __del__ = lambda self: None
Poland_swigregister = _QuantLib.Poland_swigregister
Poland_swigregister(Poland)

class Russia(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Russia, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Russia, name)
    __repr__ = _swig_repr
    Settlement = _QuantLib.Russia_Settlement
    MOEX = _QuantLib.Russia_MOEX

    def __init__(self, *args):
        this = _QuantLib.new_Russia(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Russia
    __del__ = lambda self: None
Russia_swigregister = _QuantLib.Russia_swigregister
Russia_swigregister(Russia)

class Romania(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Romania, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Romania, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_Romania()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Romania
    __del__ = lambda self: None
Romania_swigregister = _QuantLib.Romania_swigregister
Romania_swigregister(Romania)

class SaudiArabia(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SaudiArabia, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SaudiArabia, name)
    __repr__ = _swig_repr
    Tadawul = _QuantLib.SaudiArabia_Tadawul

    def __init__(self, *args):
        this = _QuantLib.new_SaudiArabia(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SaudiArabia
    __del__ = lambda self: None
SaudiArabia_swigregister = _QuantLib.SaudiArabia_swigregister
SaudiArabia_swigregister(SaudiArabia)

class Singapore(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Singapore, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Singapore, name)
    __repr__ = _swig_repr
    SGX = _QuantLib.Singapore_SGX

    def __init__(self, *args):
        this = _QuantLib.new_Singapore(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Singapore
    __del__ = lambda self: None
Singapore_swigregister = _QuantLib.Singapore_swigregister
Singapore_swigregister(Singapore)

class Slovakia(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Slovakia, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Slovakia, name)
    __repr__ = _swig_repr
    BSSE = _QuantLib.Slovakia_BSSE

    def __init__(self, *args):
        this = _QuantLib.new_Slovakia(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Slovakia
    __del__ = lambda self: None
Slovakia_swigregister = _QuantLib.Slovakia_swigregister
Slovakia_swigregister(Slovakia)

class SouthAfrica(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SouthAfrica, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SouthAfrica, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_SouthAfrica()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SouthAfrica
    __del__ = lambda self: None
SouthAfrica_swigregister = _QuantLib.SouthAfrica_swigregister
SouthAfrica_swigregister(SouthAfrica)

class SouthKorea(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SouthKorea, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SouthKorea, name)
    __repr__ = _swig_repr
    Settlement = _QuantLib.SouthKorea_Settlement
    KRX = _QuantLib.SouthKorea_KRX

    def __init__(self, *args):
        this = _QuantLib.new_SouthKorea(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SouthKorea
    __del__ = lambda self: None
SouthKorea_swigregister = _QuantLib.SouthKorea_swigregister
SouthKorea_swigregister(SouthKorea)

class Sweden(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sweden, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sweden, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_Sweden()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Sweden
    __del__ = lambda self: None
Sweden_swigregister = _QuantLib.Sweden_swigregister
Sweden_swigregister(Sweden)

class Switzerland(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Switzerland, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Switzerland, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_Switzerland()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Switzerland
    __del__ = lambda self: None
Switzerland_swigregister = _QuantLib.Switzerland_swigregister
Switzerland_swigregister(Switzerland)

class Taiwan(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Taiwan, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Taiwan, name)
    __repr__ = _swig_repr
    TSEC = _QuantLib.Taiwan_TSEC

    def __init__(self, *args):
        this = _QuantLib.new_Taiwan(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Taiwan
    __del__ = lambda self: None
Taiwan_swigregister = _QuantLib.Taiwan_swigregister
Taiwan_swigregister(Taiwan)

class TARGET(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TARGET, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TARGET, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_TARGET()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_TARGET
    __del__ = lambda self: None
TARGET_swigregister = _QuantLib.TARGET_swigregister
TARGET_swigregister(TARGET)

class Thailand(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Thailand, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Thailand, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_Thailand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Thailand
    __del__ = lambda self: None
Thailand_swigregister = _QuantLib.Thailand_swigregister
Thailand_swigregister(Thailand)

class Turkey(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Turkey, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Turkey, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_Turkey()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Turkey
    __del__ = lambda self: None
Turkey_swigregister = _QuantLib.Turkey_swigregister
Turkey_swigregister(Turkey)

class Ukraine(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ukraine, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ukraine, name)
    __repr__ = _swig_repr
    USE = _QuantLib.Ukraine_USE

    def __init__(self, *args):
        this = _QuantLib.new_Ukraine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Ukraine
    __del__ = lambda self: None
Ukraine_swigregister = _QuantLib.Ukraine_swigregister
Ukraine_swigregister(Ukraine)

class UnitedKingdom(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitedKingdom, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnitedKingdom, name)
    __repr__ = _swig_repr
    Settlement = _QuantLib.UnitedKingdom_Settlement
    Exchange = _QuantLib.UnitedKingdom_Exchange
    Metals = _QuantLib.UnitedKingdom_Metals

    def __init__(self, *args):
        this = _QuantLib.new_UnitedKingdom(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_UnitedKingdom
    __del__ = lambda self: None
UnitedKingdom_swigregister = _QuantLib.UnitedKingdom_swigregister
UnitedKingdom_swigregister(UnitedKingdom)

class UnitedStates(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitedStates, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnitedStates, name)
    __repr__ = _swig_repr
    Settlement = _QuantLib.UnitedStates_Settlement
    NYSE = _QuantLib.UnitedStates_NYSE
    GovernmentBond = _QuantLib.UnitedStates_GovernmentBond
    NERC = _QuantLib.UnitedStates_NERC
    LiborImpact = _QuantLib.UnitedStates_LiborImpact
    FederalReserve = _QuantLib.UnitedStates_FederalReserve

    def __init__(self, *args):
        this = _QuantLib.new_UnitedStates(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_UnitedStates
    __del__ = lambda self: None
UnitedStates_swigregister = _QuantLib.UnitedStates_swigregister
UnitedStates_swigregister(UnitedStates)

class NullCalendar(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NullCalendar, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NullCalendar, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_NullCalendar()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_NullCalendar
    __del__ = lambda self: None
NullCalendar_swigregister = _QuantLib.NullCalendar_swigregister
NullCalendar_swigregister(NullCalendar)

class WeekendsOnly(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeekendsOnly, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WeekendsOnly, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_WeekendsOnly()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_WeekendsOnly
    __del__ = lambda self: None
WeekendsOnly_swigregister = _QuantLib.WeekendsOnly_swigregister
WeekendsOnly_swigregister(WeekendsOnly)

class JointCalendar(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JointCalendar, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JointCalendar, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_JointCalendar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_JointCalendar
    __del__ = lambda self: None
JointCalendar_swigregister = _QuantLib.JointCalendar_swigregister
JointCalendar_swigregister(JointCalendar)

class BespokeCalendar(Calendar):
    __swig_setmethods__ = {}
    for _s in [Calendar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BespokeCalendar, name, value)
    __swig_getmethods__ = {}
    for _s in [Calendar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BespokeCalendar, name)
    __repr__ = _swig_repr

    def __init__(self, name):
        this = _QuantLib.new_BespokeCalendar(name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addWeekend(self, arg2):
        return _QuantLib.BespokeCalendar_addWeekend(self, arg2)
    __swig_destroy__ = _QuantLib.delete_BespokeCalendar
    __del__ = lambda self: None
BespokeCalendar_swigregister = _QuantLib.BespokeCalendar_swigregister
BespokeCalendar_swigregister(BespokeCalendar)

class HestonModel(CalibratedModel):
    __swig_setmethods__ = {}
    for _s in [CalibratedModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HestonModel, name, value)
    __swig_getmethods__ = {}
    for _s in [CalibratedModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HestonModel, name)
    __repr__ = _swig_repr

    def __init__(self, process):
        this = _QuantLib.new_HestonModel(process)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def theta(self):
        return _QuantLib.HestonModel_theta(self)

    def kappa(self):
        return _QuantLib.HestonModel_kappa(self)

    def sigma(self):
        return _QuantLib.HestonModel_sigma(self)

    def rho(self):
        return _QuantLib.HestonModel_rho(self)

    def v0(self):
        return _QuantLib.HestonModel_v0(self)

    def process(self):
        return _QuantLib.HestonModel_process(self)
    __swig_destroy__ = _QuantLib.delete_HestonModel
    __del__ = lambda self: None
HestonModel_swigregister = _QuantLib.HestonModel_swigregister
HestonModel_swigregister(HestonModel)

class HestonModelHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HestonModelHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HestonModelHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_HestonModelHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _QuantLib.HestonModelHandle___deref__(self)

    def currentLink(self):
        return _QuantLib.HestonModelHandle_currentLink(self)

    def __ref__(self):
        return _QuantLib.HestonModelHandle___ref__(self)

    def __nonzero__(self):
        return _QuantLib.HestonModelHandle___nonzero__(self)

    def __bool__(self):
        return _QuantLib.HestonModelHandle___bool__(self)

    def asObservable(self):
        return _QuantLib.HestonModelHandle_asObservable(self)
    __swig_destroy__ = _QuantLib.delete_HestonModelHandle
    __del__ = lambda self: None

    def theta(self):
        return _QuantLib.HestonModelHandle_theta(self)

    def kappa(self):
        return _QuantLib.HestonModelHandle_kappa(self)

    def sigma(self):
        return _QuantLib.HestonModelHandle_sigma(self)

    def rho(self):
        return _QuantLib.HestonModelHandle_rho(self)

    def v0(self):
        return _QuantLib.HestonModelHandle_v0(self)

    def process(self):
        return _QuantLib.HestonModelHandle_process(self)

    def params(self):
        return _QuantLib.HestonModelHandle_params(self)

    def setParams(self, params):
        return _QuantLib.HestonModelHandle_setParams(self, params)

    def calibrate(self, *args):
        return _QuantLib.HestonModelHandle_calibrate(self, *args)

    def value(self, params, helpers):
        return _QuantLib.HestonModelHandle_value(self, params, helpers)

    def constraint(self):
        return _QuantLib.HestonModelHandle_constraint(self)

    def endCriteria(self):
        return _QuantLib.HestonModelHandle_endCriteria(self)

    def problemValues(self):
        return _QuantLib.HestonModelHandle_problemValues(self)

    def functionEvaluation(self):
        return _QuantLib.HestonModelHandle_functionEvaluation(self)
HestonModelHandle_swigregister = _QuantLib.HestonModelHandle_swigregister
HestonModelHandle_swigregister(HestonModelHandle)

class ShortRateModel(CalibratedModel):
    __swig_setmethods__ = {}
    for _s in [CalibratedModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortRateModel, name, value)
    __swig_getmethods__ = {}
    for _s in [CalibratedModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShortRateModel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _QuantLib.delete_ShortRateModel
    __del__ = lambda self: None
ShortRateModel_swigregister = _QuantLib.ShortRateModel_swigregister
ShortRateModel_swigregister(ShortRateModel)

class ShortRateModelHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortRateModelHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShortRateModelHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ShortRateModelHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _QuantLib.ShortRateModelHandle___deref__(self)

    def currentLink(self):
        return _QuantLib.ShortRateModelHandle_currentLink(self)

    def __ref__(self):
        return _QuantLib.ShortRateModelHandle___ref__(self)

    def __nonzero__(self):
        return _QuantLib.ShortRateModelHandle___nonzero__(self)

    def __bool__(self):
        return _QuantLib.ShortRateModelHandle___bool__(self)

    def asObservable(self):
        return _QuantLib.ShortRateModelHandle_asObservable(self)
    __swig_destroy__ = _QuantLib.delete_ShortRateModelHandle
    __del__ = lambda self: None

    def params(self):
        return _QuantLib.ShortRateModelHandle_params(self)

    def setParams(self, params):
        return _QuantLib.ShortRateModelHandle_setParams(self, params)

    def calibrate(self, *args):
        return _QuantLib.ShortRateModelHandle_calibrate(self, *args)

    def value(self, params, helpers):
        return _QuantLib.ShortRateModelHandle_value(self, params, helpers)

    def constraint(self):
        return _QuantLib.ShortRateModelHandle_constraint(self)

    def endCriteria(self):
        return _QuantLib.ShortRateModelHandle_endCriteria(self)

    def problemValues(self):
        return _QuantLib.ShortRateModelHandle_problemValues(self)

    def functionEvaluation(self):
        return _QuantLib.ShortRateModelHandle_functionEvaluation(self)
ShortRateModelHandle_swigregister = _QuantLib.ShortRateModelHandle_swigregister
ShortRateModelHandle_swigregister(ShortRateModelHandle)

class RelinkableShortRateModelHandle(ShortRateModelHandle):
    __swig_setmethods__ = {}
    for _s in [ShortRateModelHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelinkableShortRateModelHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [ShortRateModelHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RelinkableShortRateModelHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_RelinkableShortRateModelHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def linkTo(self, arg2):
        return _QuantLib.RelinkableShortRateModelHandle_linkTo(self, arg2)

    def reset(self):
        return _QuantLib.RelinkableShortRateModelHandle_reset(self)
    __swig_destroy__ = _QuantLib.delete_RelinkableShortRateModelHandle
    __del__ = lambda self: None
RelinkableShortRateModelHandle_swigregister = _QuantLib.RelinkableShortRateModelHandle_swigregister
RelinkableShortRateModelHandle_swigregister(RelinkableShortRateModelHandle)

class BatesModel(HestonModel):
    __swig_setmethods__ = {}
    for _s in [HestonModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BatesModel, name, value)
    __swig_getmethods__ = {}
    for _s in [HestonModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BatesModel, name)
    __repr__ = _swig_repr

    def __init__(self, process):
        this = _QuantLib.new_BatesModel(process)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nu(self):
        return _QuantLib.BatesModel_nu(self)

    def delta(self):
        return _QuantLib.BatesModel_delta(self)

    def lambdaParameter(self):
        return _QuantLib.BatesModel_lambdaParameter(self)
    __swig_destroy__ = _QuantLib.delete_BatesModel
    __del__ = lambda self: None
BatesModel_swigregister = _QuantLib.BatesModel_swigregister
BatesModel_swigregister(BatesModel)

class BatesDoubleExpModel(HestonModel):
    __swig_setmethods__ = {}
    for _s in [HestonModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BatesDoubleExpModel, name, value)
    __swig_getmethods__ = {}
    for _s in [HestonModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BatesDoubleExpModel, name)
    __repr__ = _swig_repr

    def __init__(self, process, lamda=0.1, nuUp=0.1, nuDown=0.1, p=0.5):
        this = _QuantLib.new_BatesDoubleExpModel(process, lamda, nuUp, nuDown, p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def p(self):
        return _QuantLib.BatesDoubleExpModel_p(self)

    def nuDown(self):
        return _QuantLib.BatesDoubleExpModel_nuDown(self)

    def nuUp(self):
        return _QuantLib.BatesDoubleExpModel_nuUp(self)

    def lambdaParameter(self):
        return _QuantLib.BatesDoubleExpModel_lambdaParameter(self)
    __swig_destroy__ = _QuantLib.delete_BatesDoubleExpModel
    __del__ = lambda self: None
BatesDoubleExpModel_swigregister = _QuantLib.BatesDoubleExpModel_swigregister
BatesDoubleExpModel_swigregister(BatesDoubleExpModel)

class BatesDetJumpModel(BatesModel):
    __swig_setmethods__ = {}
    for _s in [BatesModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BatesDetJumpModel, name, value)
    __swig_getmethods__ = {}
    for _s in [BatesModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BatesDetJumpModel, name)
    __repr__ = _swig_repr

    def __init__(self, process, kappaLambda=1.0, thetaLambda=0.1):
        this = _QuantLib.new_BatesDetJumpModel(process, kappaLambda, thetaLambda)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def kappaLambda(self):
        return _QuantLib.BatesDetJumpModel_kappaLambda(self)

    def thetaLambda(self):
        return _QuantLib.BatesDetJumpModel_thetaLambda(self)
    __swig_destroy__ = _QuantLib.delete_BatesDetJumpModel
    __del__ = lambda self: None
BatesDetJumpModel_swigregister = _QuantLib.BatesDetJumpModel_swigregister
BatesDetJumpModel_swigregister(BatesDetJumpModel)

class BatesDoubleExpDetJumpModel(BatesDoubleExpModel):
    __swig_setmethods__ = {}
    for _s in [BatesDoubleExpModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BatesDoubleExpDetJumpModel, name, value)
    __swig_getmethods__ = {}
    for _s in [BatesDoubleExpModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BatesDoubleExpDetJumpModel, name)
    __repr__ = _swig_repr

    def __init__(self, process, lamda=0.1, nuUp=0.1, nuDown=0.1, p=0.5, kappaLambda=1.0, thetaLambda=0.1):
        this = _QuantLib.new_BatesDoubleExpDetJumpModel(process, lamda, nuUp, nuDown, p, kappaLambda, thetaLambda)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def kappaLambda(self):
        return _QuantLib.BatesDoubleExpDetJumpModel_kappaLambda(self)

    def thetaLambda(self):
        return _QuantLib.BatesDoubleExpDetJumpModel_thetaLambda(self)
    __swig_destroy__ = _QuantLib.delete_BatesDoubleExpDetJumpModel
    __del__ = lambda self: None
BatesDoubleExpDetJumpModel_swigregister = _QuantLib.BatesDoubleExpDetJumpModel_swigregister
BatesDoubleExpDetJumpModel_swigregister(BatesDoubleExpDetJumpModel)

class GJRGARCHModel(CalibratedModel):
    __swig_setmethods__ = {}
    for _s in [CalibratedModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GJRGARCHModel, name, value)
    __swig_getmethods__ = {}
    for _s in [CalibratedModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GJRGARCHModel, name)
    __repr__ = _swig_repr

    def __init__(self, process):
        this = _QuantLib.new_GJRGARCHModel(process)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def omega(self):
        return _QuantLib.GJRGARCHModel_omega(self)

    def alpha(self):
        return _QuantLib.GJRGARCHModel_alpha(self)

    def beta(self):
        return _QuantLib.GJRGARCHModel_beta(self)

    def gamma(self):
        return _QuantLib.GJRGARCHModel_gamma(self)

    def lambdaParameter(self):
        return _QuantLib.GJRGARCHModel_lambdaParameter(self)

    def v0(self):
        return _QuantLib.GJRGARCHModel_v0(self)
    __swig_destroy__ = _QuantLib.delete_GJRGARCHModel
    __del__ = lambda self: None
GJRGARCHModel_swigregister = _QuantLib.GJRGARCHModel_swigregister
GJRGARCHModel_swigregister(GJRGARCHModel)

class PiecewiseTimeDependentHestonModel(CalibratedModel):
    __swig_setmethods__ = {}
    for _s in [CalibratedModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseTimeDependentHestonModel, name, value)
    __swig_getmethods__ = {}
    for _s in [CalibratedModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseTimeDependentHestonModel, name)
    __repr__ = _swig_repr

    def __init__(self, riskFreeRate, dividendYield, s0, v0, theta, kappa, sigma, rho, timeGrid):
        this = _QuantLib.new_PiecewiseTimeDependentHestonModel(riskFreeRate, dividendYield, s0, v0, theta, kappa, sigma, rho, timeGrid)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def theta(self, t):
        return _QuantLib.PiecewiseTimeDependentHestonModel_theta(self, t)

    def kappa(self, t):
        return _QuantLib.PiecewiseTimeDependentHestonModel_kappa(self, t)

    def sigma(self, t):
        return _QuantLib.PiecewiseTimeDependentHestonModel_sigma(self, t)

    def rho(self, t):
        return _QuantLib.PiecewiseTimeDependentHestonModel_rho(self, t)

    def v0(self):
        return _QuantLib.PiecewiseTimeDependentHestonModel_v0(self)

    def s0(self):
        return _QuantLib.PiecewiseTimeDependentHestonModel_s0(self)

    def timeGrid(self):
        return _QuantLib.PiecewiseTimeDependentHestonModel_timeGrid(self)

    def dividendYield(self):
        return _QuantLib.PiecewiseTimeDependentHestonModel_dividendYield(self)

    def riskFreeRate(self):
        return _QuantLib.PiecewiseTimeDependentHestonModel_riskFreeRate(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseTimeDependentHestonModel
    __del__ = lambda self: None
PiecewiseTimeDependentHestonModel_swigregister = _QuantLib.PiecewiseTimeDependentHestonModel_swigregister
PiecewiseTimeDependentHestonModel_swigregister(PiecewiseTimeDependentHestonModel)

class VarianceGammaModel(CalibratedModel):
    __swig_setmethods__ = {}
    for _s in [CalibratedModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarianceGammaModel, name, value)
    __swig_getmethods__ = {}
    for _s in [CalibratedModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VarianceGammaModel, name)
    __repr__ = _swig_repr

    def __init__(self, process):
        this = _QuantLib.new_VarianceGammaModel(process)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def sigma(self):
        return _QuantLib.VarianceGammaModel_sigma(self)

    def nu(self):
        return _QuantLib.VarianceGammaModel_nu(self)

    def theta(self):
        return _QuantLib.VarianceGammaModel_theta(self)

    def process(self):
        return _QuantLib.VarianceGammaModel_process(self)
    __swig_destroy__ = _QuantLib.delete_VarianceGammaModel
    __del__ = lambda self: None
VarianceGammaModel_swigregister = _QuantLib.VarianceGammaModel_swigregister
VarianceGammaModel_swigregister(VarianceGammaModel)

class BlackKarasinski(ShortRateModel, TermStructureConsistentModel):
    __swig_setmethods__ = {}
    for _s in [ShortRateModel, TermStructureConsistentModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackKarasinski, name, value)
    __swig_getmethods__ = {}
    for _s in [ShortRateModel, TermStructureConsistentModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlackKarasinski, name)
    __repr__ = _swig_repr

    def __init__(self, termStructure, a=0.1, sigma=0.1):
        this = _QuantLib.new_BlackKarasinski(termStructure, a, sigma)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def termStructure(self):
        return _QuantLib.BlackKarasinski_termStructure(self)
    __swig_destroy__ = _QuantLib.delete_BlackKarasinski
    __del__ = lambda self: None
BlackKarasinski_swigregister = _QuantLib.BlackKarasinski_swigregister
BlackKarasinski_swigregister(BlackKarasinski)

class G2(ShortRateModel):
    __swig_setmethods__ = {}
    for _s in [ShortRateModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, G2, name, value)
    __swig_getmethods__ = {}
    for _s in [ShortRateModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, G2, name)
    __repr__ = _swig_repr

    def __init__(self, termStructure, a=0.1, sigma=0.01, b=0.1, eta=0.01, rho=-0.75):
        this = _QuantLib.new_G2(termStructure, a, sigma, b, eta, rho)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def termStructure(self):
        return _QuantLib.G2_termStructure(self)
    __swig_destroy__ = _QuantLib.delete_G2
    __del__ = lambda self: None
G2_swigregister = _QuantLib.G2_swigregister
G2_swigregister(G2)

class OneFactorAffineModel(ShortRateModel, AffineModel):
    __swig_setmethods__ = {}
    for _s in [ShortRateModel, AffineModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OneFactorAffineModel, name, value)
    __swig_getmethods__ = {}
    for _s in [ShortRateModel, AffineModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OneFactorAffineModel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def discountBond(self, *args):
        return _QuantLib.OneFactorAffineModel_discountBond(self, *args)

    def discount(self, t):
        return _QuantLib.OneFactorAffineModel_discount(self, t)
    __swig_destroy__ = _QuantLib.delete_OneFactorAffineModel
    __del__ = lambda self: None
OneFactorAffineModel_swigregister = _QuantLib.OneFactorAffineModel_swigregister
OneFactorAffineModel_swigregister(OneFactorAffineModel)

class Vasicek(OneFactorAffineModel):
    __swig_setmethods__ = {}
    for _s in [OneFactorAffineModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vasicek, name, value)
    __swig_getmethods__ = {}
    for _s in [OneFactorAffineModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vasicek, name)
    __repr__ = _swig_repr

    def __init__(self, r0=0.05, a=0.1, b=0.05, sigma=0.01, lamda=0.0):
        this = _QuantLib.new_Vasicek(r0, a, b, sigma, lamda)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def discountBondOption(self, type, strike, maturity, bondMaturity):
        return _QuantLib.Vasicek_discountBondOption(self, type, strike, maturity, bondMaturity)

    def a(self):
        return _QuantLib.Vasicek_a(self)

    def b(self):
        return _QuantLib.Vasicek_b(self)

    def lambdaParameter(self):
        return _QuantLib.Vasicek_lambdaParameter(self)

    def sigma(self):
        return _QuantLib.Vasicek_sigma(self)

    def r0(self):
        return _QuantLib.Vasicek_r0(self)
    __swig_destroy__ = _QuantLib.delete_Vasicek
    __del__ = lambda self: None
Vasicek_swigregister = _QuantLib.Vasicek_swigregister
Vasicek_swigregister(Vasicek)

class HullWhite(Vasicek, TermStructureConsistentModel):
    __swig_setmethods__ = {}
    for _s in [Vasicek, TermStructureConsistentModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HullWhite, name, value)
    __swig_getmethods__ = {}
    for _s in [Vasicek, TermStructureConsistentModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HullWhite, name)
    __repr__ = _swig_repr

    def __init__(self, termStructure, a=0.1, sigma=0.01):
        this = _QuantLib.new_HullWhite(termStructure, a, sigma)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        convexityBias = staticmethod(_QuantLib.HullWhite_convexityBias)
    else:
        convexityBias = _QuantLib.HullWhite_convexityBias

    def termStructure(self):
        return _QuantLib.HullWhite_termStructure(self)

    def discountBondOption(self, *args):
        return _QuantLib.HullWhite_discountBondOption(self, *args)
    __swig_destroy__ = _QuantLib.delete_HullWhite
    __del__ = lambda self: None
HullWhite_swigregister = _QuantLib.HullWhite_swigregister
HullWhite_swigregister(HullWhite)

def HullWhite_convexityBias(futurePrice, t, T, sigma, a):
    return _QuantLib.HullWhite_convexityBias(futurePrice, t, T, sigma, a)
HullWhite_convexityBias = _QuantLib.HullWhite_convexityBias

class CoxIngersollRoss(OneFactorAffineModel):
    __swig_setmethods__ = {}
    for _s in [OneFactorAffineModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoxIngersollRoss, name, value)
    __swig_getmethods__ = {}
    for _s in [OneFactorAffineModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoxIngersollRoss, name)
    __repr__ = _swig_repr

    def __init__(self, r0=0.01, theta=0.1, k=0.1, sigma=0.1):
        this = _QuantLib.new_CoxIngersollRoss(r0, theta, k, sigma)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def discountBondOption(self, type, strike, maturity, bondMaturity):
        return _QuantLib.CoxIngersollRoss_discountBondOption(self, type, strike, maturity, bondMaturity)
    __swig_destroy__ = _QuantLib.delete_CoxIngersollRoss
    __del__ = lambda self: None
CoxIngersollRoss_swigregister = _QuantLib.CoxIngersollRoss_swigregister
CoxIngersollRoss_swigregister(CoxIngersollRoss)

class ExtendedCoxIngersollRoss(CoxIngersollRoss, TermStructureConsistentModel):
    __swig_setmethods__ = {}
    for _s in [CoxIngersollRoss, TermStructureConsistentModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtendedCoxIngersollRoss, name, value)
    __swig_getmethods__ = {}
    for _s in [CoxIngersollRoss, TermStructureConsistentModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExtendedCoxIngersollRoss, name)
    __repr__ = _swig_repr

    def __init__(self, termStructure, theta=0.1, k=0.1, sigma=0.1, x0=0.05):
        this = _QuantLib.new_ExtendedCoxIngersollRoss(termStructure, theta, k, sigma, x0)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def discountBondOption(self, type, strike, maturity, bondMaturity):
        return _QuantLib.ExtendedCoxIngersollRoss_discountBondOption(self, type, strike, maturity, bondMaturity)
    __swig_destroy__ = _QuantLib.delete_ExtendedCoxIngersollRoss
    __del__ = lambda self: None
ExtendedCoxIngersollRoss_swigregister = _QuantLib.ExtendedCoxIngersollRoss_swigregister
ExtendedCoxIngersollRoss_swigregister(ExtendedCoxIngersollRoss)

class CalibrationHelper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalibrationHelper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalibrationHelper, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def calibrationError(self):
        return _QuantLib.CalibrationHelper_calibrationError(self)
    __swig_destroy__ = _QuantLib.delete_CalibrationHelper
    __del__ = lambda self: None
CalibrationHelper_swigregister = _QuantLib.CalibrationHelper_swigregister
CalibrationHelper_swigregister(CalibrationHelper)

class BlackCalibrationHelper(CalibrationHelper):
    __swig_setmethods__ = {}
    for _s in [CalibrationHelper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackCalibrationHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [CalibrationHelper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlackCalibrationHelper, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    RelativePriceError = _QuantLib.BlackCalibrationHelper_RelativePriceError
    PriceError = _QuantLib.BlackCalibrationHelper_PriceError
    ImpliedVolError = _QuantLib.BlackCalibrationHelper_ImpliedVolError

    def volatility(self):
        return _QuantLib.BlackCalibrationHelper_volatility(self)

    def volatilityType(self):
        return _QuantLib.BlackCalibrationHelper_volatilityType(self)

    def marketValue(self):
        return _QuantLib.BlackCalibrationHelper_marketValue(self)

    def modelValue(self):
        return _QuantLib.BlackCalibrationHelper_modelValue(self)

    def calibrationError(self):
        return _QuantLib.BlackCalibrationHelper_calibrationError(self)

    def impliedVolatility(self, targetValue, accuracy, maxEvaluations, minVol, maxVol):
        return _QuantLib.BlackCalibrationHelper_impliedVolatility(self, targetValue, accuracy, maxEvaluations, minVol, maxVol)

    def blackPrice(self, volatility):
        return _QuantLib.BlackCalibrationHelper_blackPrice(self, volatility)

    def setPricingEngine(self, engine):
        return _QuantLib.BlackCalibrationHelper_setPricingEngine(self, engine)

    def times(self):
        return _QuantLib.BlackCalibrationHelper_times(self)
    __swig_destroy__ = _QuantLib.delete_BlackCalibrationHelper
    __del__ = lambda self: None
BlackCalibrationHelper_swigregister = _QuantLib.BlackCalibrationHelper_swigregister
BlackCalibrationHelper_swigregister(BlackCalibrationHelper)


def as_black_helper(h):
    return _QuantLib.as_black_helper(h)
as_black_helper = _QuantLib.as_black_helper

def as_swaption_helper(h):
    return _QuantLib.as_swaption_helper(h)
as_swaption_helper = _QuantLib.as_swaption_helper
class CalibrationHelperVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalibrationHelperVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalibrationHelperVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.CalibrationHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.CalibrationHelperVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.CalibrationHelperVector___bool__(self)

    def __len__(self):
        return _QuantLib.CalibrationHelperVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.CalibrationHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.CalibrationHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.CalibrationHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.CalibrationHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.CalibrationHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.CalibrationHelperVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.CalibrationHelperVector_pop(self)

    def append(self, x):
        return _QuantLib.CalibrationHelperVector_append(self, x)

    def empty(self):
        return _QuantLib.CalibrationHelperVector_empty(self)

    def size(self):
        return _QuantLib.CalibrationHelperVector_size(self)

    def swap(self, v):
        return _QuantLib.CalibrationHelperVector_swap(self, v)

    def begin(self):
        return _QuantLib.CalibrationHelperVector_begin(self)

    def end(self):
        return _QuantLib.CalibrationHelperVector_end(self)

    def rbegin(self):
        return _QuantLib.CalibrationHelperVector_rbegin(self)

    def rend(self):
        return _QuantLib.CalibrationHelperVector_rend(self)

    def clear(self):
        return _QuantLib.CalibrationHelperVector_clear(self)

    def get_allocator(self):
        return _QuantLib.CalibrationHelperVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.CalibrationHelperVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.CalibrationHelperVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_CalibrationHelperVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.CalibrationHelperVector_push_back(self, x)

    def front(self):
        return _QuantLib.CalibrationHelperVector_front(self)

    def back(self):
        return _QuantLib.CalibrationHelperVector_back(self)

    def assign(self, n, x):
        return _QuantLib.CalibrationHelperVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.CalibrationHelperVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.CalibrationHelperVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.CalibrationHelperVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.CalibrationHelperVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_CalibrationHelperVector
    __del__ = lambda self: None
CalibrationHelperVector_swigregister = _QuantLib.CalibrationHelperVector_swigregister
CalibrationHelperVector_swigregister(CalibrationHelperVector)

class BlackCalibrationHelperVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackCalibrationHelperVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlackCalibrationHelperVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.BlackCalibrationHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.BlackCalibrationHelperVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.BlackCalibrationHelperVector___bool__(self)

    def __len__(self):
        return _QuantLib.BlackCalibrationHelperVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.BlackCalibrationHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.BlackCalibrationHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.BlackCalibrationHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.BlackCalibrationHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.BlackCalibrationHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.BlackCalibrationHelperVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.BlackCalibrationHelperVector_pop(self)

    def append(self, x):
        return _QuantLib.BlackCalibrationHelperVector_append(self, x)

    def empty(self):
        return _QuantLib.BlackCalibrationHelperVector_empty(self)

    def size(self):
        return _QuantLib.BlackCalibrationHelperVector_size(self)

    def swap(self, v):
        return _QuantLib.BlackCalibrationHelperVector_swap(self, v)

    def begin(self):
        return _QuantLib.BlackCalibrationHelperVector_begin(self)

    def end(self):
        return _QuantLib.BlackCalibrationHelperVector_end(self)

    def rbegin(self):
        return _QuantLib.BlackCalibrationHelperVector_rbegin(self)

    def rend(self):
        return _QuantLib.BlackCalibrationHelperVector_rend(self)

    def clear(self):
        return _QuantLib.BlackCalibrationHelperVector_clear(self)

    def get_allocator(self):
        return _QuantLib.BlackCalibrationHelperVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.BlackCalibrationHelperVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.BlackCalibrationHelperVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_BlackCalibrationHelperVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.BlackCalibrationHelperVector_push_back(self, x)

    def front(self):
        return _QuantLib.BlackCalibrationHelperVector_front(self)

    def back(self):
        return _QuantLib.BlackCalibrationHelperVector_back(self)

    def assign(self, n, x):
        return _QuantLib.BlackCalibrationHelperVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.BlackCalibrationHelperVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.BlackCalibrationHelperVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.BlackCalibrationHelperVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.BlackCalibrationHelperVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_BlackCalibrationHelperVector
    __del__ = lambda self: None
BlackCalibrationHelperVector_swigregister = _QuantLib.BlackCalibrationHelperVector_swigregister
BlackCalibrationHelperVector_swigregister(BlackCalibrationHelperVector)

class CapHelper(BlackCalibrationHelper):
    __swig_setmethods__ = {}
    for _s in [BlackCalibrationHelper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CapHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [BlackCalibrationHelper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CapHelper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_CapHelper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CapHelper
    __del__ = lambda self: None
CapHelper_swigregister = _QuantLib.CapHelper_swigregister
CapHelper_swigregister(CapHelper)

class HestonModelHelper(BlackCalibrationHelper):
    __swig_setmethods__ = {}
    for _s in [BlackCalibrationHelper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HestonModelHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [BlackCalibrationHelper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HestonModelHelper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_HestonModelHelper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def maturity(self):
        return _QuantLib.HestonModelHelper_maturity(self)
    __swig_destroy__ = _QuantLib.delete_HestonModelHelper
    __del__ = lambda self: None
HestonModelHelper_swigregister = _QuantLib.HestonModelHelper_swigregister
HestonModelHelper_swigregister(HestonModelHelper)

class SwaptionHelper(BlackCalibrationHelper):
    __swig_setmethods__ = {}
    for _s in [BlackCalibrationHelper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwaptionHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [BlackCalibrationHelper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SwaptionHelper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_SwaptionHelper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def underlyingSwap(self):
        return _QuantLib.SwaptionHelper_underlyingSwap(self)

    def swaption(self):
        return _QuantLib.SwaptionHelper_swaption(self)

    def swaptionExpiryDate(self):
        return _QuantLib.SwaptionHelper_swaptionExpiryDate(self)

    def swaptionStrike(self):
        return _QuantLib.SwaptionHelper_swaptionStrike(self)

    def swaptionNominal(self):
        return _QuantLib.SwaptionHelper_swaptionNominal(self)

    def swaptionMaturityDate(self):
        return _QuantLib.SwaptionHelper_swaptionMaturityDate(self)
    __swig_destroy__ = _QuantLib.delete_SwaptionHelper
    __del__ = lambda self: None
SwaptionHelper_swigregister = _QuantLib.SwaptionHelper_swigregister
SwaptionHelper_swigregister(SwaptionHelper)

class CallabilityPrice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallabilityPrice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CallabilityPrice, name)
    __repr__ = _swig_repr
    Dirty = _QuantLib.CallabilityPrice_Dirty
    Clean = _QuantLib.CallabilityPrice_Clean

    def __init__(self, amount, type):
        this = _QuantLib.new_CallabilityPrice(amount, type)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def amount(self):
        return _QuantLib.CallabilityPrice_amount(self)

    def type(self):
        return _QuantLib.CallabilityPrice_type(self)
    __swig_destroy__ = _QuantLib.delete_CallabilityPrice
    __del__ = lambda self: None
CallabilityPrice_swigregister = _QuantLib.CallabilityPrice_swigregister
CallabilityPrice_swigregister(CallabilityPrice)

class Callability(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Callability, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Callability, name)
    __repr__ = _swig_repr
    Call = _QuantLib.Callability_Call
    Put = _QuantLib.Callability_Put

    def __init__(self, price, type, date):
        this = _QuantLib.new_Callability(price, type, date)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def price(self):
        return _QuantLib.Callability_price(self)

    def type(self):
        return _QuantLib.Callability_type(self)

    def date(self):
        return _QuantLib.Callability_date(self)
    __swig_destroy__ = _QuantLib.delete_Callability
    __del__ = lambda self: None
Callability_swigregister = _QuantLib.Callability_swigregister
Callability_swigregister(Callability)

class SoftCallability(Callability):
    __swig_setmethods__ = {}
    for _s in [Callability]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoftCallability, name, value)
    __swig_getmethods__ = {}
    for _s in [Callability]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SoftCallability, name)
    __repr__ = _swig_repr

    def __init__(self, price, date, trigger):
        this = _QuantLib.new_SoftCallability(price, date, trigger)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SoftCallability
    __del__ = lambda self: None
SoftCallability_swigregister = _QuantLib.SoftCallability_swigregister
SoftCallability_swigregister(SoftCallability)

class CallabilitySchedule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallabilitySchedule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CallabilitySchedule, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.CallabilitySchedule_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.CallabilitySchedule___nonzero__(self)

    def __bool__(self):
        return _QuantLib.CallabilitySchedule___bool__(self)

    def __len__(self):
        return _QuantLib.CallabilitySchedule___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.CallabilitySchedule___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.CallabilitySchedule___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.CallabilitySchedule___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.CallabilitySchedule___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.CallabilitySchedule___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.CallabilitySchedule___setitem__(self, *args)

    def pop(self):
        return _QuantLib.CallabilitySchedule_pop(self)

    def append(self, x):
        return _QuantLib.CallabilitySchedule_append(self, x)

    def empty(self):
        return _QuantLib.CallabilitySchedule_empty(self)

    def size(self):
        return _QuantLib.CallabilitySchedule_size(self)

    def swap(self, v):
        return _QuantLib.CallabilitySchedule_swap(self, v)

    def begin(self):
        return _QuantLib.CallabilitySchedule_begin(self)

    def end(self):
        return _QuantLib.CallabilitySchedule_end(self)

    def rbegin(self):
        return _QuantLib.CallabilitySchedule_rbegin(self)

    def rend(self):
        return _QuantLib.CallabilitySchedule_rend(self)

    def clear(self):
        return _QuantLib.CallabilitySchedule_clear(self)

    def get_allocator(self):
        return _QuantLib.CallabilitySchedule_get_allocator(self)

    def pop_back(self):
        return _QuantLib.CallabilitySchedule_pop_back(self)

    def erase(self, *args):
        return _QuantLib.CallabilitySchedule_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_CallabilitySchedule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.CallabilitySchedule_push_back(self, x)

    def front(self):
        return _QuantLib.CallabilitySchedule_front(self)

    def back(self):
        return _QuantLib.CallabilitySchedule_back(self)

    def assign(self, n, x):
        return _QuantLib.CallabilitySchedule_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.CallabilitySchedule_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.CallabilitySchedule_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.CallabilitySchedule_reserve(self, n)

    def capacity(self):
        return _QuantLib.CallabilitySchedule_capacity(self)
    __swig_destroy__ = _QuantLib.delete_CallabilitySchedule
    __del__ = lambda self: None
CallabilitySchedule_swigregister = _QuantLib.CallabilitySchedule_swigregister
CallabilitySchedule_swigregister(CallabilitySchedule)

class CashFlows(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashFlows, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CashFlows, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        startDate = staticmethod(_QuantLib.CashFlows_startDate)
    else:
        startDate = _QuantLib.CashFlows_startDate
    if _newclass:
        maturityDate = staticmethod(_QuantLib.CashFlows_maturityDate)
    else:
        maturityDate = _QuantLib.CashFlows_maturityDate
    if _newclass:
        previousCashFlowDate = staticmethod(_QuantLib.CashFlows_previousCashFlowDate)
    else:
        previousCashFlowDate = _QuantLib.CashFlows_previousCashFlowDate
    if _newclass:
        nextCashFlowDate = staticmethod(_QuantLib.CashFlows_nextCashFlowDate)
    else:
        nextCashFlowDate = _QuantLib.CashFlows_nextCashFlowDate
    if _newclass:
        yieldRate = staticmethod(_QuantLib.CashFlows_yieldRate)
    else:
        yieldRate = _QuantLib.CashFlows_yieldRate
    if _newclass:
        duration = staticmethod(_QuantLib.CashFlows_duration)
    else:
        duration = _QuantLib.CashFlows_duration
    if _newclass:
        convexity = staticmethod(_QuantLib.CashFlows_convexity)
    else:
        convexity = _QuantLib.CashFlows_convexity
    if _newclass:
        basisPointValue = staticmethod(_QuantLib.CashFlows_basisPointValue)
    else:
        basisPointValue = _QuantLib.CashFlows_basisPointValue
    if _newclass:
        zSpread = staticmethod(_QuantLib.CashFlows_zSpread)
    else:
        zSpread = _QuantLib.CashFlows_zSpread
    if _newclass:
        previousCashFlow = staticmethod(_QuantLib.CashFlows_previousCashFlow)
    else:
        previousCashFlow = _QuantLib.CashFlows_previousCashFlow
    if _newclass:
        nextCashFlow = staticmethod(_QuantLib.CashFlows_nextCashFlow)
    else:
        nextCashFlow = _QuantLib.CashFlows_nextCashFlow
    if _newclass:
        npv = staticmethod(_QuantLib.CashFlows_npv)
    else:
        npv = _QuantLib.CashFlows_npv
    if _newclass:
        bps = staticmethod(_QuantLib.CashFlows_bps)
    else:
        bps = _QuantLib.CashFlows_bps
    if _newclass:
        atmRate = staticmethod(_QuantLib.CashFlows_atmRate)
    else:
        atmRate = _QuantLib.CashFlows_atmRate
    __swig_destroy__ = _QuantLib.delete_CashFlows
    __del__ = lambda self: None
CashFlows_swigregister = _QuantLib.CashFlows_swigregister
CashFlows_swigregister(CashFlows)

def CashFlows_startDate(arg2):
    return _QuantLib.CashFlows_startDate(arg2)
CashFlows_startDate = _QuantLib.CashFlows_startDate

def CashFlows_maturityDate(arg2):
    return _QuantLib.CashFlows_maturityDate(arg2)
CashFlows_maturityDate = _QuantLib.CashFlows_maturityDate

def CashFlows_previousCashFlowDate(*args):
    return _QuantLib.CashFlows_previousCashFlowDate(*args)
CashFlows_previousCashFlowDate = _QuantLib.CashFlows_previousCashFlowDate

def CashFlows_nextCashFlowDate(*args):
    return _QuantLib.CashFlows_nextCashFlowDate(*args)
CashFlows_nextCashFlowDate = _QuantLib.CashFlows_nextCashFlowDate

def CashFlows_yieldRate(*args):
    return _QuantLib.CashFlows_yieldRate(*args)
CashFlows_yieldRate = _QuantLib.CashFlows_yieldRate

def CashFlows_duration(*args):
    return _QuantLib.CashFlows_duration(*args)
CashFlows_duration = _QuantLib.CashFlows_duration

def CashFlows_convexity(*args):
    return _QuantLib.CashFlows_convexity(*args)
CashFlows_convexity = _QuantLib.CashFlows_convexity

def CashFlows_basisPointValue(*args):
    return _QuantLib.CashFlows_basisPointValue(*args)
CashFlows_basisPointValue = _QuantLib.CashFlows_basisPointValue

def CashFlows_zSpread(*args):
    return _QuantLib.CashFlows_zSpread(*args)
CashFlows_zSpread = _QuantLib.CashFlows_zSpread

def CashFlows_previousCashFlow(*args):
    return _QuantLib.CashFlows_previousCashFlow(*args)
CashFlows_previousCashFlow = _QuantLib.CashFlows_previousCashFlow

def CashFlows_nextCashFlow(*args):
    return _QuantLib.CashFlows_nextCashFlow(*args)
CashFlows_nextCashFlow = _QuantLib.CashFlows_nextCashFlow

def CashFlows_npv(*args):
    return _QuantLib.CashFlows_npv(*args)
CashFlows_npv = _QuantLib.CashFlows_npv

def CashFlows_bps(*args):
    return _QuantLib.CashFlows_bps(*args)
CashFlows_bps = _QuantLib.CashFlows_bps

def CashFlows_atmRate(*args):
    return _QuantLib.CashFlows_atmRate(*args)
CashFlows_atmRate = _QuantLib.CashFlows_atmRate

class Coupon(CashFlow):
    __swig_setmethods__ = {}
    for _s in [CashFlow]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Coupon, name, value)
    __swig_getmethods__ = {}
    for _s in [CashFlow]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Coupon, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def nominal(self):
        return _QuantLib.Coupon_nominal(self)

    def accrualStartDate(self):
        return _QuantLib.Coupon_accrualStartDate(self)

    def accrualEndDate(self):
        return _QuantLib.Coupon_accrualEndDate(self)

    def referencePeriodStart(self):
        return _QuantLib.Coupon_referencePeriodStart(self)

    def referencePeriodEnd(self):
        return _QuantLib.Coupon_referencePeriodEnd(self)

    def exCouponDate(self):
        return _QuantLib.Coupon_exCouponDate(self)

    def rate(self):
        return _QuantLib.Coupon_rate(self)

    def accrualPeriod(self):
        return _QuantLib.Coupon_accrualPeriod(self)

    def accrualDays(self):
        return _QuantLib.Coupon_accrualDays(self)

    def dayCounter(self):
        return _QuantLib.Coupon_dayCounter(self)

    def accruedAmount(self, date):
        return _QuantLib.Coupon_accruedAmount(self, date)
    __swig_destroy__ = _QuantLib.delete_Coupon
    __del__ = lambda self: None
Coupon_swigregister = _QuantLib.Coupon_swigregister
Coupon_swigregister(Coupon)


def as_coupon(cf):
    return _QuantLib.as_coupon(cf)
as_coupon = _QuantLib.as_coupon
class Dividend(CashFlow):
    __swig_setmethods__ = {}
    for _s in [CashFlow]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dividend, name, value)
    __swig_getmethods__ = {}
    for _s in [CashFlow]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Dividend, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _QuantLib.delete_Dividend
    __del__ = lambda self: None
Dividend_swigregister = _QuantLib.Dividend_swigregister
Dividend_swigregister(Dividend)

class FloatingRateCouponPricer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatingRateCouponPricer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatingRateCouponPricer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def swapletPrice(self):
        return _QuantLib.FloatingRateCouponPricer_swapletPrice(self)

    def swapletRate(self):
        return _QuantLib.FloatingRateCouponPricer_swapletRate(self)

    def capletPrice(self, effectiveCap):
        return _QuantLib.FloatingRateCouponPricer_capletPrice(self, effectiveCap)

    def capletRate(self, effectiveCap):
        return _QuantLib.FloatingRateCouponPricer_capletRate(self, effectiveCap)

    def floorletPrice(self, effectiveFloor):
        return _QuantLib.FloatingRateCouponPricer_floorletPrice(self, effectiveFloor)

    def floorletRate(self, effectiveFloor):
        return _QuantLib.FloatingRateCouponPricer_floorletRate(self, effectiveFloor)
    __swig_destroy__ = _QuantLib.delete_FloatingRateCouponPricer
    __del__ = lambda self: None
FloatingRateCouponPricer_swigregister = _QuantLib.FloatingRateCouponPricer_swigregister
FloatingRateCouponPricer_swigregister(FloatingRateCouponPricer)


def setCouponPricer(arg1, arg2):
    return _QuantLib.setCouponPricer(arg1, arg2)
setCouponPricer = _QuantLib.setCouponPricer
class FixedRateCoupon(Coupon):
    __swig_setmethods__ = {}
    for _s in [Coupon]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FixedRateCoupon, name, value)
    __swig_getmethods__ = {}
    for _s in [Coupon]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FixedRateCoupon, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_FixedRateCoupon(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def interestRate(self):
        return _QuantLib.FixedRateCoupon_interestRate(self)
    __swig_destroy__ = _QuantLib.delete_FixedRateCoupon
    __del__ = lambda self: None
FixedRateCoupon_swigregister = _QuantLib.FixedRateCoupon_swigregister
FixedRateCoupon_swigregister(FixedRateCoupon)


def as_fixed_rate_coupon(cf):
    return _QuantLib.as_fixed_rate_coupon(cf)
as_fixed_rate_coupon = _QuantLib.as_fixed_rate_coupon
class FloatingRateCoupon(Coupon):
    __swig_setmethods__ = {}
    for _s in [Coupon]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatingRateCoupon, name, value)
    __swig_getmethods__ = {}
    for _s in [Coupon]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatingRateCoupon, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def fixingDate(self):
        return _QuantLib.FloatingRateCoupon_fixingDate(self)

    def fixingDays(self):
        return _QuantLib.FloatingRateCoupon_fixingDays(self)

    def isInArrears(self):
        return _QuantLib.FloatingRateCoupon_isInArrears(self)

    def gearing(self):
        return _QuantLib.FloatingRateCoupon_gearing(self)

    def spread(self):
        return _QuantLib.FloatingRateCoupon_spread(self)

    def indexFixing(self):
        return _QuantLib.FloatingRateCoupon_indexFixing(self)

    def adjustedFixing(self):
        return _QuantLib.FloatingRateCoupon_adjustedFixing(self)

    def convexityAdjustment(self):
        return _QuantLib.FloatingRateCoupon_convexityAdjustment(self)

    def price(self, discountCurve):
        return _QuantLib.FloatingRateCoupon_price(self, discountCurve)

    def index(self):
        return _QuantLib.FloatingRateCoupon_index(self)

    def setPricer(self, p):
        return _QuantLib.FloatingRateCoupon_setPricer(self, p)
    __swig_destroy__ = _QuantLib.delete_FloatingRateCoupon
    __del__ = lambda self: None
FloatingRateCoupon_swigregister = _QuantLib.FloatingRateCoupon_swigregister
FloatingRateCoupon_swigregister(FloatingRateCoupon)


def as_floating_rate_coupon(cf):
    return _QuantLib.as_floating_rate_coupon(cf)
as_floating_rate_coupon = _QuantLib.as_floating_rate_coupon
class InflationCoupon(Coupon):
    __swig_setmethods__ = {}
    for _s in [Coupon]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InflationCoupon, name, value)
    __swig_getmethods__ = {}
    for _s in [Coupon]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InflationCoupon, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def fixingDate(self):
        return _QuantLib.InflationCoupon_fixingDate(self)

    def fixingDays(self):
        return _QuantLib.InflationCoupon_fixingDays(self)

    def observationLag(self):
        return _QuantLib.InflationCoupon_observationLag(self)

    def indexFixing(self):
        return _QuantLib.InflationCoupon_indexFixing(self)

    def index(self):
        return _QuantLib.InflationCoupon_index(self)
    __swig_destroy__ = _QuantLib.delete_InflationCoupon
    __del__ = lambda self: None
InflationCoupon_swigregister = _QuantLib.InflationCoupon_swigregister
InflationCoupon_swigregister(InflationCoupon)


def as_inflation_coupon(cf):
    return _QuantLib.as_inflation_coupon(cf)
as_inflation_coupon = _QuantLib.as_inflation_coupon
class OvernightIndexedCoupon(FloatingRateCoupon):
    __swig_setmethods__ = {}
    for _s in [FloatingRateCoupon]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OvernightIndexedCoupon, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatingRateCoupon]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OvernightIndexedCoupon, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_OvernightIndexedCoupon(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def fixingDates(self):
        return _QuantLib.OvernightIndexedCoupon_fixingDates(self)

    def dt(self):
        return _QuantLib.OvernightIndexedCoupon_dt(self)

    def indexFixings(self):
        return _QuantLib.OvernightIndexedCoupon_indexFixings(self)

    def valueDates(self):
        return _QuantLib.OvernightIndexedCoupon_valueDates(self)
    __swig_destroy__ = _QuantLib.delete_OvernightIndexedCoupon
    __del__ = lambda self: None
OvernightIndexedCoupon_swigregister = _QuantLib.OvernightIndexedCoupon_swigregister
OvernightIndexedCoupon_swigregister(OvernightIndexedCoupon)

class IborCoupon(FloatingRateCoupon):
    __swig_setmethods__ = {}
    for _s in [FloatingRateCoupon]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IborCoupon, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatingRateCoupon]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IborCoupon, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_IborCoupon(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        createAtParCoupons = staticmethod(_QuantLib.IborCoupon_createAtParCoupons)
    else:
        createAtParCoupons = _QuantLib.IborCoupon_createAtParCoupons
    if _newclass:
        createIndexedCoupons = staticmethod(_QuantLib.IborCoupon_createIndexedCoupons)
    else:
        createIndexedCoupons = _QuantLib.IborCoupon_createIndexedCoupons
    if _newclass:
        usingAtParCoupons = staticmethod(_QuantLib.IborCoupon_usingAtParCoupons)
    else:
        usingAtParCoupons = _QuantLib.IborCoupon_usingAtParCoupons
    __swig_destroy__ = _QuantLib.delete_IborCoupon
    __del__ = lambda self: None
IborCoupon_swigregister = _QuantLib.IborCoupon_swigregister
IborCoupon_swigregister(IborCoupon)

def IborCoupon_createAtParCoupons():
    return _QuantLib.IborCoupon_createAtParCoupons()
IborCoupon_createAtParCoupons = _QuantLib.IborCoupon_createAtParCoupons

def IborCoupon_createIndexedCoupons():
    return _QuantLib.IborCoupon_createIndexedCoupons()
IborCoupon_createIndexedCoupons = _QuantLib.IborCoupon_createIndexedCoupons

def IborCoupon_usingAtParCoupons():
    return _QuantLib.IborCoupon_usingAtParCoupons()
IborCoupon_usingAtParCoupons = _QuantLib.IborCoupon_usingAtParCoupons

class CappedFlooredCoupon(FloatingRateCoupon):
    __swig_setmethods__ = {}
    for _s in [FloatingRateCoupon]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CappedFlooredCoupon, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatingRateCoupon]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CappedFlooredCoupon, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_CappedFlooredCoupon(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def cap(self):
        return _QuantLib.CappedFlooredCoupon_cap(self)

    def floor(self):
        return _QuantLib.CappedFlooredCoupon_floor(self)

    def effectiveCap(self):
        return _QuantLib.CappedFlooredCoupon_effectiveCap(self)

    def effectiveFloor(self):
        return _QuantLib.CappedFlooredCoupon_effectiveFloor(self)

    def isCapped(self):
        return _QuantLib.CappedFlooredCoupon_isCapped(self)

    def isFloored(self):
        return _QuantLib.CappedFlooredCoupon_isFloored(self)

    def setPricer(self, p):
        return _QuantLib.CappedFlooredCoupon_setPricer(self, p)
    __swig_destroy__ = _QuantLib.delete_CappedFlooredCoupon
    __del__ = lambda self: None
CappedFlooredCoupon_swigregister = _QuantLib.CappedFlooredCoupon_swigregister
CappedFlooredCoupon_swigregister(CappedFlooredCoupon)

class CmsCoupon(FloatingRateCoupon):
    __swig_setmethods__ = {}
    for _s in [FloatingRateCoupon]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmsCoupon, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatingRateCoupon]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CmsCoupon, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_CmsCoupon(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CmsCoupon
    __del__ = lambda self: None
CmsCoupon_swigregister = _QuantLib.CmsCoupon_swigregister
CmsCoupon_swigregister(CmsCoupon)

class CmsSpreadCoupon(FloatingRateCoupon):
    __swig_setmethods__ = {}
    for _s in [FloatingRateCoupon]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmsSpreadCoupon, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatingRateCoupon]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CmsSpreadCoupon, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_CmsSpreadCoupon(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CmsSpreadCoupon
    __del__ = lambda self: None
CmsSpreadCoupon_swigregister = _QuantLib.CmsSpreadCoupon_swigregister
CmsSpreadCoupon_swigregister(CmsSpreadCoupon)

class CPICoupon(InflationCoupon):
    __swig_setmethods__ = {}
    for _s in [InflationCoupon]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPICoupon, name, value)
    __swig_getmethods__ = {}
    for _s in [InflationCoupon]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPICoupon, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def fixedRate(self):
        return _QuantLib.CPICoupon_fixedRate(self)

    def spread(self):
        return _QuantLib.CPICoupon_spread(self)

    def adjustedFixing(self):
        return _QuantLib.CPICoupon_adjustedFixing(self)

    def baseCPI(self):
        return _QuantLib.CPICoupon_baseCPI(self)

    def observationInterpolation(self):
        return _QuantLib.CPICoupon_observationInterpolation(self)

    def cpiIndex(self):
        return _QuantLib.CPICoupon_cpiIndex(self)
    __swig_destroy__ = _QuantLib.delete_CPICoupon
    __del__ = lambda self: None
CPICoupon_swigregister = _QuantLib.CPICoupon_swigregister
CPICoupon_swigregister(CPICoupon)


def as_cpi_coupon(cf):
    return _QuantLib.as_cpi_coupon(cf)
as_cpi_coupon = _QuantLib.as_cpi_coupon
class CappedFlooredIborCoupon(CappedFlooredCoupon):
    __swig_setmethods__ = {}
    for _s in [CappedFlooredCoupon]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CappedFlooredIborCoupon, name, value)
    __swig_getmethods__ = {}
    for _s in [CappedFlooredCoupon]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CappedFlooredIborCoupon, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_CappedFlooredIborCoupon(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CappedFlooredIborCoupon
    __del__ = lambda self: None
CappedFlooredIborCoupon_swigregister = _QuantLib.CappedFlooredIborCoupon_swigregister
CappedFlooredIborCoupon_swigregister(CappedFlooredIborCoupon)

class CappedFlooredCmsCoupon(CappedFlooredCoupon):
    __swig_setmethods__ = {}
    for _s in [CappedFlooredCoupon]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CappedFlooredCmsCoupon, name, value)
    __swig_getmethods__ = {}
    for _s in [CappedFlooredCoupon]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CappedFlooredCmsCoupon, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_CappedFlooredCmsCoupon(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CappedFlooredCmsCoupon
    __del__ = lambda self: None
CappedFlooredCmsCoupon_swigregister = _QuantLib.CappedFlooredCmsCoupon_swigregister
CappedFlooredCmsCoupon_swigregister(CappedFlooredCmsCoupon)

class CappedFlooredCmsSpreadCoupon(CappedFlooredCoupon):
    __swig_setmethods__ = {}
    for _s in [CappedFlooredCoupon]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CappedFlooredCmsSpreadCoupon, name, value)
    __swig_getmethods__ = {}
    for _s in [CappedFlooredCoupon]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CappedFlooredCmsSpreadCoupon, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_CappedFlooredCmsSpreadCoupon(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CappedFlooredCmsSpreadCoupon
    __del__ = lambda self: None
CappedFlooredCmsSpreadCoupon_swigregister = _QuantLib.CappedFlooredCmsSpreadCoupon_swigregister
CappedFlooredCmsSpreadCoupon_swigregister(CappedFlooredCmsSpreadCoupon)

class FixedDividend(Dividend):
    __swig_setmethods__ = {}
    for _s in [Dividend]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FixedDividend, name, value)
    __swig_getmethods__ = {}
    for _s in [Dividend]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FixedDividend, name)
    __repr__ = _swig_repr

    def __init__(self, amount, date):
        this = _QuantLib.new_FixedDividend(amount, date)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FixedDividend
    __del__ = lambda self: None
FixedDividend_swigregister = _QuantLib.FixedDividend_swigregister
FixedDividend_swigregister(FixedDividend)

class FractionalDividend(Dividend):
    __swig_setmethods__ = {}
    for _s in [Dividend]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FractionalDividend, name, value)
    __swig_getmethods__ = {}
    for _s in [Dividend]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FractionalDividend, name)
    __repr__ = _swig_repr

    def __init__(self, rate, date):
        this = _QuantLib.new_FractionalDividend(rate, date)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FractionalDividend
    __del__ = lambda self: None
FractionalDividend_swigregister = _QuantLib.FractionalDividend_swigregister
FractionalDividend_swigregister(FractionalDividend)

class DividendSchedule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DividendSchedule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DividendSchedule, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.DividendSchedule_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.DividendSchedule___nonzero__(self)

    def __bool__(self):
        return _QuantLib.DividendSchedule___bool__(self)

    def __len__(self):
        return _QuantLib.DividendSchedule___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.DividendSchedule___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.DividendSchedule___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.DividendSchedule___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.DividendSchedule___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.DividendSchedule___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.DividendSchedule___setitem__(self, *args)

    def pop(self):
        return _QuantLib.DividendSchedule_pop(self)

    def append(self, x):
        return _QuantLib.DividendSchedule_append(self, x)

    def empty(self):
        return _QuantLib.DividendSchedule_empty(self)

    def size(self):
        return _QuantLib.DividendSchedule_size(self)

    def swap(self, v):
        return _QuantLib.DividendSchedule_swap(self, v)

    def begin(self):
        return _QuantLib.DividendSchedule_begin(self)

    def end(self):
        return _QuantLib.DividendSchedule_end(self)

    def rbegin(self):
        return _QuantLib.DividendSchedule_rbegin(self)

    def rend(self):
        return _QuantLib.DividendSchedule_rend(self)

    def clear(self):
        return _QuantLib.DividendSchedule_clear(self)

    def get_allocator(self):
        return _QuantLib.DividendSchedule_get_allocator(self)

    def pop_back(self):
        return _QuantLib.DividendSchedule_pop_back(self)

    def erase(self, *args):
        return _QuantLib.DividendSchedule_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_DividendSchedule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.DividendSchedule_push_back(self, x)

    def front(self):
        return _QuantLib.DividendSchedule_front(self)

    def back(self):
        return _QuantLib.DividendSchedule_back(self)

    def assign(self, n, x):
        return _QuantLib.DividendSchedule_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.DividendSchedule_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.DividendSchedule_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.DividendSchedule_reserve(self, n)

    def capacity(self):
        return _QuantLib.DividendSchedule_capacity(self)
    __swig_destroy__ = _QuantLib.delete_DividendSchedule
    __del__ = lambda self: None
DividendSchedule_swigregister = _QuantLib.DividendSchedule_swigregister
DividendSchedule_swigregister(DividendSchedule)

class GFunctionFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GFunctionFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GFunctionFactory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Standard = _QuantLib.GFunctionFactory_Standard
    ExactYield = _QuantLib.GFunctionFactory_ExactYield
    ParallelShifts = _QuantLib.GFunctionFactory_ParallelShifts
    NonParallelShifts = _QuantLib.GFunctionFactory_NonParallelShifts
    __swig_destroy__ = _QuantLib.delete_GFunctionFactory
    __del__ = lambda self: None
GFunctionFactory_swigregister = _QuantLib.GFunctionFactory_swigregister
GFunctionFactory_swigregister(GFunctionFactory)

class CmsCouponPricer(FloatingRateCouponPricer):
    __swig_setmethods__ = {}
    for _s in [FloatingRateCouponPricer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmsCouponPricer, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatingRateCouponPricer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CmsCouponPricer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def swaptionVolatility(self):
        return _QuantLib.CmsCouponPricer_swaptionVolatility(self)

    def setSwaptionVolatility(self, *args):
        return _QuantLib.CmsCouponPricer_setSwaptionVolatility(self, *args)
    __swig_destroy__ = _QuantLib.delete_CmsCouponPricer
    __del__ = lambda self: None
CmsCouponPricer_swigregister = _QuantLib.CmsCouponPricer_swigregister
CmsCouponPricer_swigregister(CmsCouponPricer)

class CmsCouponPricerVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmsCouponPricerVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CmsCouponPricerVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.CmsCouponPricerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.CmsCouponPricerVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.CmsCouponPricerVector___bool__(self)

    def __len__(self):
        return _QuantLib.CmsCouponPricerVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.CmsCouponPricerVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.CmsCouponPricerVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.CmsCouponPricerVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.CmsCouponPricerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.CmsCouponPricerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.CmsCouponPricerVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.CmsCouponPricerVector_pop(self)

    def append(self, x):
        return _QuantLib.CmsCouponPricerVector_append(self, x)

    def empty(self):
        return _QuantLib.CmsCouponPricerVector_empty(self)

    def size(self):
        return _QuantLib.CmsCouponPricerVector_size(self)

    def swap(self, v):
        return _QuantLib.CmsCouponPricerVector_swap(self, v)

    def begin(self):
        return _QuantLib.CmsCouponPricerVector_begin(self)

    def end(self):
        return _QuantLib.CmsCouponPricerVector_end(self)

    def rbegin(self):
        return _QuantLib.CmsCouponPricerVector_rbegin(self)

    def rend(self):
        return _QuantLib.CmsCouponPricerVector_rend(self)

    def clear(self):
        return _QuantLib.CmsCouponPricerVector_clear(self)

    def get_allocator(self):
        return _QuantLib.CmsCouponPricerVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.CmsCouponPricerVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.CmsCouponPricerVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_CmsCouponPricerVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.CmsCouponPricerVector_push_back(self, x)

    def front(self):
        return _QuantLib.CmsCouponPricerVector_front(self)

    def back(self):
        return _QuantLib.CmsCouponPricerVector_back(self)

    def assign(self, n, x):
        return _QuantLib.CmsCouponPricerVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.CmsCouponPricerVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.CmsCouponPricerVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.CmsCouponPricerVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.CmsCouponPricerVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_CmsCouponPricerVector
    __del__ = lambda self: None
CmsCouponPricerVector_swigregister = _QuantLib.CmsCouponPricerVector_swigregister
CmsCouponPricerVector_swigregister(CmsCouponPricerVector)

class CmsSpreadCouponPricer(FloatingRateCouponPricer):
    __swig_setmethods__ = {}
    for _s in [FloatingRateCouponPricer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmsSpreadCouponPricer, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatingRateCouponPricer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CmsSpreadCouponPricer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def correlation(self):
        return _QuantLib.CmsSpreadCouponPricer_correlation(self)

    def setCorrelation(self, *args):
        return _QuantLib.CmsSpreadCouponPricer_setCorrelation(self, *args)
    __swig_destroy__ = _QuantLib.delete_CmsSpreadCouponPricer
    __del__ = lambda self: None
CmsSpreadCouponPricer_swigregister = _QuantLib.CmsSpreadCouponPricer_swigregister
CmsSpreadCouponPricer_swigregister(CmsSpreadCouponPricer)

class IborCouponPricer(FloatingRateCouponPricer):
    __swig_setmethods__ = {}
    for _s in [FloatingRateCouponPricer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IborCouponPricer, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatingRateCouponPricer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IborCouponPricer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def capletVolatility(self):
        return _QuantLib.IborCouponPricer_capletVolatility(self)

    def setCapletVolatility(self, *args):
        return _QuantLib.IborCouponPricer_setCapletVolatility(self, *args)
    __swig_destroy__ = _QuantLib.delete_IborCouponPricer
    __del__ = lambda self: None
IborCouponPricer_swigregister = _QuantLib.IborCouponPricer_swigregister
IborCouponPricer_swigregister(IborCouponPricer)

class AnalyticHaganPricer(CmsCouponPricer):
    __swig_setmethods__ = {}
    for _s in [CmsCouponPricer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticHaganPricer, name, value)
    __swig_getmethods__ = {}
    for _s in [CmsCouponPricer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticHaganPricer, name)
    __repr__ = _swig_repr

    def __init__(self, v, model, meanReversion):
        this = _QuantLib.new_AnalyticHaganPricer(v, model, meanReversion)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AnalyticHaganPricer
    __del__ = lambda self: None
AnalyticHaganPricer_swigregister = _QuantLib.AnalyticHaganPricer_swigregister
AnalyticHaganPricer_swigregister(AnalyticHaganPricer)

class NumericHaganPricer(CmsCouponPricer):
    __swig_setmethods__ = {}
    for _s in [CmsCouponPricer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumericHaganPricer, name, value)
    __swig_getmethods__ = {}
    for _s in [CmsCouponPricer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NumericHaganPricer, name)
    __repr__ = _swig_repr

    def __init__(self, v, model, meanReversion, lowerLimit=0.0, upperLimit=1.0, precision=1.0e-6):
        this = _QuantLib.new_NumericHaganPricer(v, model, meanReversion, lowerLimit, upperLimit, precision)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_NumericHaganPricer
    __del__ = lambda self: None
NumericHaganPricer_swigregister = _QuantLib.NumericHaganPricer_swigregister
NumericHaganPricer_swigregister(NumericHaganPricer)

class LinearTsrPricer(CmsCouponPricer):
    __swig_setmethods__ = {}
    for _s in [CmsCouponPricer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearTsrPricer, name, value)
    __swig_getmethods__ = {}
    for _s in [CmsCouponPricer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearTsrPricer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_LinearTsrPricer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_LinearTsrPricer
    __del__ = lambda self: None
LinearTsrPricer_swigregister = _QuantLib.LinearTsrPricer_swigregister
LinearTsrPricer_swigregister(LinearTsrPricer)

class LinearTsrPricerSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearTsrPricerSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LinearTsrPricerSettings, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_LinearTsrPricerSettings()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def withRateBound(self, lowerRateBound=0.0001, upperRateBound=2.0000):
        return _QuantLib.LinearTsrPricerSettings_withRateBound(self, lowerRateBound, upperRateBound)

    def withVegaRatio(self, *args):
        return _QuantLib.LinearTsrPricerSettings_withVegaRatio(self, *args)

    def withPriceThreshold(self, *args):
        return _QuantLib.LinearTsrPricerSettings_withPriceThreshold(self, *args)

    def withBSStdDevs(self, *args):
        return _QuantLib.LinearTsrPricerSettings_withBSStdDevs(self, *args)
    RateBound = _QuantLib.LinearTsrPricerSettings_RateBound
    VegaRatio = _QuantLib.LinearTsrPricerSettings_VegaRatio
    PriceThreshold = _QuantLib.LinearTsrPricerSettings_PriceThreshold
    BSStdDevs = _QuantLib.LinearTsrPricerSettings_BSStdDevs
    __swig_destroy__ = _QuantLib.delete_LinearTsrPricerSettings
    __del__ = lambda self: None
LinearTsrPricerSettings_swigregister = _QuantLib.LinearTsrPricerSettings_swigregister
LinearTsrPricerSettings_swigregister(LinearTsrPricerSettings)

class LognormalCmsSpreadPricer(CmsSpreadCouponPricer):
    __swig_setmethods__ = {}
    for _s in [CmsSpreadCouponPricer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LognormalCmsSpreadPricer, name, value)
    __swig_getmethods__ = {}
    for _s in [CmsSpreadCouponPricer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LognormalCmsSpreadPricer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_LognormalCmsSpreadPricer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def swapletPrice(self):
        return _QuantLib.LognormalCmsSpreadPricer_swapletPrice(self)

    def swapletRate(self):
        return _QuantLib.LognormalCmsSpreadPricer_swapletRate(self)

    def capletPrice(self, effectiveCap):
        return _QuantLib.LognormalCmsSpreadPricer_capletPrice(self, effectiveCap)

    def capletRate(self, effectiveCap):
        return _QuantLib.LognormalCmsSpreadPricer_capletRate(self, effectiveCap)

    def floorletPrice(self, effectiveFloor):
        return _QuantLib.LognormalCmsSpreadPricer_floorletPrice(self, effectiveFloor)

    def floorletRate(self, effectiveFloor):
        return _QuantLib.LognormalCmsSpreadPricer_floorletRate(self, effectiveFloor)
    __swig_destroy__ = _QuantLib.delete_LognormalCmsSpreadPricer
    __del__ = lambda self: None
LognormalCmsSpreadPricer_swigregister = _QuantLib.LognormalCmsSpreadPricer_swigregister
LognormalCmsSpreadPricer_swigregister(LognormalCmsSpreadPricer)

class BlackIborCouponPricer(IborCouponPricer):
    __swig_setmethods__ = {}
    for _s in [IborCouponPricer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackIborCouponPricer, name, value)
    __swig_getmethods__ = {}
    for _s in [IborCouponPricer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlackIborCouponPricer, name)
    __repr__ = _swig_repr
    Black76 = _QuantLib.BlackIborCouponPricer_Black76
    BivariateLognormal = _QuantLib.BlackIborCouponPricer_BivariateLognormal

    def __init__(self, *args):
        this = _QuantLib.new_BlackIborCouponPricer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BlackIborCouponPricer
    __del__ = lambda self: None
BlackIborCouponPricer_swigregister = _QuantLib.BlackIborCouponPricer_swigregister
BlackIborCouponPricer_swigregister(BlackIborCouponPricer)

class SimpleCashFlow(CashFlow):
    __swig_setmethods__ = {}
    for _s in [CashFlow]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleCashFlow, name, value)
    __swig_getmethods__ = {}
    for _s in [CashFlow]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleCashFlow, name)
    __repr__ = _swig_repr

    def __init__(self, amount, date):
        this = _QuantLib.new_SimpleCashFlow(amount, date)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SimpleCashFlow
    __del__ = lambda self: None
SimpleCashFlow_swigregister = _QuantLib.SimpleCashFlow_swigregister
SimpleCashFlow_swigregister(SimpleCashFlow)

class Redemption(CashFlow):
    __swig_setmethods__ = {}
    for _s in [CashFlow]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Redemption, name, value)
    __swig_getmethods__ = {}
    for _s in [CashFlow]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Redemption, name)
    __repr__ = _swig_repr

    def __init__(self, amount, date):
        this = _QuantLib.new_Redemption(amount, date)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Redemption
    __del__ = lambda self: None
Redemption_swigregister = _QuantLib.Redemption_swigregister
Redemption_swigregister(Redemption)

class AmortizingPayment(CashFlow):
    __swig_setmethods__ = {}
    for _s in [CashFlow]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AmortizingPayment, name, value)
    __swig_getmethods__ = {}
    for _s in [CashFlow]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AmortizingPayment, name)
    __repr__ = _swig_repr

    def __init__(self, amount, date):
        this = _QuantLib.new_AmortizingPayment(amount, date)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AmortizingPayment
    __del__ = lambda self: None
AmortizingPayment_swigregister = _QuantLib.AmortizingPayment_swigregister
AmortizingPayment_swigregister(AmortizingPayment)

class IndexedCashFlow(CashFlow):
    __swig_setmethods__ = {}
    for _s in [CashFlow]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexedCashFlow, name, value)
    __swig_getmethods__ = {}
    for _s in [CashFlow]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IndexedCashFlow, name)
    __repr__ = _swig_repr

    def __init__(self, notional, index, baseDate, fixingDate, paymentDate, growthOnly=False):
        this = _QuantLib.new_IndexedCashFlow(notional, index, baseDate, fixingDate, paymentDate, growthOnly)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def notional(self):
        return _QuantLib.IndexedCashFlow_notional(self)

    def baseDate(self):
        return _QuantLib.IndexedCashFlow_baseDate(self)

    def fixingDate(self):
        return _QuantLib.IndexedCashFlow_fixingDate(self)

    def index(self):
        return _QuantLib.IndexedCashFlow_index(self)

    def growthOnly(self):
        return _QuantLib.IndexedCashFlow_growthOnly(self)
    __swig_destroy__ = _QuantLib.delete_IndexedCashFlow
    __del__ = lambda self: None
IndexedCashFlow_swigregister = _QuantLib.IndexedCashFlow_swigregister
IndexedCashFlow_swigregister(IndexedCashFlow)


def as_indexed_cashflow(cf):
    return _QuantLib.as_indexed_cashflow(cf)
as_indexed_cashflow = _QuantLib.as_indexed_cashflow
class Currency(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Currency, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Currency, name)
    __repr__ = _swig_repr

    def name(self):
        return _QuantLib.Currency_name(self)

    def code(self):
        return _QuantLib.Currency_code(self)

    def numericCode(self):
        return _QuantLib.Currency_numericCode(self)

    def symbol(self):
        return _QuantLib.Currency_symbol(self)

    def fractionSymbol(self):
        return _QuantLib.Currency_fractionSymbol(self)

    def fractionsPerUnit(self):
        return _QuantLib.Currency_fractionsPerUnit(self)

    def rounding(self):
        return _QuantLib.Currency_rounding(self)

    def format(self):
        return _QuantLib.Currency_format(self)

    def empty(self):
        return _QuantLib.Currency_empty(self)

    def triangulationCurrency(self):
        return _QuantLib.Currency_triangulationCurrency(self)

    def __str__(self):
        return _QuantLib.Currency___str__(self)

    def __eq__(self, other):
        return _QuantLib.Currency___eq__(self, other)

    def __ne__(self, other):
        return _QuantLib.Currency___ne__(self, other)

    def __mul__(self, x):
        return _QuantLib.Currency___mul__(self, x)

    def __rmul__(self, x):
        return _QuantLib.Currency___rmul__(self, x)

    def __nonzero__(self):
        return _QuantLib.Currency___nonzero__(self)

    def __bool__(self):
        return _QuantLib.Currency___bool__(self)

    def __hash__(self):
        return hash(self.name())


    def __init__(self):
        this = _QuantLib.new_Currency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Currency
    __del__ = lambda self: None
Currency_swigregister = _QuantLib.Currency_swigregister
Currency_swigregister(Currency)

class ARSCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ARSCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ARSCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_ARSCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ARSCurrency
    __del__ = lambda self: None
ARSCurrency_swigregister = _QuantLib.ARSCurrency_swigregister
ARSCurrency_swigregister(ARSCurrency)

class ATSCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ATSCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ATSCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_ATSCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ATSCurrency
    __del__ = lambda self: None
ATSCurrency_swigregister = _QuantLib.ATSCurrency_swigregister
ATSCurrency_swigregister(ATSCurrency)

class AUDCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AUDCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AUDCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_AUDCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AUDCurrency
    __del__ = lambda self: None
AUDCurrency_swigregister = _QuantLib.AUDCurrency_swigregister
AUDCurrency_swigregister(AUDCurrency)

class BDTCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BDTCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BDTCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_BDTCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BDTCurrency
    __del__ = lambda self: None
BDTCurrency_swigregister = _QuantLib.BDTCurrency_swigregister
BDTCurrency_swigregister(BDTCurrency)

class BEFCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BEFCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BEFCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_BEFCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BEFCurrency
    __del__ = lambda self: None
BEFCurrency_swigregister = _QuantLib.BEFCurrency_swigregister
BEFCurrency_swigregister(BEFCurrency)

class BGLCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BGLCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BGLCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_BGLCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BGLCurrency
    __del__ = lambda self: None
BGLCurrency_swigregister = _QuantLib.BGLCurrency_swigregister
BGLCurrency_swigregister(BGLCurrency)

class BRLCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRLCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRLCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_BRLCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BRLCurrency
    __del__ = lambda self: None
BRLCurrency_swigregister = _QuantLib.BRLCurrency_swigregister
BRLCurrency_swigregister(BRLCurrency)

class BYRCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BYRCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BYRCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_BYRCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BYRCurrency
    __del__ = lambda self: None
BYRCurrency_swigregister = _QuantLib.BYRCurrency_swigregister
BYRCurrency_swigregister(BYRCurrency)

class CADCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CADCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CADCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_CADCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CADCurrency
    __del__ = lambda self: None
CADCurrency_swigregister = _QuantLib.CADCurrency_swigregister
CADCurrency_swigregister(CADCurrency)

class CHFCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHFCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CHFCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_CHFCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CHFCurrency
    __del__ = lambda self: None
CHFCurrency_swigregister = _QuantLib.CHFCurrency_swigregister
CHFCurrency_swigregister(CHFCurrency)

class CLPCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLPCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLPCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_CLPCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CLPCurrency
    __del__ = lambda self: None
CLPCurrency_swigregister = _QuantLib.CLPCurrency_swigregister
CLPCurrency_swigregister(CLPCurrency)

class CNYCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNYCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CNYCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_CNYCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CNYCurrency
    __del__ = lambda self: None
CNYCurrency_swigregister = _QuantLib.CNYCurrency_swigregister
CNYCurrency_swigregister(CNYCurrency)

class COPCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COPCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COPCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_COPCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_COPCurrency
    __del__ = lambda self: None
COPCurrency_swigregister = _QuantLib.COPCurrency_swigregister
COPCurrency_swigregister(COPCurrency)

class CYPCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CYPCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CYPCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_CYPCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CYPCurrency
    __del__ = lambda self: None
CYPCurrency_swigregister = _QuantLib.CYPCurrency_swigregister
CYPCurrency_swigregister(CYPCurrency)

class CZKCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CZKCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CZKCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_CZKCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CZKCurrency
    __del__ = lambda self: None
CZKCurrency_swigregister = _QuantLib.CZKCurrency_swigregister
CZKCurrency_swigregister(CZKCurrency)

class DEMCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DEMCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DEMCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_DEMCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_DEMCurrency
    __del__ = lambda self: None
DEMCurrency_swigregister = _QuantLib.DEMCurrency_swigregister
DEMCurrency_swigregister(DEMCurrency)

class DKKCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DKKCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DKKCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_DKKCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_DKKCurrency
    __del__ = lambda self: None
DKKCurrency_swigregister = _QuantLib.DKKCurrency_swigregister
DKKCurrency_swigregister(DKKCurrency)

class EEKCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EEKCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EEKCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_EEKCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EEKCurrency
    __del__ = lambda self: None
EEKCurrency_swigregister = _QuantLib.EEKCurrency_swigregister
EEKCurrency_swigregister(EEKCurrency)

class ESPCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ESPCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ESPCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_ESPCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ESPCurrency
    __del__ = lambda self: None
ESPCurrency_swigregister = _QuantLib.ESPCurrency_swigregister
ESPCurrency_swigregister(ESPCurrency)

class EURCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EURCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EURCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_EURCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EURCurrency
    __del__ = lambda self: None
EURCurrency_swigregister = _QuantLib.EURCurrency_swigregister
EURCurrency_swigregister(EURCurrency)

class FIMCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FIMCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FIMCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_FIMCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FIMCurrency
    __del__ = lambda self: None
FIMCurrency_swigregister = _QuantLib.FIMCurrency_swigregister
FIMCurrency_swigregister(FIMCurrency)

class FRFCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FRFCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FRFCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_FRFCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FRFCurrency
    __del__ = lambda self: None
FRFCurrency_swigregister = _QuantLib.FRFCurrency_swigregister
FRFCurrency_swigregister(FRFCurrency)

class GBPCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GBPCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GBPCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_GBPCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_GBPCurrency
    __del__ = lambda self: None
GBPCurrency_swigregister = _QuantLib.GBPCurrency_swigregister
GBPCurrency_swigregister(GBPCurrency)

class GRDCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GRDCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GRDCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_GRDCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_GRDCurrency
    __del__ = lambda self: None
GRDCurrency_swigregister = _QuantLib.GRDCurrency_swigregister
GRDCurrency_swigregister(GRDCurrency)

class HKDCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HKDCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HKDCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_HKDCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_HKDCurrency
    __del__ = lambda self: None
HKDCurrency_swigregister = _QuantLib.HKDCurrency_swigregister
HKDCurrency_swigregister(HKDCurrency)

class HUFCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HUFCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HUFCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_HUFCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_HUFCurrency
    __del__ = lambda self: None
HUFCurrency_swigregister = _QuantLib.HUFCurrency_swigregister
HUFCurrency_swigregister(HUFCurrency)

class IDRCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDRCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IDRCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_IDRCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_IDRCurrency
    __del__ = lambda self: None
IDRCurrency_swigregister = _QuantLib.IDRCurrency_swigregister
IDRCurrency_swigregister(IDRCurrency)

class IEPCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IEPCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IEPCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_IEPCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_IEPCurrency
    __del__ = lambda self: None
IEPCurrency_swigregister = _QuantLib.IEPCurrency_swigregister
IEPCurrency_swigregister(IEPCurrency)

class ILSCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ILSCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ILSCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_ILSCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ILSCurrency
    __del__ = lambda self: None
ILSCurrency_swigregister = _QuantLib.ILSCurrency_swigregister
ILSCurrency_swigregister(ILSCurrency)

class INRCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, INRCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, INRCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_INRCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_INRCurrency
    __del__ = lambda self: None
INRCurrency_swigregister = _QuantLib.INRCurrency_swigregister
INRCurrency_swigregister(INRCurrency)

class IQDCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IQDCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IQDCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_IQDCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_IQDCurrency
    __del__ = lambda self: None
IQDCurrency_swigregister = _QuantLib.IQDCurrency_swigregister
IQDCurrency_swigregister(IQDCurrency)

class IRRCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IRRCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IRRCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_IRRCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_IRRCurrency
    __del__ = lambda self: None
IRRCurrency_swigregister = _QuantLib.IRRCurrency_swigregister
IRRCurrency_swigregister(IRRCurrency)

class ISKCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISKCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ISKCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_ISKCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ISKCurrency
    __del__ = lambda self: None
ISKCurrency_swigregister = _QuantLib.ISKCurrency_swigregister
ISKCurrency_swigregister(ISKCurrency)

class ITLCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ITLCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ITLCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_ITLCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ITLCurrency
    __del__ = lambda self: None
ITLCurrency_swigregister = _QuantLib.ITLCurrency_swigregister
ITLCurrency_swigregister(ITLCurrency)

class JPYCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JPYCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JPYCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_JPYCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_JPYCurrency
    __del__ = lambda self: None
JPYCurrency_swigregister = _QuantLib.JPYCurrency_swigregister
JPYCurrency_swigregister(JPYCurrency)

class KRWCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KRWCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KRWCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_KRWCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_KRWCurrency
    __del__ = lambda self: None
KRWCurrency_swigregister = _QuantLib.KRWCurrency_swigregister
KRWCurrency_swigregister(KRWCurrency)

class KWDCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KWDCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KWDCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_KWDCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_KWDCurrency
    __del__ = lambda self: None
KWDCurrency_swigregister = _QuantLib.KWDCurrency_swigregister
KWDCurrency_swigregister(KWDCurrency)

class LTLCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LTLCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LTLCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_LTLCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_LTLCurrency
    __del__ = lambda self: None
LTLCurrency_swigregister = _QuantLib.LTLCurrency_swigregister
LTLCurrency_swigregister(LTLCurrency)

class LUFCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LUFCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LUFCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_LUFCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_LUFCurrency
    __del__ = lambda self: None
LUFCurrency_swigregister = _QuantLib.LUFCurrency_swigregister
LUFCurrency_swigregister(LUFCurrency)

class LVLCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LVLCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LVLCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_LVLCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_LVLCurrency
    __del__ = lambda self: None
LVLCurrency_swigregister = _QuantLib.LVLCurrency_swigregister
LVLCurrency_swigregister(LVLCurrency)

class MTLCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MTLCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MTLCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_MTLCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MTLCurrency
    __del__ = lambda self: None
MTLCurrency_swigregister = _QuantLib.MTLCurrency_swigregister
MTLCurrency_swigregister(MTLCurrency)

class MXNCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MXNCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MXNCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_MXNCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MXNCurrency
    __del__ = lambda self: None
MXNCurrency_swigregister = _QuantLib.MXNCurrency_swigregister
MXNCurrency_swigregister(MXNCurrency)

class MYRCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MYRCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MYRCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_MYRCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MYRCurrency
    __del__ = lambda self: None
MYRCurrency_swigregister = _QuantLib.MYRCurrency_swigregister
MYRCurrency_swigregister(MYRCurrency)

class NLGCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NLGCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NLGCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_NLGCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_NLGCurrency
    __del__ = lambda self: None
NLGCurrency_swigregister = _QuantLib.NLGCurrency_swigregister
NLGCurrency_swigregister(NLGCurrency)

class NOKCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NOKCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NOKCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_NOKCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_NOKCurrency
    __del__ = lambda self: None
NOKCurrency_swigregister = _QuantLib.NOKCurrency_swigregister
NOKCurrency_swigregister(NOKCurrency)

class NPRCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NPRCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NPRCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_NPRCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_NPRCurrency
    __del__ = lambda self: None
NPRCurrency_swigregister = _QuantLib.NPRCurrency_swigregister
NPRCurrency_swigregister(NPRCurrency)

class NZDCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NZDCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NZDCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_NZDCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_NZDCurrency
    __del__ = lambda self: None
NZDCurrency_swigregister = _QuantLib.NZDCurrency_swigregister
NZDCurrency_swigregister(NZDCurrency)

class PEHCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PEHCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PEHCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_PEHCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_PEHCurrency
    __del__ = lambda self: None
PEHCurrency_swigregister = _QuantLib.PEHCurrency_swigregister
PEHCurrency_swigregister(PEHCurrency)

class PEICurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PEICurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PEICurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_PEICurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_PEICurrency
    __del__ = lambda self: None
PEICurrency_swigregister = _QuantLib.PEICurrency_swigregister
PEICurrency_swigregister(PEICurrency)

class PENCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PENCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PENCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_PENCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_PENCurrency
    __del__ = lambda self: None
PENCurrency_swigregister = _QuantLib.PENCurrency_swigregister
PENCurrency_swigregister(PENCurrency)

class PKRCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PKRCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PKRCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_PKRCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_PKRCurrency
    __del__ = lambda self: None
PKRCurrency_swigregister = _QuantLib.PKRCurrency_swigregister
PKRCurrency_swigregister(PKRCurrency)

class PLNCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLNCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PLNCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_PLNCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_PLNCurrency
    __del__ = lambda self: None
PLNCurrency_swigregister = _QuantLib.PLNCurrency_swigregister
PLNCurrency_swigregister(PLNCurrency)

class PTECurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PTECurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PTECurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_PTECurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_PTECurrency
    __del__ = lambda self: None
PTECurrency_swigregister = _QuantLib.PTECurrency_swigregister
PTECurrency_swigregister(PTECurrency)

class ROLCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ROLCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ROLCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_ROLCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ROLCurrency
    __del__ = lambda self: None
ROLCurrency_swigregister = _QuantLib.ROLCurrency_swigregister
ROLCurrency_swigregister(ROLCurrency)

class RONCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RONCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RONCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_RONCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_RONCurrency
    __del__ = lambda self: None
RONCurrency_swigregister = _QuantLib.RONCurrency_swigregister
RONCurrency_swigregister(RONCurrency)

class RUBCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RUBCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RUBCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_RUBCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_RUBCurrency
    __del__ = lambda self: None
RUBCurrency_swigregister = _QuantLib.RUBCurrency_swigregister
RUBCurrency_swigregister(RUBCurrency)

class SARCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SARCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SARCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_SARCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SARCurrency
    __del__ = lambda self: None
SARCurrency_swigregister = _QuantLib.SARCurrency_swigregister
SARCurrency_swigregister(SARCurrency)

class SEKCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SEKCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SEKCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_SEKCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SEKCurrency
    __del__ = lambda self: None
SEKCurrency_swigregister = _QuantLib.SEKCurrency_swigregister
SEKCurrency_swigregister(SEKCurrency)

class SGDCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGDCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SGDCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_SGDCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SGDCurrency
    __del__ = lambda self: None
SGDCurrency_swigregister = _QuantLib.SGDCurrency_swigregister
SGDCurrency_swigregister(SGDCurrency)

class SITCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SITCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SITCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_SITCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SITCurrency
    __del__ = lambda self: None
SITCurrency_swigregister = _QuantLib.SITCurrency_swigregister
SITCurrency_swigregister(SITCurrency)

class SKKCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SKKCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SKKCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_SKKCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SKKCurrency
    __del__ = lambda self: None
SKKCurrency_swigregister = _QuantLib.SKKCurrency_swigregister
SKKCurrency_swigregister(SKKCurrency)

class THBCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, THBCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, THBCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_THBCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_THBCurrency
    __del__ = lambda self: None
THBCurrency_swigregister = _QuantLib.THBCurrency_swigregister
THBCurrency_swigregister(THBCurrency)

class TRLCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRLCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TRLCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_TRLCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_TRLCurrency
    __del__ = lambda self: None
TRLCurrency_swigregister = _QuantLib.TRLCurrency_swigregister
TRLCurrency_swigregister(TRLCurrency)

class TRYCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRYCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TRYCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_TRYCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_TRYCurrency
    __del__ = lambda self: None
TRYCurrency_swigregister = _QuantLib.TRYCurrency_swigregister
TRYCurrency_swigregister(TRYCurrency)

class TTDCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TTDCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TTDCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_TTDCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_TTDCurrency
    __del__ = lambda self: None
TTDCurrency_swigregister = _QuantLib.TTDCurrency_swigregister
TTDCurrency_swigregister(TTDCurrency)

class TWDCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TWDCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TWDCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_TWDCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_TWDCurrency
    __del__ = lambda self: None
TWDCurrency_swigregister = _QuantLib.TWDCurrency_swigregister
TWDCurrency_swigregister(TWDCurrency)

class USDCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, USDCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, USDCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_USDCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_USDCurrency
    __del__ = lambda self: None
USDCurrency_swigregister = _QuantLib.USDCurrency_swigregister
USDCurrency_swigregister(USDCurrency)

class VEBCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VEBCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VEBCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_VEBCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_VEBCurrency
    __del__ = lambda self: None
VEBCurrency_swigregister = _QuantLib.VEBCurrency_swigregister
VEBCurrency_swigregister(VEBCurrency)

class VNDCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VNDCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VNDCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_VNDCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_VNDCurrency
    __del__ = lambda self: None
VNDCurrency_swigregister = _QuantLib.VNDCurrency_swigregister
VNDCurrency_swigregister(VNDCurrency)

class ZARCurrency(Currency):
    __swig_setmethods__ = {}
    for _s in [Currency]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZARCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [Currency]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZARCurrency, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_ZARCurrency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ZARCurrency
    __del__ = lambda self: None
ZARCurrency_swigregister = _QuantLib.ZARCurrency_swigregister
ZARCurrency_swigregister(ZARCurrency)

class DayCounter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DayCounter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DayCounter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def dayCount(self, d1, d2):
        return _QuantLib.DayCounter_dayCount(self, d1, d2)

    def yearFraction(self, *args):
        return _QuantLib.DayCounter_yearFraction(self, *args)

    def name(self):
        return _QuantLib.DayCounter_name(self)

    def __str__(self):
        return _QuantLib.DayCounter___str__(self)

    def __eq__(self, other):
        return _QuantLib.DayCounter___eq__(self, other)

    def __ne__(self, other):
        return _QuantLib.DayCounter___ne__(self, other)

    def __hash__(self):
        return hash(self.name())

    __swig_destroy__ = _QuantLib.delete_DayCounter
    __del__ = lambda self: None
DayCounter_swigregister = _QuantLib.DayCounter_swigregister
DayCounter_swigregister(DayCounter)

class Actual360(DayCounter):
    __swig_setmethods__ = {}
    for _s in [DayCounter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Actual360, name, value)
    __swig_getmethods__ = {}
    for _s in [DayCounter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Actual360, name)
    __repr__ = _swig_repr

    def __init__(self, includeLastDay=False):
        this = _QuantLib.new_Actual360(includeLastDay)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Actual360
    __del__ = lambda self: None
Actual360_swigregister = _QuantLib.Actual360_swigregister
Actual360_swigregister(Actual360)

class Actual364(DayCounter):
    __swig_setmethods__ = {}
    for _s in [DayCounter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Actual364, name, value)
    __swig_getmethods__ = {}
    for _s in [DayCounter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Actual364, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_Actual364()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Actual364
    __del__ = lambda self: None
Actual364_swigregister = _QuantLib.Actual364_swigregister
Actual364_swigregister(Actual364)

class Actual365Fixed(DayCounter):
    __swig_setmethods__ = {}
    for _s in [DayCounter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Actual365Fixed, name, value)
    __swig_getmethods__ = {}
    for _s in [DayCounter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Actual365Fixed, name)
    __repr__ = _swig_repr
    Standard = _QuantLib.Actual365Fixed_Standard
    Canadian = _QuantLib.Actual365Fixed_Canadian
    NoLeap = _QuantLib.Actual365Fixed_NoLeap

    def __init__(self, *args):
        this = _QuantLib.new_Actual365Fixed(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Actual365Fixed
    __del__ = lambda self: None
Actual365Fixed_swigregister = _QuantLib.Actual365Fixed_swigregister
Actual365Fixed_swigregister(Actual365Fixed)

class Thirty360(DayCounter):
    __swig_setmethods__ = {}
    for _s in [DayCounter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Thirty360, name, value)
    __swig_getmethods__ = {}
    for _s in [DayCounter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Thirty360, name)
    __repr__ = _swig_repr
    USA = _QuantLib.Thirty360_USA
    BondBasis = _QuantLib.Thirty360_BondBasis
    European = _QuantLib.Thirty360_European
    EurobondBasis = _QuantLib.Thirty360_EurobondBasis
    Italian = _QuantLib.Thirty360_Italian

    def __init__(self, *args):
        this = _QuantLib.new_Thirty360(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Thirty360
    __del__ = lambda self: None
Thirty360_swigregister = _QuantLib.Thirty360_swigregister
Thirty360_swigregister(Thirty360)

class Thirty365(DayCounter):
    __swig_setmethods__ = {}
    for _s in [DayCounter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Thirty365, name, value)
    __swig_getmethods__ = {}
    for _s in [DayCounter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Thirty365, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_Thirty365()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Thirty365
    __del__ = lambda self: None
Thirty365_swigregister = _QuantLib.Thirty365_swigregister
Thirty365_swigregister(Thirty365)

class ActualActual(DayCounter):
    __swig_setmethods__ = {}
    for _s in [DayCounter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActualActual, name, value)
    __swig_getmethods__ = {}
    for _s in [DayCounter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ActualActual, name)
    __repr__ = _swig_repr
    ISMA = _QuantLib.ActualActual_ISMA
    Bond = _QuantLib.ActualActual_Bond
    ISDA = _QuantLib.ActualActual_ISDA
    Historical = _QuantLib.ActualActual_Historical
    Actual365 = _QuantLib.ActualActual_Actual365
    AFB = _QuantLib.ActualActual_AFB
    Euro = _QuantLib.ActualActual_Euro

    def __init__(self, *args):
        this = _QuantLib.new_ActualActual(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ActualActual
    __del__ = lambda self: None
ActualActual_swigregister = _QuantLib.ActualActual_swigregister
ActualActual_swigregister(ActualActual)

class OneDayCounter(DayCounter):
    __swig_setmethods__ = {}
    for _s in [DayCounter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OneDayCounter, name, value)
    __swig_getmethods__ = {}
    for _s in [DayCounter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OneDayCounter, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_OneDayCounter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_OneDayCounter
    __del__ = lambda self: None
OneDayCounter_swigregister = _QuantLib.OneDayCounter_swigregister
OneDayCounter_swigregister(OneDayCounter)

class SimpleDayCounter(DayCounter):
    __swig_setmethods__ = {}
    for _s in [DayCounter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleDayCounter, name, value)
    __swig_getmethods__ = {}
    for _s in [DayCounter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleDayCounter, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_SimpleDayCounter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SimpleDayCounter
    __del__ = lambda self: None
SimpleDayCounter_swigregister = _QuantLib.SimpleDayCounter_swigregister
SimpleDayCounter_swigregister(SimpleDayCounter)

class Business252(DayCounter):
    __swig_setmethods__ = {}
    for _s in [DayCounter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Business252, name, value)
    __swig_getmethods__ = {}
    for _s in [DayCounter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Business252, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Business252(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Business252
    __del__ = lambda self: None
Business252_swigregister = _QuantLib.Business252_swigregister
Business252_swigregister(Business252)

class SpreadCdsHelper(DefaultProbabilityHelper):
    __swig_setmethods__ = {}
    for _s in [DefaultProbabilityHelper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpreadCdsHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [DefaultProbabilityHelper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpreadCdsHelper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_SpreadCdsHelper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SpreadCdsHelper
    __del__ = lambda self: None
SpreadCdsHelper_swigregister = _QuantLib.SpreadCdsHelper_swigregister
SpreadCdsHelper_swigregister(SpreadCdsHelper)

class UpfrontCdsHelper(DefaultProbabilityHelper):
    __swig_setmethods__ = {}
    for _s in [DefaultProbabilityHelper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpfrontCdsHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [DefaultProbabilityHelper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpfrontCdsHelper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_UpfrontCdsHelper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_UpfrontCdsHelper
    __del__ = lambda self: None
UpfrontCdsHelper_swigregister = _QuantLib.UpfrontCdsHelper_swigregister
UpfrontCdsHelper_swigregister(UpfrontCdsHelper)

class BinomialDistribution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialDistribution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialDistribution, name)
    __repr__ = _swig_repr

    def __init__(self, p, n):
        this = _QuantLib.new_BinomialDistribution(p, n)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, k):
        return _QuantLib.BinomialDistribution___call__(self, k)
    __swig_destroy__ = _QuantLib.delete_BinomialDistribution
    __del__ = lambda self: None
BinomialDistribution_swigregister = _QuantLib.BinomialDistribution_swigregister
BinomialDistribution_swigregister(BinomialDistribution)

class BivariateCumulativeNormalDistribution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BivariateCumulativeNormalDistribution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BivariateCumulativeNormalDistribution, name)
    __repr__ = _swig_repr

    def __init__(self, rho):
        this = _QuantLib.new_BivariateCumulativeNormalDistribution(rho)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x, y):
        return _QuantLib.BivariateCumulativeNormalDistribution___call__(self, x, y)
    __swig_destroy__ = _QuantLib.delete_BivariateCumulativeNormalDistribution
    __del__ = lambda self: None
BivariateCumulativeNormalDistribution_swigregister = _QuantLib.BivariateCumulativeNormalDistribution_swigregister
BivariateCumulativeNormalDistribution_swigregister(BivariateCumulativeNormalDistribution)

class BivariateCumulativeNormalDistributionDr78(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BivariateCumulativeNormalDistributionDr78, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BivariateCumulativeNormalDistributionDr78, name)
    __repr__ = _swig_repr

    def __init__(self, rho):
        this = _QuantLib.new_BivariateCumulativeNormalDistributionDr78(rho)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, a, b):
        return _QuantLib.BivariateCumulativeNormalDistributionDr78___call__(self, a, b)
    __swig_destroy__ = _QuantLib.delete_BivariateCumulativeNormalDistributionDr78
    __del__ = lambda self: None
BivariateCumulativeNormalDistributionDr78_swigregister = _QuantLib.BivariateCumulativeNormalDistributionDr78_swigregister
BivariateCumulativeNormalDistributionDr78_swigregister(BivariateCumulativeNormalDistributionDr78)

class BivariateCumulativeNormalDistributionWe04DP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BivariateCumulativeNormalDistributionWe04DP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BivariateCumulativeNormalDistributionWe04DP, name)
    __repr__ = _swig_repr

    def __init__(self, rho):
        this = _QuantLib.new_BivariateCumulativeNormalDistributionWe04DP(rho)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, a, b):
        return _QuantLib.BivariateCumulativeNormalDistributionWe04DP___call__(self, a, b)
    __swig_destroy__ = _QuantLib.delete_BivariateCumulativeNormalDistributionWe04DP
    __del__ = lambda self: None
BivariateCumulativeNormalDistributionWe04DP_swigregister = _QuantLib.BivariateCumulativeNormalDistributionWe04DP_swigregister
BivariateCumulativeNormalDistributionWe04DP_swigregister(BivariateCumulativeNormalDistributionWe04DP)

class CumulativeBinomialDistribution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CumulativeBinomialDistribution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CumulativeBinomialDistribution, name)
    __repr__ = _swig_repr

    def __init__(self, p, n):
        this = _QuantLib.new_CumulativeBinomialDistribution(p, n)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, k):
        return _QuantLib.CumulativeBinomialDistribution___call__(self, k)
    __swig_destroy__ = _QuantLib.delete_CumulativeBinomialDistribution
    __del__ = lambda self: None
CumulativeBinomialDistribution_swigregister = _QuantLib.CumulativeBinomialDistribution_swigregister
CumulativeBinomialDistribution_swigregister(CumulativeBinomialDistribution)

class CumulativeChiSquareDistribution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CumulativeChiSquareDistribution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CumulativeChiSquareDistribution, name)
    __repr__ = _swig_repr

    def __init__(self, df):
        this = _QuantLib.new_CumulativeChiSquareDistribution(df)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x):
        return _QuantLib.CumulativeChiSquareDistribution___call__(self, x)
    __swig_destroy__ = _QuantLib.delete_CumulativeChiSquareDistribution
    __del__ = lambda self: None
CumulativeChiSquareDistribution_swigregister = _QuantLib.CumulativeChiSquareDistribution_swigregister
CumulativeChiSquareDistribution_swigregister(CumulativeChiSquareDistribution)

class CumulativeGammaDistribution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CumulativeGammaDistribution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CumulativeGammaDistribution, name)
    __repr__ = _swig_repr

    def __init__(self, a):
        this = _QuantLib.new_CumulativeGammaDistribution(a)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x):
        return _QuantLib.CumulativeGammaDistribution___call__(self, x)
    __swig_destroy__ = _QuantLib.delete_CumulativeGammaDistribution
    __del__ = lambda self: None
CumulativeGammaDistribution_swigregister = _QuantLib.CumulativeGammaDistribution_swigregister
CumulativeGammaDistribution_swigregister(CumulativeGammaDistribution)

class CumulativeNormalDistribution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CumulativeNormalDistribution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CumulativeNormalDistribution, name)
    __repr__ = _swig_repr

    def __init__(self, average=0.0, sigma=1.0):
        this = _QuantLib.new_CumulativeNormalDistribution(average, sigma)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x):
        return _QuantLib.CumulativeNormalDistribution___call__(self, x)

    def derivative(self, x):
        return _QuantLib.CumulativeNormalDistribution_derivative(self, x)
    __swig_destroy__ = _QuantLib.delete_CumulativeNormalDistribution
    __del__ = lambda self: None
CumulativeNormalDistribution_swigregister = _QuantLib.CumulativeNormalDistribution_swigregister
CumulativeNormalDistribution_swigregister(CumulativeNormalDistribution)

class CumulativePoissonDistribution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CumulativePoissonDistribution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CumulativePoissonDistribution, name)
    __repr__ = _swig_repr

    def __init__(self, mu):
        this = _QuantLib.new_CumulativePoissonDistribution(mu)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, k):
        return _QuantLib.CumulativePoissonDistribution___call__(self, k)
    __swig_destroy__ = _QuantLib.delete_CumulativePoissonDistribution
    __del__ = lambda self: None
CumulativePoissonDistribution_swigregister = _QuantLib.CumulativePoissonDistribution_swigregister
CumulativePoissonDistribution_swigregister(CumulativePoissonDistribution)

class CumulativeStudentDistribution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CumulativeStudentDistribution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CumulativeStudentDistribution, name)
    __repr__ = _swig_repr

    def __init__(self, n):
        this = _QuantLib.new_CumulativeStudentDistribution(n)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x):
        return _QuantLib.CumulativeStudentDistribution___call__(self, x)
    __swig_destroy__ = _QuantLib.delete_CumulativeStudentDistribution
    __del__ = lambda self: None
CumulativeStudentDistribution_swigregister = _QuantLib.CumulativeStudentDistribution_swigregister
CumulativeStudentDistribution_swigregister(CumulativeStudentDistribution)

class GammaFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GammaFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GammaFunction, name)
    __repr__ = _swig_repr

    def logValue(self, x):
        return _QuantLib.GammaFunction_logValue(self, x)

    def __init__(self):
        this = _QuantLib.new_GammaFunction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_GammaFunction
    __del__ = lambda self: None
GammaFunction_swigregister = _QuantLib.GammaFunction_swigregister
GammaFunction_swigregister(GammaFunction)

class InverseCumulativePoisson(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InverseCumulativePoisson, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InverseCumulativePoisson, name)
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _QuantLib.new_InverseCumulativePoisson(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x):
        return _QuantLib.InverseCumulativePoisson___call__(self, x)
    __swig_destroy__ = _QuantLib.delete_InverseCumulativePoisson
    __del__ = lambda self: None
InverseCumulativePoisson_swigregister = _QuantLib.InverseCumulativePoisson_swigregister
InverseCumulativePoisson_swigregister(InverseCumulativePoisson)

class InverseCumulativeNormal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InverseCumulativeNormal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InverseCumulativeNormal, name)
    __repr__ = _swig_repr

    def __init__(self, average=0.0, sigma=1.0):
        this = _QuantLib.new_InverseCumulativeNormal(average, sigma)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x):
        return _QuantLib.InverseCumulativeNormal___call__(self, x)
    __swig_destroy__ = _QuantLib.delete_InverseCumulativeNormal
    __del__ = lambda self: None
InverseCumulativeNormal_swigregister = _QuantLib.InverseCumulativeNormal_swigregister
InverseCumulativeNormal_swigregister(InverseCumulativeNormal)

class InverseCumulativeStudent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InverseCumulativeStudent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InverseCumulativeStudent, name)
    __repr__ = _swig_repr

    def __init__(self, n, accuracy=1e-6, maxIterations=50):
        this = _QuantLib.new_InverseCumulativeStudent(n, accuracy, maxIterations)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x):
        return _QuantLib.InverseCumulativeStudent___call__(self, x)
    __swig_destroy__ = _QuantLib.delete_InverseCumulativeStudent
    __del__ = lambda self: None
InverseCumulativeStudent_swigregister = _QuantLib.InverseCumulativeStudent_swigregister
InverseCumulativeStudent_swigregister(InverseCumulativeStudent)

class InverseNonCentralCumulativeChiSquareDistribution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InverseNonCentralCumulativeChiSquareDistribution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InverseNonCentralCumulativeChiSquareDistribution, name)
    __repr__ = _swig_repr

    def __init__(self, df, ncp, maxEvaluations=10, accuracy=1e-8):
        this = _QuantLib.new_InverseNonCentralCumulativeChiSquareDistribution(df, ncp, maxEvaluations, accuracy)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x):
        return _QuantLib.InverseNonCentralCumulativeChiSquareDistribution___call__(self, x)
    __swig_destroy__ = _QuantLib.delete_InverseNonCentralCumulativeChiSquareDistribution
    __del__ = lambda self: None
InverseNonCentralCumulativeChiSquareDistribution_swigregister = _QuantLib.InverseNonCentralCumulativeChiSquareDistribution_swigregister
InverseNonCentralCumulativeChiSquareDistribution_swigregister(InverseNonCentralCumulativeChiSquareDistribution)

class MoroInverseCumulativeNormal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MoroInverseCumulativeNormal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MoroInverseCumulativeNormal, name)
    __repr__ = _swig_repr

    def __init__(self, average=0.0, sigma=1.0):
        this = _QuantLib.new_MoroInverseCumulativeNormal(average, sigma)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x):
        return _QuantLib.MoroInverseCumulativeNormal___call__(self, x)
    __swig_destroy__ = _QuantLib.delete_MoroInverseCumulativeNormal
    __del__ = lambda self: None
MoroInverseCumulativeNormal_swigregister = _QuantLib.MoroInverseCumulativeNormal_swigregister
MoroInverseCumulativeNormal_swigregister(MoroInverseCumulativeNormal)

class NonCentralCumulativeChiSquareDistribution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NonCentralCumulativeChiSquareDistribution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NonCentralCumulativeChiSquareDistribution, name)
    __repr__ = _swig_repr

    def __init__(self, df, ncp):
        this = _QuantLib.new_NonCentralCumulativeChiSquareDistribution(df, ncp)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x):
        return _QuantLib.NonCentralCumulativeChiSquareDistribution___call__(self, x)
    __swig_destroy__ = _QuantLib.delete_NonCentralCumulativeChiSquareDistribution
    __del__ = lambda self: None
NonCentralCumulativeChiSquareDistribution_swigregister = _QuantLib.NonCentralCumulativeChiSquareDistribution_swigregister
NonCentralCumulativeChiSquareDistribution_swigregister(NonCentralCumulativeChiSquareDistribution)

class NormalDistribution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NormalDistribution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NormalDistribution, name)
    __repr__ = _swig_repr

    def __init__(self, average=0.0, sigma=1.0):
        this = _QuantLib.new_NormalDistribution(average, sigma)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x):
        return _QuantLib.NormalDistribution___call__(self, x)

    def derivative(self, x):
        return _QuantLib.NormalDistribution_derivative(self, x)
    __swig_destroy__ = _QuantLib.delete_NormalDistribution
    __del__ = lambda self: None
NormalDistribution_swigregister = _QuantLib.NormalDistribution_swigregister
NormalDistribution_swigregister(NormalDistribution)

class PoissonDistribution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoissonDistribution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PoissonDistribution, name)
    __repr__ = _swig_repr

    def __init__(self, mu):
        this = _QuantLib.new_PoissonDistribution(mu)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, k):
        return _QuantLib.PoissonDistribution___call__(self, k)
    __swig_destroy__ = _QuantLib.delete_PoissonDistribution
    __del__ = lambda self: None
PoissonDistribution_swigregister = _QuantLib.PoissonDistribution_swigregister
PoissonDistribution_swigregister(PoissonDistribution)

class StudentDistribution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StudentDistribution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StudentDistribution, name)
    __repr__ = _swig_repr

    def __init__(self, n):
        this = _QuantLib.new_StudentDistribution(n)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x):
        return _QuantLib.StudentDistribution___call__(self, x)
    __swig_destroy__ = _QuantLib.delete_StudentDistribution
    __del__ = lambda self: None
StudentDistribution_swigregister = _QuantLib.StudentDistribution_swigregister
StudentDistribution_swigregister(StudentDistribution)

class AnalyticContinuousGeometricAveragePriceAsianEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticContinuousGeometricAveragePriceAsianEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticContinuousGeometricAveragePriceAsianEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process):
        this = _QuantLib.new_AnalyticContinuousGeometricAveragePriceAsianEngine(process)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AnalyticContinuousGeometricAveragePriceAsianEngine
    __del__ = lambda self: None
AnalyticContinuousGeometricAveragePriceAsianEngine_swigregister = _QuantLib.AnalyticContinuousGeometricAveragePriceAsianEngine_swigregister
AnalyticContinuousGeometricAveragePriceAsianEngine_swigregister(AnalyticContinuousGeometricAveragePriceAsianEngine)

class AnalyticContinuousGeometricAveragePriceAsianHestonEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticContinuousGeometricAveragePriceAsianHestonEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticContinuousGeometricAveragePriceAsianHestonEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process, summationCutoff=50, xiRightLimit=100.0):
        this = _QuantLib.new_AnalyticContinuousGeometricAveragePriceAsianHestonEngine(process, summationCutoff, xiRightLimit)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AnalyticContinuousGeometricAveragePriceAsianHestonEngine
    __del__ = lambda self: None
AnalyticContinuousGeometricAveragePriceAsianHestonEngine_swigregister = _QuantLib.AnalyticContinuousGeometricAveragePriceAsianHestonEngine_swigregister
AnalyticContinuousGeometricAveragePriceAsianHestonEngine_swigregister(AnalyticContinuousGeometricAveragePriceAsianHestonEngine)

class ContinuousArithmeticAsianLevyEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContinuousArithmeticAsianLevyEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContinuousArithmeticAsianLevyEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process, runningAverage, startDate):
        this = _QuantLib.new_ContinuousArithmeticAsianLevyEngine(process, runningAverage, startDate)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ContinuousArithmeticAsianLevyEngine
    __del__ = lambda self: None
ContinuousArithmeticAsianLevyEngine_swigregister = _QuantLib.ContinuousArithmeticAsianLevyEngine_swigregister
ContinuousArithmeticAsianLevyEngine_swigregister(ContinuousArithmeticAsianLevyEngine)

class ContinuousArithmeticAsianVecerEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContinuousArithmeticAsianVecerEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContinuousArithmeticAsianVecerEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process, currentAverage, startDate, timeSteps=100, assetSteps=100, z_min=-1.0, z_max=1.0):
        this = _QuantLib.new_ContinuousArithmeticAsianVecerEngine(process, currentAverage, startDate, timeSteps, assetSteps, z_min, z_max)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ContinuousArithmeticAsianVecerEngine
    __del__ = lambda self: None
ContinuousArithmeticAsianVecerEngine_swigregister = _QuantLib.ContinuousArithmeticAsianVecerEngine_swigregister
ContinuousArithmeticAsianVecerEngine_swigregister(ContinuousArithmeticAsianVecerEngine)

class AnalyticDiscreteGeometricAveragePriceAsianEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticDiscreteGeometricAveragePriceAsianEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticDiscreteGeometricAveragePriceAsianEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process):
        this = _QuantLib.new_AnalyticDiscreteGeometricAveragePriceAsianEngine(process)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AnalyticDiscreteGeometricAveragePriceAsianEngine
    __del__ = lambda self: None
AnalyticDiscreteGeometricAveragePriceAsianEngine_swigregister = _QuantLib.AnalyticDiscreteGeometricAveragePriceAsianEngine_swigregister
AnalyticDiscreteGeometricAveragePriceAsianEngine_swigregister(AnalyticDiscreteGeometricAveragePriceAsianEngine)

class AnalyticDiscreteGeometricAveragePriceAsianHestonEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticDiscreteGeometricAveragePriceAsianHestonEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticDiscreteGeometricAveragePriceAsianHestonEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process, xiRightLimit=100.0):
        this = _QuantLib.new_AnalyticDiscreteGeometricAveragePriceAsianHestonEngine(process, xiRightLimit)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AnalyticDiscreteGeometricAveragePriceAsianHestonEngine
    __del__ = lambda self: None
AnalyticDiscreteGeometricAveragePriceAsianHestonEngine_swigregister = _QuantLib.AnalyticDiscreteGeometricAveragePriceAsianHestonEngine_swigregister
AnalyticDiscreteGeometricAveragePriceAsianHestonEngine_swigregister(AnalyticDiscreteGeometricAveragePriceAsianHestonEngine)

class AnalyticDiscreteGeometricAverageStrikeAsianEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticDiscreteGeometricAverageStrikeAsianEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticDiscreteGeometricAverageStrikeAsianEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process):
        this = _QuantLib.new_AnalyticDiscreteGeometricAverageStrikeAsianEngine(process)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AnalyticDiscreteGeometricAverageStrikeAsianEngine
    __del__ = lambda self: None
AnalyticDiscreteGeometricAverageStrikeAsianEngine_swigregister = _QuantLib.AnalyticDiscreteGeometricAverageStrikeAsianEngine_swigregister
AnalyticDiscreteGeometricAverageStrikeAsianEngine_swigregister(AnalyticDiscreteGeometricAverageStrikeAsianEngine)

class MCPRDiscreteArithmeticAPEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCPRDiscreteArithmeticAPEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCPRDiscreteArithmeticAPEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCPRDiscreteArithmeticAPEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCPRDiscreteArithmeticAPEngine
    __del__ = lambda self: None
MCPRDiscreteArithmeticAPEngine_swigregister = _QuantLib.MCPRDiscreteArithmeticAPEngine_swigregister
MCPRDiscreteArithmeticAPEngine_swigregister(MCPRDiscreteArithmeticAPEngine)

class MCLDDiscreteArithmeticAPEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCLDDiscreteArithmeticAPEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCLDDiscreteArithmeticAPEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCLDDiscreteArithmeticAPEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCLDDiscreteArithmeticAPEngine
    __del__ = lambda self: None
MCLDDiscreteArithmeticAPEngine_swigregister = _QuantLib.MCLDDiscreteArithmeticAPEngine_swigregister
MCLDDiscreteArithmeticAPEngine_swigregister(MCLDDiscreteArithmeticAPEngine)


def MCDiscreteArithmeticAPEngine(
        process,
        traits,
        brownianBridge=True,
        antitheticVariate=False,
        controlVariate=False,
        requiredSamples=None,
        requiredTolerance=None,
        maxSamples=None,
        seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRDiscreteArithmeticAPEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDDiscreteArithmeticAPEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(
        process,
        brownianBridge,
        antitheticVariate,
        controlVariate,
        requiredSamples,
        requiredTolerance,
        maxSamples,
        seed)

class MCPRDiscreteArithmeticAPHestonEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCPRDiscreteArithmeticAPHestonEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCPRDiscreteArithmeticAPHestonEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCPRDiscreteArithmeticAPHestonEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCPRDiscreteArithmeticAPHestonEngine
    __del__ = lambda self: None
MCPRDiscreteArithmeticAPHestonEngine_swigregister = _QuantLib.MCPRDiscreteArithmeticAPHestonEngine_swigregister
MCPRDiscreteArithmeticAPHestonEngine_swigregister(MCPRDiscreteArithmeticAPHestonEngine)

class MCLDDiscreteArithmeticAPHestonEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCLDDiscreteArithmeticAPHestonEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCLDDiscreteArithmeticAPHestonEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCLDDiscreteArithmeticAPHestonEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCLDDiscreteArithmeticAPHestonEngine
    __del__ = lambda self: None
MCLDDiscreteArithmeticAPHestonEngine_swigregister = _QuantLib.MCLDDiscreteArithmeticAPHestonEngine_swigregister
MCLDDiscreteArithmeticAPHestonEngine_swigregister(MCLDDiscreteArithmeticAPHestonEngine)


def MCDiscreteArithmeticAPHestonEngine(
        process,
        traits,
        antitheticVariate=False,
        requiredSamples=None,
        requiredTolerance=None,
        maxSamples=None,
        seed=0,
        timeSteps=None,
        timeStepsPerYear=None,
        controlVariate=False):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRDiscreteArithmeticAPHestonEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDDiscreteArithmeticAPHestonEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(
        process,
        antitheticVariate,
        requiredSamples,
        requiredTolerance,
        maxSamples,
        seed,
        timeSteps,
        timeStepsPerYear,
        controlVariate)

class MCPRDiscreteArithmeticASEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCPRDiscreteArithmeticASEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCPRDiscreteArithmeticASEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCPRDiscreteArithmeticASEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCPRDiscreteArithmeticASEngine
    __del__ = lambda self: None
MCPRDiscreteArithmeticASEngine_swigregister = _QuantLib.MCPRDiscreteArithmeticASEngine_swigregister
MCPRDiscreteArithmeticASEngine_swigregister(MCPRDiscreteArithmeticASEngine)

class MCLDDiscreteArithmeticASEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCLDDiscreteArithmeticASEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCLDDiscreteArithmeticASEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCLDDiscreteArithmeticASEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCLDDiscreteArithmeticASEngine
    __del__ = lambda self: None
MCLDDiscreteArithmeticASEngine_swigregister = _QuantLib.MCLDDiscreteArithmeticASEngine_swigregister
MCLDDiscreteArithmeticASEngine_swigregister(MCLDDiscreteArithmeticASEngine)


def MCDiscreteArithmeticASEngine(
        process,
        traits,
        brownianBridge=True,
        antitheticVariate=False,
        requiredSamples=None,
        requiredTolerance=None,
        maxSamples=None,
        seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRDiscreteArithmeticASEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDDiscreteArithmeticASEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(
        process,
        brownianBridge,
        antitheticVariate,
        requiredSamples,
        requiredTolerance,
        maxSamples,
        seed)

class MCPRDiscreteGeometricAPEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCPRDiscreteGeometricAPEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCPRDiscreteGeometricAPEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCPRDiscreteGeometricAPEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCPRDiscreteGeometricAPEngine
    __del__ = lambda self: None
MCPRDiscreteGeometricAPEngine_swigregister = _QuantLib.MCPRDiscreteGeometricAPEngine_swigregister
MCPRDiscreteGeometricAPEngine_swigregister(MCPRDiscreteGeometricAPEngine)

class MCLDDiscreteGeometricAPEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCLDDiscreteGeometricAPEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCLDDiscreteGeometricAPEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCLDDiscreteGeometricAPEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCLDDiscreteGeometricAPEngine
    __del__ = lambda self: None
MCLDDiscreteGeometricAPEngine_swigregister = _QuantLib.MCLDDiscreteGeometricAPEngine_swigregister
MCLDDiscreteGeometricAPEngine_swigregister(MCLDDiscreteGeometricAPEngine)


def MCDiscreteGeometricAPEngine(
        process,
        traits,
        brownianBridge=True,
        antitheticVariate=False,
        requiredSamples=None,
        requiredTolerance=None,
        maxSamples=None,
        seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRDiscreteGeometricAPEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDDiscreteGeometricAPEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(
        process,
        brownianBridge,
        antitheticVariate,
        requiredSamples,
        requiredTolerance,
        maxSamples,
        seed)

class MCPRDiscreteGeometricAPHestonEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCPRDiscreteGeometricAPHestonEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCPRDiscreteGeometricAPHestonEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCPRDiscreteGeometricAPHestonEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCPRDiscreteGeometricAPHestonEngine
    __del__ = lambda self: None
MCPRDiscreteGeometricAPHestonEngine_swigregister = _QuantLib.MCPRDiscreteGeometricAPHestonEngine_swigregister
MCPRDiscreteGeometricAPHestonEngine_swigregister(MCPRDiscreteGeometricAPHestonEngine)

class MCLDDiscreteGeometricAPHestonEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCLDDiscreteGeometricAPHestonEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCLDDiscreteGeometricAPHestonEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCLDDiscreteGeometricAPHestonEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCLDDiscreteGeometricAPHestonEngine
    __del__ = lambda self: None
MCLDDiscreteGeometricAPHestonEngine_swigregister = _QuantLib.MCLDDiscreteGeometricAPHestonEngine_swigregister
MCLDDiscreteGeometricAPHestonEngine_swigregister(MCLDDiscreteGeometricAPHestonEngine)


def MCDiscreteGeometricAPHestonEngine(
        process,
        traits,
        antitheticVariate=False,
        requiredSamples=None,
        requiredTolerance=None,
        maxSamples=None,
        seed=0,
        timeSteps=None,
        timeStepsPerYear=None):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRDiscreteGeometricAPHestonEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDDiscreteGeometricAPHestonEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(
        process,
        antitheticVariate,
        requiredSamples,
        requiredTolerance,
        maxSamples,
        seed,
        timeSteps,
        timeStepsPerYear)

class FdBlackScholesAsianEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdBlackScholesAsianEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdBlackScholesAsianEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process, tGrid, xGrid, aGrid):
        this = _QuantLib.new_FdBlackScholesAsianEngine(process, tGrid, xGrid, aGrid)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdBlackScholesAsianEngine
    __del__ = lambda self: None
FdBlackScholesAsianEngine_swigregister = _QuantLib.FdBlackScholesAsianEngine_swigregister
FdBlackScholesAsianEngine_swigregister(FdBlackScholesAsianEngine)

class AnalyticBarrierEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticBarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticBarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _QuantLib.new_AnalyticBarrierEngine(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AnalyticBarrierEngine
    __del__ = lambda self: None
AnalyticBarrierEngine_swigregister = _QuantLib.AnalyticBarrierEngine_swigregister
AnalyticBarrierEngine_swigregister(AnalyticBarrierEngine)

class AnalyticBinaryBarrierEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticBinaryBarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticBinaryBarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process):
        this = _QuantLib.new_AnalyticBinaryBarrierEngine(process)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AnalyticBinaryBarrierEngine
    __del__ = lambda self: None
AnalyticBinaryBarrierEngine_swigregister = _QuantLib.AnalyticBinaryBarrierEngine_swigregister
AnalyticBinaryBarrierEngine_swigregister(AnalyticBinaryBarrierEngine)

class MCPRBarrierEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCPRBarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCPRBarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCPRBarrierEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCPRBarrierEngine
    __del__ = lambda self: None
MCPRBarrierEngine_swigregister = _QuantLib.MCPRBarrierEngine_swigregister
MCPRBarrierEngine_swigregister(MCPRBarrierEngine)

class MCLDBarrierEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCLDBarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCLDBarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCLDBarrierEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCLDBarrierEngine
    __del__ = lambda self: None
MCLDBarrierEngine_swigregister = _QuantLib.MCLDBarrierEngine_swigregister
MCLDBarrierEngine_swigregister(MCLDBarrierEngine)


def MCBarrierEngine(
        process,
        traits,
        timeSteps=None,
        timeStepsPerYear=None,
        brownianBridge=False,
        antitheticVariate=False,
        requiredSamples=None,
        requiredTolerance=None,
        maxSamples=None,
        isBiased=False,
        seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRBarrierEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDBarrierEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(
        process,
        timeSteps,
        timeStepsPerYear,
        brownianBridge,
        antitheticVariate,
        requiredSamples,
        requiredTolerance,
        maxSamples,
        isBiased,
        seed)

class FdBlackScholesBarrierEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdBlackScholesBarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdBlackScholesBarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FdBlackScholesBarrierEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdBlackScholesBarrierEngine
    __del__ = lambda self: None
FdBlackScholesBarrierEngine_swigregister = _QuantLib.FdBlackScholesBarrierEngine_swigregister
FdBlackScholesBarrierEngine_swigregister(FdBlackScholesBarrierEngine)

class FdBlackScholesRebateEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdBlackScholesRebateEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdBlackScholesRebateEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FdBlackScholesRebateEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdBlackScholesRebateEngine
    __del__ = lambda self: None
FdBlackScholesRebateEngine_swigregister = _QuantLib.FdBlackScholesRebateEngine_swigregister
FdBlackScholesRebateEngine_swigregister(FdBlackScholesRebateEngine)

class FdHestonBarrierEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdHestonBarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdHestonBarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FdHestonBarrierEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdHestonBarrierEngine
    __del__ = lambda self: None
FdHestonBarrierEngine_swigregister = _QuantLib.FdHestonBarrierEngine_swigregister
FdHestonBarrierEngine_swigregister(FdHestonBarrierEngine)

class FdHestonRebateEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdHestonRebateEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdHestonRebateEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FdHestonRebateEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdHestonRebateEngine
    __del__ = lambda self: None
FdHestonRebateEngine_swigregister = _QuantLib.FdHestonRebateEngine_swigregister
FdHestonRebateEngine_swigregister(FdHestonRebateEngine)

class BinomialCRRBarrierEngine(PricingEngine):
    """
    Binomial Engine for barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
    up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    Boyle-Lau adjustment is controlled by parameter max_steps.
    If max_steps is equal to steps Boyle-Lau is disabled.
    Il max_steps is 0 (default value), max_steps is calculated by capping it to
    5*steps when Boyle-Lau would need more than 1000 steps.
    If max_steps is specified, it would limit binomial steps to this value.

    """

    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialCRRBarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialCRRBarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, steps, max_steps=0):
        """
        Binomial Engine for barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
        up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        Boyle-Lau adjustment is controlled by parameter max_steps.
        If max_steps is equal to steps Boyle-Lau is disabled.
        Il max_steps is 0 (default value), max_steps is calculated by capping it to
        5*steps when Boyle-Lau would need more than 1000 steps.
        If max_steps is specified, it would limit binomial steps to this value.

        """
        this = _QuantLib.new_BinomialCRRBarrierEngine(arg2, steps, max_steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialCRRBarrierEngine
    __del__ = lambda self: None
BinomialCRRBarrierEngine_swigregister = _QuantLib.BinomialCRRBarrierEngine_swigregister
BinomialCRRBarrierEngine_swigregister(BinomialCRRBarrierEngine)

class BinomialJRBarrierEngine(PricingEngine):
    """
    Binomial Engine for barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
    up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    Boyle-Lau adjustment is controlled by parameter max_steps.
    If max_steps is equal to steps Boyle-Lau is disabled.
    Il max_steps is 0 (default value), max_steps is calculated by capping it to
    5*steps when Boyle-Lau would need more than 1000 steps.
    If max_steps is specified, it would limit binomial steps to this value.

    """

    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialJRBarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialJRBarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, steps, max_steps=0):
        """
        Binomial Engine for barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
        up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        Boyle-Lau adjustment is controlled by parameter max_steps.
        If max_steps is equal to steps Boyle-Lau is disabled.
        Il max_steps is 0 (default value), max_steps is calculated by capping it to
        5*steps when Boyle-Lau would need more than 1000 steps.
        If max_steps is specified, it would limit binomial steps to this value.

        """
        this = _QuantLib.new_BinomialJRBarrierEngine(arg2, steps, max_steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialJRBarrierEngine
    __del__ = lambda self: None
BinomialJRBarrierEngine_swigregister = _QuantLib.BinomialJRBarrierEngine_swigregister
BinomialJRBarrierEngine_swigregister(BinomialJRBarrierEngine)

class BinomialEQPBarrierEngine(PricingEngine):
    """
    Binomial Engine for barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
    up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    Boyle-Lau adjustment is controlled by parameter max_steps.
    If max_steps is equal to steps Boyle-Lau is disabled.
    Il max_steps is 0 (default value), max_steps is calculated by capping it to
    5*steps when Boyle-Lau would need more than 1000 steps.
    If max_steps is specified, it would limit binomial steps to this value.

    """

    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialEQPBarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialEQPBarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, steps, max_steps=0):
        """
        Binomial Engine for barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
        up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        Boyle-Lau adjustment is controlled by parameter max_steps.
        If max_steps is equal to steps Boyle-Lau is disabled.
        Il max_steps is 0 (default value), max_steps is calculated by capping it to
        5*steps when Boyle-Lau would need more than 1000 steps.
        If max_steps is specified, it would limit binomial steps to this value.

        """
        this = _QuantLib.new_BinomialEQPBarrierEngine(arg2, steps, max_steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialEQPBarrierEngine
    __del__ = lambda self: None
BinomialEQPBarrierEngine_swigregister = _QuantLib.BinomialEQPBarrierEngine_swigregister
BinomialEQPBarrierEngine_swigregister(BinomialEQPBarrierEngine)

class BinomialTrigeorgisBarrierEngine(PricingEngine):
    """
    Binomial Engine for barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
    up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    Boyle-Lau adjustment is controlled by parameter max_steps.
    If max_steps is equal to steps Boyle-Lau is disabled.
    Il max_steps is 0 (default value), max_steps is calculated by capping it to
    5*steps when Boyle-Lau would need more than 1000 steps.
    If max_steps is specified, it would limit binomial steps to this value.

    """

    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialTrigeorgisBarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialTrigeorgisBarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, steps, max_steps=0):
        """
        Binomial Engine for barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
        up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        Boyle-Lau adjustment is controlled by parameter max_steps.
        If max_steps is equal to steps Boyle-Lau is disabled.
        Il max_steps is 0 (default value), max_steps is calculated by capping it to
        5*steps when Boyle-Lau would need more than 1000 steps.
        If max_steps is specified, it would limit binomial steps to this value.

        """
        this = _QuantLib.new_BinomialTrigeorgisBarrierEngine(arg2, steps, max_steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialTrigeorgisBarrierEngine
    __del__ = lambda self: None
BinomialTrigeorgisBarrierEngine_swigregister = _QuantLib.BinomialTrigeorgisBarrierEngine_swigregister
BinomialTrigeorgisBarrierEngine_swigregister(BinomialTrigeorgisBarrierEngine)

class BinomialTianBarrierEngine(PricingEngine):
    """
    Binomial Engine for barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
    up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    Boyle-Lau adjustment is controlled by parameter max_steps.
    If max_steps is equal to steps Boyle-Lau is disabled.
    Il max_steps is 0 (default value), max_steps is calculated by capping it to
    5*steps when Boyle-Lau would need more than 1000 steps.
    If max_steps is specified, it would limit binomial steps to this value.

    """

    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialTianBarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialTianBarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, steps, max_steps=0):
        """
        Binomial Engine for barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
        up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        Boyle-Lau adjustment is controlled by parameter max_steps.
        If max_steps is equal to steps Boyle-Lau is disabled.
        Il max_steps is 0 (default value), max_steps is calculated by capping it to
        5*steps when Boyle-Lau would need more than 1000 steps.
        If max_steps is specified, it would limit binomial steps to this value.

        """
        this = _QuantLib.new_BinomialTianBarrierEngine(arg2, steps, max_steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialTianBarrierEngine
    __del__ = lambda self: None
BinomialTianBarrierEngine_swigregister = _QuantLib.BinomialTianBarrierEngine_swigregister
BinomialTianBarrierEngine_swigregister(BinomialTianBarrierEngine)

class BinomialLRBarrierEngine(PricingEngine):
    """
    Binomial Engine for barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
    up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    Boyle-Lau adjustment is controlled by parameter max_steps.
    If max_steps is equal to steps Boyle-Lau is disabled.
    Il max_steps is 0 (default value), max_steps is calculated by capping it to
    5*steps when Boyle-Lau would need more than 1000 steps.
    If max_steps is specified, it would limit binomial steps to this value.

    """

    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialLRBarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialLRBarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, steps, max_steps=0):
        """
        Binomial Engine for barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
        up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        Boyle-Lau adjustment is controlled by parameter max_steps.
        If max_steps is equal to steps Boyle-Lau is disabled.
        Il max_steps is 0 (default value), max_steps is calculated by capping it to
        5*steps when Boyle-Lau would need more than 1000 steps.
        If max_steps is specified, it would limit binomial steps to this value.

        """
        this = _QuantLib.new_BinomialLRBarrierEngine(arg2, steps, max_steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialLRBarrierEngine
    __del__ = lambda self: None
BinomialLRBarrierEngine_swigregister = _QuantLib.BinomialLRBarrierEngine_swigregister
BinomialLRBarrierEngine_swigregister(BinomialLRBarrierEngine)

class BinomialJ4BarrierEngine(PricingEngine):
    """
    Binomial Engine for barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
    up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    Boyle-Lau adjustment is controlled by parameter max_steps.
    If max_steps is equal to steps Boyle-Lau is disabled.
    Il max_steps is 0 (default value), max_steps is calculated by capping it to
    5*steps when Boyle-Lau would need more than 1000 steps.
    If max_steps is specified, it would limit binomial steps to this value.

    """

    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialJ4BarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialJ4BarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, steps, max_steps=0):
        """
        Binomial Engine for barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
        up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        Boyle-Lau adjustment is controlled by parameter max_steps.
        If max_steps is equal to steps Boyle-Lau is disabled.
        Il max_steps is 0 (default value), max_steps is calculated by capping it to
        5*steps when Boyle-Lau would need more than 1000 steps.
        If max_steps is specified, it would limit binomial steps to this value.

        """
        this = _QuantLib.new_BinomialJ4BarrierEngine(arg2, steps, max_steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialJ4BarrierEngine
    __del__ = lambda self: None
BinomialJ4BarrierEngine_swigregister = _QuantLib.BinomialJ4BarrierEngine_swigregister
BinomialJ4BarrierEngine_swigregister(BinomialJ4BarrierEngine)


def BinomialBarrierEngine(process, type, steps):
    type = type.lower()
    if type == "crr" or type == "coxrossrubinstein":
        cls = BinomialCRRBarrierEngine
    elif type == "jr" or type == "jarrowrudd":
        cls = BinomialJRBarrierEngine
    elif type == "eqp":
        cls = BinomialEQPBarrierEngine
    elif type == "trigeorgis":
        cls = BinomialTrigeorgisBarrierEngine
    elif type == "tian":
        cls = BinomialTianBarrierEngine
    elif type == "lr" or type == "leisenreimer":
        cls = BinomialLRBarrierEngine
    elif type == "j4" or type == "joshi4":
        cls = BinomialJ4BarrierEngine
    else:
        raise RuntimeError("unknown binomial engine type: %s" % type);
    return cls(
        process, steps)

class VannaVolgaBarrierEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VannaVolgaBarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VannaVolgaBarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, atmVol, vol25Put, vol25Call, spotFX, domesticTS, foreignTS, adaptVanDelta=False, bsPriceWithSmile=0.0):
        this = _QuantLib.new_VannaVolgaBarrierEngine(atmVol, vol25Put, vol25Call, spotFX, domesticTS, foreignTS, adaptVanDelta, bsPriceWithSmile)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_VannaVolgaBarrierEngine
    __del__ = lambda self: None
VannaVolgaBarrierEngine_swigregister = _QuantLib.VannaVolgaBarrierEngine_swigregister
VannaVolgaBarrierEngine_swigregister(VannaVolgaBarrierEngine)

class AnalyticDoubleBarrierEngine(PricingEngine):
    """

    Double barrier engine implementing Ikeda-Kunitomo series.
    """

    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticDoubleBarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticDoubleBarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process, series=5):
        """

        Double barrier engine implementing Ikeda-Kunitomo series.
        """
        this = _QuantLib.new_AnalyticDoubleBarrierEngine(process, series)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AnalyticDoubleBarrierEngine
    __del__ = lambda self: None
AnalyticDoubleBarrierEngine_swigregister = _QuantLib.AnalyticDoubleBarrierEngine_swigregister
AnalyticDoubleBarrierEngine_swigregister(AnalyticDoubleBarrierEngine)

class FdHestonDoubleBarrierEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdHestonDoubleBarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdHestonDoubleBarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FdHestonDoubleBarrierEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdHestonDoubleBarrierEngine
    __del__ = lambda self: None
FdHestonDoubleBarrierEngine_swigregister = _QuantLib.FdHestonDoubleBarrierEngine_swigregister
FdHestonDoubleBarrierEngine_swigregister(FdHestonDoubleBarrierEngine)

class WulinYongDoubleBarrierEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WulinYongDoubleBarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WulinYongDoubleBarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process, series=5):
        this = _QuantLib.new_WulinYongDoubleBarrierEngine(process, series)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_WulinYongDoubleBarrierEngine
    __del__ = lambda self: None
WulinYongDoubleBarrierEngine_swigregister = _QuantLib.WulinYongDoubleBarrierEngine_swigregister
WulinYongDoubleBarrierEngine_swigregister(WulinYongDoubleBarrierEngine)

class VannaVolgaIKDoubleBarrierEngine(PricingEngine):
    """

    Vanna-Volga engine for double barrier options.
    Supports different double barrier engines, selected by the type parameters.
    Type values:
        ik or analytic:  Ikeda-Kunitomo standard engine (default)
        wo:              Wulin-Yong engine

    """

    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VannaVolgaIKDoubleBarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VannaVolgaIKDoubleBarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, atmVol, vol25Put, vol25Call, spotFX, domesticTS, foreignTS, adaptVanDelta=False, bsPriceWithSmile=0.0, series=5):
        """

        Vanna-Volga engine for double barrier options.
        Supports different double barrier engines, selected by the type parameters.
        Type values:
            ik or analytic:  Ikeda-Kunitomo standard engine (default)
            wo:              Wulin-Yong engine

        """
        this = _QuantLib.new_VannaVolgaIKDoubleBarrierEngine(atmVol, vol25Put, vol25Call, spotFX, domesticTS, foreignTS, adaptVanDelta, bsPriceWithSmile, series)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_VannaVolgaIKDoubleBarrierEngine
    __del__ = lambda self: None
VannaVolgaIKDoubleBarrierEngine_swigregister = _QuantLib.VannaVolgaIKDoubleBarrierEngine_swigregister
VannaVolgaIKDoubleBarrierEngine_swigregister(VannaVolgaIKDoubleBarrierEngine)

class VannaVolgaWODoubleBarrierEngine(PricingEngine):
    """

    Vanna-Volga engine for double barrier options.
    Supports different double barrier engines, selected by the type parameters.
    Type values:
        ik or analytic:  Ikeda-Kunitomo standard engine (default)
        wo:              Wulin-Yong engine

    """

    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VannaVolgaWODoubleBarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VannaVolgaWODoubleBarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, atmVol, vol25Put, vol25Call, spotFX, domesticTS, foreignTS, adaptVanDelta=False, bsPriceWithSmile=0.0, series=5):
        """

        Vanna-Volga engine for double barrier options.
        Supports different double barrier engines, selected by the type parameters.
        Type values:
            ik or analytic:  Ikeda-Kunitomo standard engine (default)
            wo:              Wulin-Yong engine

        """
        this = _QuantLib.new_VannaVolgaWODoubleBarrierEngine(atmVol, vol25Put, vol25Call, spotFX, domesticTS, foreignTS, adaptVanDelta, bsPriceWithSmile, series)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_VannaVolgaWODoubleBarrierEngine
    __del__ = lambda self: None
VannaVolgaWODoubleBarrierEngine_swigregister = _QuantLib.VannaVolgaWODoubleBarrierEngine_swigregister
VannaVolgaWODoubleBarrierEngine_swigregister(VannaVolgaWODoubleBarrierEngine)

class AnalyticDoubleBarrierBinaryEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticDoubleBarrierBinaryEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticDoubleBarrierBinaryEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process):
        this = _QuantLib.new_AnalyticDoubleBarrierBinaryEngine(process)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AnalyticDoubleBarrierBinaryEngine
    __del__ = lambda self: None
AnalyticDoubleBarrierBinaryEngine_swigregister = _QuantLib.AnalyticDoubleBarrierBinaryEngine_swigregister
AnalyticDoubleBarrierBinaryEngine_swigregister(AnalyticDoubleBarrierBinaryEngine)

class BinomialCRRDoubleBarrierEngine(PricingEngine):
    """
    Binomial Engine for double barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Derman-Kani optimization to speed up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    """

    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialCRRDoubleBarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialCRRDoubleBarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process, steps):
        """
        Binomial Engine for double barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Derman-Kani optimization to speed up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        """
        this = _QuantLib.new_BinomialCRRDoubleBarrierEngine(process, steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialCRRDoubleBarrierEngine
    __del__ = lambda self: None
BinomialCRRDoubleBarrierEngine_swigregister = _QuantLib.BinomialCRRDoubleBarrierEngine_swigregister
BinomialCRRDoubleBarrierEngine_swigregister(BinomialCRRDoubleBarrierEngine)

class BinomialJRDoubleBarrierEngine(PricingEngine):
    """
    Binomial Engine for double barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Derman-Kani optimization to speed up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    """

    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialJRDoubleBarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialJRDoubleBarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process, steps):
        """
        Binomial Engine for double barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Derman-Kani optimization to speed up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        """
        this = _QuantLib.new_BinomialJRDoubleBarrierEngine(process, steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialJRDoubleBarrierEngine
    __del__ = lambda self: None
BinomialJRDoubleBarrierEngine_swigregister = _QuantLib.BinomialJRDoubleBarrierEngine_swigregister
BinomialJRDoubleBarrierEngine_swigregister(BinomialJRDoubleBarrierEngine)

class BinomialEQPDoubleBarrierEngine(PricingEngine):
    """
    Binomial Engine for double barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Derman-Kani optimization to speed up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    """

    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialEQPDoubleBarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialEQPDoubleBarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process, steps):
        """
        Binomial Engine for double barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Derman-Kani optimization to speed up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        """
        this = _QuantLib.new_BinomialEQPDoubleBarrierEngine(process, steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialEQPDoubleBarrierEngine
    __del__ = lambda self: None
BinomialEQPDoubleBarrierEngine_swigregister = _QuantLib.BinomialEQPDoubleBarrierEngine_swigregister
BinomialEQPDoubleBarrierEngine_swigregister(BinomialEQPDoubleBarrierEngine)

class BinomialTrigeorgisDoubleBarrierEngine(PricingEngine):
    """
    Binomial Engine for double barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Derman-Kani optimization to speed up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    """

    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialTrigeorgisDoubleBarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialTrigeorgisDoubleBarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process, steps):
        """
        Binomial Engine for double barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Derman-Kani optimization to speed up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        """
        this = _QuantLib.new_BinomialTrigeorgisDoubleBarrierEngine(process, steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialTrigeorgisDoubleBarrierEngine
    __del__ = lambda self: None
BinomialTrigeorgisDoubleBarrierEngine_swigregister = _QuantLib.BinomialTrigeorgisDoubleBarrierEngine_swigregister
BinomialTrigeorgisDoubleBarrierEngine_swigregister(BinomialTrigeorgisDoubleBarrierEngine)

class BinomialTianDoubleBarrierEngine(PricingEngine):
    """
    Binomial Engine for double barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Derman-Kani optimization to speed up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    """

    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialTianDoubleBarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialTianDoubleBarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process, steps):
        """
        Binomial Engine for double barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Derman-Kani optimization to speed up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        """
        this = _QuantLib.new_BinomialTianDoubleBarrierEngine(process, steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialTianDoubleBarrierEngine
    __del__ = lambda self: None
BinomialTianDoubleBarrierEngine_swigregister = _QuantLib.BinomialTianDoubleBarrierEngine_swigregister
BinomialTianDoubleBarrierEngine_swigregister(BinomialTianDoubleBarrierEngine)

class BinomialLRDoubleBarrierEngine(PricingEngine):
    """
    Binomial Engine for double barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Derman-Kani optimization to speed up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    """

    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialLRDoubleBarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialLRDoubleBarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process, steps):
        """
        Binomial Engine for double barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Derman-Kani optimization to speed up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        """
        this = _QuantLib.new_BinomialLRDoubleBarrierEngine(process, steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialLRDoubleBarrierEngine
    __del__ = lambda self: None
BinomialLRDoubleBarrierEngine_swigregister = _QuantLib.BinomialLRDoubleBarrierEngine_swigregister
BinomialLRDoubleBarrierEngine_swigregister(BinomialLRDoubleBarrierEngine)

class BinomialJ4DoubleBarrierEngine(PricingEngine):
    """
    Binomial Engine for double barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Derman-Kani optimization to speed up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    """

    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialJ4DoubleBarrierEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialJ4DoubleBarrierEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process, steps):
        """
        Binomial Engine for double barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Derman-Kani optimization to speed up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        """
        this = _QuantLib.new_BinomialJ4DoubleBarrierEngine(process, steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialJ4DoubleBarrierEngine
    __del__ = lambda self: None
BinomialJ4DoubleBarrierEngine_swigregister = _QuantLib.BinomialJ4DoubleBarrierEngine_swigregister
BinomialJ4DoubleBarrierEngine_swigregister(BinomialJ4DoubleBarrierEngine)


def BinomialDoubleBarrierEngine(process, type, steps):
    type = type.lower()
    if type == "crr" or type == "coxrossrubinstein":
        cls = BinomialCRRDoubleBarrierEngine
    elif type == "jr" or type == "jarrowrudd":
        cls = BinomialJRDoubleBarrierEngine
    elif type == "eqp":
        cls = BinomialEQPDoubleBarrierEngine
    elif type == "trigeorgis":
        cls = BinomialTrigeorgisDoubleBarrierEngine
    elif type == "tian":
        cls = BinomialTianDoubleBarrierEngine
    elif type == "lr" or type == "leisenreimer":
        cls = BinomialLRDoubleBarrierEngine
    elif type == "j4" or type == "joshi4":
        cls = BinomialJ4DoubleBarrierEngine
    else:
        raise RuntimeError("unknown binomial engine type: %s" % type);
    return cls(
        process, steps)

class MCPREuropeanBasketEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCPREuropeanBasketEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCPREuropeanBasketEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCPREuropeanBasketEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCPREuropeanBasketEngine
    __del__ = lambda self: None
MCPREuropeanBasketEngine_swigregister = _QuantLib.MCPREuropeanBasketEngine_swigregister
MCPREuropeanBasketEngine_swigregister(MCPREuropeanBasketEngine)

class MCLDEuropeanBasketEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCLDEuropeanBasketEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCLDEuropeanBasketEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCLDEuropeanBasketEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCLDEuropeanBasketEngine
    __del__ = lambda self: None
MCLDEuropeanBasketEngine_swigregister = _QuantLib.MCLDEuropeanBasketEngine_swigregister
MCLDEuropeanBasketEngine_swigregister(MCLDEuropeanBasketEngine)


def MCEuropeanBasketEngine(
        process,
        traits,
        timeSteps=None,
        timeStepsPerYear=None,
        brownianBridge=False,
        antitheticVariate=False,
        requiredSamples=None,
        requiredTolerance=None,
        maxSamples=None,
        seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPREuropeanBasketEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDEuropeanBasketEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(
        process,
        timeSteps,
        timeStepsPerYear,
        brownianBridge,
        antitheticVariate,
        requiredSamples,
        requiredTolerance,
        maxSamples,
        seed)

class MCPRAmericanBasketEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCPRAmericanBasketEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCPRAmericanBasketEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCPRAmericanBasketEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCPRAmericanBasketEngine
    __del__ = lambda self: None
MCPRAmericanBasketEngine_swigregister = _QuantLib.MCPRAmericanBasketEngine_swigregister
MCPRAmericanBasketEngine_swigregister(MCPRAmericanBasketEngine)

class MCLDAmericanBasketEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCLDAmericanBasketEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCLDAmericanBasketEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCLDAmericanBasketEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCLDAmericanBasketEngine
    __del__ = lambda self: None
MCLDAmericanBasketEngine_swigregister = _QuantLib.MCLDAmericanBasketEngine_swigregister
MCLDAmericanBasketEngine_swigregister(MCLDAmericanBasketEngine)


def MCAmericanBasketEngine(
        process,
        traits,
        timeSteps=None,
        timeStepsPerYear=None,
        brownianBridge=False,
        antitheticVariate=False,
        requiredSamples=None,
        requiredTolerance=None,
        maxSamples=None,
        seed=0,
        nCalibrationSamples=None,
        polynomOrder=2,
        polynomType=LsmBasisSystem.Monomial):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRAmericanBasketEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDAmericanBasketEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(
        process,
        timeSteps,
        timeStepsPerYear,
        brownianBridge,
        antitheticVariate,
        requiredSamples,
        requiredTolerance,
        maxSamples,
        seed,
        nCalibrationSamples,
        polynomOrder,
        polynomType)

class StulzEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StulzEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StulzEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process1, process2, correlation):
        this = _QuantLib.new_StulzEngine(process1, process2, correlation)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_StulzEngine
    __del__ = lambda self: None
StulzEngine_swigregister = _QuantLib.StulzEngine_swigregister
StulzEngine_swigregister(StulzEngine)

class KirkEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KirkEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KirkEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process1, process2, correlation):
        this = _QuantLib.new_KirkEngine(process1, process2, correlation)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_KirkEngine
    __del__ = lambda self: None
KirkEngine_swigregister = _QuantLib.KirkEngine_swigregister
KirkEngine_swigregister(KirkEngine)

class Fd2dBlackScholesVanillaEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Fd2dBlackScholesVanillaEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Fd2dBlackScholesVanillaEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Fd2dBlackScholesVanillaEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Fd2dBlackScholesVanillaEngine
    __del__ = lambda self: None
Fd2dBlackScholesVanillaEngine_swigregister = _QuantLib.Fd2dBlackScholesVanillaEngine_swigregister
Fd2dBlackScholesVanillaEngine_swigregister(Fd2dBlackScholesVanillaEngine)

class MCPREverestEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCPREverestEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCPREverestEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCPREverestEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCPREverestEngine
    __del__ = lambda self: None
MCPREverestEngine_swigregister = _QuantLib.MCPREverestEngine_swigregister
MCPREverestEngine_swigregister(MCPREverestEngine)

class MCLDEverestEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCLDEverestEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCLDEverestEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCLDEverestEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCLDEverestEngine
    __del__ = lambda self: None
MCLDEverestEngine_swigregister = _QuantLib.MCLDEverestEngine_swigregister
MCLDEverestEngine_swigregister(MCLDEverestEngine)


def MCEverestEngine(
        process,
        traits,
        timeSteps=None,
        timeStepsPerYear=None,
        brownianBridge=False,
        antitheticVariate=False,
        requiredSamples=None,
        requiredTolerance=None,
        maxSamples=None,
        seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPREverestEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDEverestEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(
        process,
        timeSteps,
        timeStepsPerYear,
        brownianBridge,
        antitheticVariate,
        requiredSamples,
        requiredTolerance,
        maxSamples,
        seed)

class MCPRHimalayaEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCPRHimalayaEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCPRHimalayaEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCPRHimalayaEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCPRHimalayaEngine
    __del__ = lambda self: None
MCPRHimalayaEngine_swigregister = _QuantLib.MCPRHimalayaEngine_swigregister
MCPRHimalayaEngine_swigregister(MCPRHimalayaEngine)

class MCLDHimalayaEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCLDHimalayaEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCLDHimalayaEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCLDHimalayaEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCLDHimalayaEngine
    __del__ = lambda self: None
MCLDHimalayaEngine_swigregister = _QuantLib.MCLDHimalayaEngine_swigregister
MCLDHimalayaEngine_swigregister(MCLDHimalayaEngine)


def MCHimalayaEngine(
        process,
        traits,
        brownianBridge=False,
        antitheticVariate=False,
        requiredSamples=None,
        requiredTolerance=None,
        maxSamples=None,
        seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRHimalayaEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDHimalayaEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(
        process,
        brownianBridge,
        antitheticVariate,
        requiredSamples,
        requiredTolerance,
        maxSamples,
        seed)

class DiscountingBondEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscountingBondEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiscountingBondEngine, name)
    __repr__ = _swig_repr

    def __init__(self, discountCurve):
        this = _QuantLib.new_DiscountingBondEngine(discountCurve)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_DiscountingBondEngine
    __del__ = lambda self: None
DiscountingBondEngine_swigregister = _QuantLib.DiscountingBondEngine_swigregister
DiscountingBondEngine_swigregister(DiscountingBondEngine)

class TreeCallableFixedRateBondEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeCallableFixedRateBondEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TreeCallableFixedRateBondEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_TreeCallableFixedRateBondEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_TreeCallableFixedRateBondEngine
    __del__ = lambda self: None
TreeCallableFixedRateBondEngine_swigregister = _QuantLib.TreeCallableFixedRateBondEngine_swigregister
TreeCallableFixedRateBondEngine_swigregister(TreeCallableFixedRateBondEngine)

class BlackCallableFixedRateBondEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackCallableFixedRateBondEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlackCallableFixedRateBondEngine, name)
    __repr__ = _swig_repr

    def __init__(self, fwdYieldVol, discountCurve):
        this = _QuantLib.new_BlackCallableFixedRateBondEngine(fwdYieldVol, discountCurve)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BlackCallableFixedRateBondEngine
    __del__ = lambda self: None
BlackCallableFixedRateBondEngine_swigregister = _QuantLib.BlackCallableFixedRateBondEngine_swigregister
BlackCallableFixedRateBondEngine_swigregister(BlackCallableFixedRateBondEngine)

class BinomialCRRConvertibleEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialCRRConvertibleEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialCRRConvertibleEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        this = _QuantLib.new_BinomialCRRConvertibleEngine(arg2, steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialCRRConvertibleEngine
    __del__ = lambda self: None
BinomialCRRConvertibleEngine_swigregister = _QuantLib.BinomialCRRConvertibleEngine_swigregister
BinomialCRRConvertibleEngine_swigregister(BinomialCRRConvertibleEngine)

class BinomialJRConvertibleEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialJRConvertibleEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialJRConvertibleEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        this = _QuantLib.new_BinomialJRConvertibleEngine(arg2, steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialJRConvertibleEngine
    __del__ = lambda self: None
BinomialJRConvertibleEngine_swigregister = _QuantLib.BinomialJRConvertibleEngine_swigregister
BinomialJRConvertibleEngine_swigregister(BinomialJRConvertibleEngine)

class BinomialEQPConvertibleEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialEQPConvertibleEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialEQPConvertibleEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        this = _QuantLib.new_BinomialEQPConvertibleEngine(arg2, steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialEQPConvertibleEngine
    __del__ = lambda self: None
BinomialEQPConvertibleEngine_swigregister = _QuantLib.BinomialEQPConvertibleEngine_swigregister
BinomialEQPConvertibleEngine_swigregister(BinomialEQPConvertibleEngine)

class BinomialTrigeorgisConvertibleEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialTrigeorgisConvertibleEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialTrigeorgisConvertibleEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        this = _QuantLib.new_BinomialTrigeorgisConvertibleEngine(arg2, steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialTrigeorgisConvertibleEngine
    __del__ = lambda self: None
BinomialTrigeorgisConvertibleEngine_swigregister = _QuantLib.BinomialTrigeorgisConvertibleEngine_swigregister
BinomialTrigeorgisConvertibleEngine_swigregister(BinomialTrigeorgisConvertibleEngine)

class BinomialTianConvertibleEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialTianConvertibleEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialTianConvertibleEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        this = _QuantLib.new_BinomialTianConvertibleEngine(arg2, steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialTianConvertibleEngine
    __del__ = lambda self: None
BinomialTianConvertibleEngine_swigregister = _QuantLib.BinomialTianConvertibleEngine_swigregister
BinomialTianConvertibleEngine_swigregister(BinomialTianConvertibleEngine)

class BinomialLRConvertibleEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialLRConvertibleEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialLRConvertibleEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        this = _QuantLib.new_BinomialLRConvertibleEngine(arg2, steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialLRConvertibleEngine
    __del__ = lambda self: None
BinomialLRConvertibleEngine_swigregister = _QuantLib.BinomialLRConvertibleEngine_swigregister
BinomialLRConvertibleEngine_swigregister(BinomialLRConvertibleEngine)

class BinomialJ4ConvertibleEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialJ4ConvertibleEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialJ4ConvertibleEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        this = _QuantLib.new_BinomialJ4ConvertibleEngine(arg2, steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialJ4ConvertibleEngine
    __del__ = lambda self: None
BinomialJ4ConvertibleEngine_swigregister = _QuantLib.BinomialJ4ConvertibleEngine_swigregister
BinomialJ4ConvertibleEngine_swigregister(BinomialJ4ConvertibleEngine)


def BinomialConvertibleEngine(
        process,
        type,
        steps):
    type = type.lower()
    if type == "crr" or type == "coxrossrubinstein":
        cls = BinomialCRRConvertibleEngine
    elif type == "jr" or type == "jarrowrudd":
        cls = BinomialJRConvertibleEngine
    elif type == "eqp":
        cls = BinomialEQPConvertibleEngine
    elif type == "trigeorgis":
        cls = BinomialTrigeorgisConvertibleEngine
    elif type == "tian":
        cls = BinomialTianConvertibleEngine
    elif type == "lr" or type == "leisenreimer":
        cls = BinomialLRConvertibleEngine
    elif type == "j4" or type == "joshi4":
        cls = BinomialJ4ConvertibleEngine
    else:
        raise RuntimeError("unknown binomial engine type: %s" % type);
    return cls(process, steps)

class AnalyticCapFloorEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticCapFloorEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticCapFloorEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_AnalyticCapFloorEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AnalyticCapFloorEngine
    __del__ = lambda self: None
AnalyticCapFloorEngine_swigregister = _QuantLib.AnalyticCapFloorEngine_swigregister
AnalyticCapFloorEngine_swigregister(AnalyticCapFloorEngine)

class BlackCapFloorEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackCapFloorEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlackCapFloorEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_BlackCapFloorEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BlackCapFloorEngine
    __del__ = lambda self: None
BlackCapFloorEngine_swigregister = _QuantLib.BlackCapFloorEngine_swigregister
BlackCapFloorEngine_swigregister(BlackCapFloorEngine)

class BachelierCapFloorEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BachelierCapFloorEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BachelierCapFloorEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_BachelierCapFloorEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BachelierCapFloorEngine
    __del__ = lambda self: None
BachelierCapFloorEngine_swigregister = _QuantLib.BachelierCapFloorEngine_swigregister
BachelierCapFloorEngine_swigregister(BachelierCapFloorEngine)

class TreeCapFloorEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeCapFloorEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TreeCapFloorEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_TreeCapFloorEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_TreeCapFloorEngine
    __del__ = lambda self: None
TreeCapFloorEngine_swigregister = _QuantLib.TreeCapFloorEngine_swigregister
TreeCapFloorEngine_swigregister(TreeCapFloorEngine)

class MidPointCdsEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MidPointCdsEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MidPointCdsEngine, name)
    __repr__ = _swig_repr

    def __init__(self, probability, recoveryRate, discountCurve):
        this = _QuantLib.new_MidPointCdsEngine(probability, recoveryRate, discountCurve)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MidPointCdsEngine
    __del__ = lambda self: None
MidPointCdsEngine_swigregister = _QuantLib.MidPointCdsEngine_swigregister
MidPointCdsEngine_swigregister(MidPointCdsEngine)

class IntegralCdsEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegralCdsEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntegralCdsEngine, name)
    __repr__ = _swig_repr

    def __init__(self, integrationStep, probability, recoveryRate, discountCurve, includeSettlementDateFlows=False):
        this = _QuantLib.new_IntegralCdsEngine(integrationStep, probability, recoveryRate, discountCurve, includeSettlementDateFlows)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_IntegralCdsEngine
    __del__ = lambda self: None
IntegralCdsEngine_swigregister = _QuantLib.IntegralCdsEngine_swigregister
IntegralCdsEngine_swigregister(IntegralCdsEngine)

class IsdaCdsEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsdaCdsEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IsdaCdsEngine, name)
    __repr__ = _swig_repr
    NoFix = _QuantLib.IsdaCdsEngine_NoFix
    Taylor = _QuantLib.IsdaCdsEngine_Taylor
    HalfDayBias = _QuantLib.IsdaCdsEngine_HalfDayBias
    NoBias = _QuantLib.IsdaCdsEngine_NoBias
    Flat = _QuantLib.IsdaCdsEngine_Flat
    Piecewise = _QuantLib.IsdaCdsEngine_Piecewise

    def __init__(self, *args):
        this = _QuantLib.new_IsdaCdsEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_IsdaCdsEngine
    __del__ = lambda self: None
IsdaCdsEngine_swigregister = _QuantLib.IsdaCdsEngine_swigregister
IsdaCdsEngine_swigregister(IsdaCdsEngine)

class BlackCdsOptionEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackCdsOptionEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlackCdsOptionEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, recoveryRate, termStructure, vol):
        this = _QuantLib.new_BlackCdsOptionEngine(arg2, recoveryRate, termStructure, vol)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def termStructure(self):
        return _QuantLib.BlackCdsOptionEngine_termStructure(self)

    def volatility(self):
        return _QuantLib.BlackCdsOptionEngine_volatility(self)
    __swig_destroy__ = _QuantLib.delete_BlackCdsOptionEngine
    __del__ = lambda self: None
BlackCdsOptionEngine_swigregister = _QuantLib.BlackCdsOptionEngine_swigregister
BlackCdsOptionEngine_swigregister(BlackCdsOptionEngine)

class AnalyticDividendEuropeanEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticDividendEuropeanEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticDividendEuropeanEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process):
        this = _QuantLib.new_AnalyticDividendEuropeanEngine(process)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AnalyticDividendEuropeanEngine
    __del__ = lambda self: None
AnalyticDividendEuropeanEngine_swigregister = _QuantLib.AnalyticDividendEuropeanEngine_swigregister
AnalyticDividendEuropeanEngine_swigregister(AnalyticDividendEuropeanEngine)

class FDDividendEuropeanEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FDDividendEuropeanEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FDDividendEuropeanEngine, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _QuantLib.delete_FDDividendEuropeanEngine
    __del__ = lambda self: None
FDDividendEuropeanEngine_swigregister = _QuantLib.FDDividendEuropeanEngine_swigregister
FDDividendEuropeanEngine_swigregister(FDDividendEuropeanEngine)

def FDDividendEuropeanEngineT(process, timeSteps=100, gridPoints=100, timeDependent=False):
    val = _QuantLib.new_FDDividendEuropeanEngineT(process, timeSteps, gridPoints, timeDependent)
    return val

class FDDividendAmericanEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FDDividendAmericanEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FDDividendAmericanEngine, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _QuantLib.delete_FDDividendAmericanEngine
    __del__ = lambda self: None
FDDividendAmericanEngine_swigregister = _QuantLib.FDDividendAmericanEngine_swigregister
FDDividendAmericanEngine_swigregister(FDDividendAmericanEngine)

def FDDividendAmericanEngineT(process, timeSteps=100, gridPoints=100, timeDependent=False):
    val = _QuantLib.new_FDDividendAmericanEngineT(process, timeSteps, gridPoints, timeDependent)
    return val

class FdOrnsteinUhlenbeckVanillaEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdOrnsteinUhlenbeckVanillaEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdOrnsteinUhlenbeckVanillaEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_FdOrnsteinUhlenbeckVanillaEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdOrnsteinUhlenbeckVanillaEngine
    __del__ = lambda self: None
FdOrnsteinUhlenbeckVanillaEngine_swigregister = _QuantLib.FdOrnsteinUhlenbeckVanillaEngine_swigregister
FdOrnsteinUhlenbeckVanillaEngine_swigregister(FdOrnsteinUhlenbeckVanillaEngine)

class ForwardEuropeanEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForwardEuropeanEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForwardEuropeanEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _QuantLib.new_ForwardEuropeanEngine(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ForwardEuropeanEngine
    __del__ = lambda self: None
ForwardEuropeanEngine_swigregister = _QuantLib.ForwardEuropeanEngine_swigregister
ForwardEuropeanEngine_swigregister(ForwardEuropeanEngine)

class AnalyticHestonForwardEuropeanEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticHestonForwardEuropeanEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticHestonForwardEuropeanEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process, integrationOrder=144):
        this = _QuantLib.new_AnalyticHestonForwardEuropeanEngine(process, integrationOrder)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AnalyticHestonForwardEuropeanEngine
    __del__ = lambda self: None
AnalyticHestonForwardEuropeanEngine_swigregister = _QuantLib.AnalyticHestonForwardEuropeanEngine_swigregister
AnalyticHestonForwardEuropeanEngine_swigregister(AnalyticHestonForwardEuropeanEngine)

class MCPRForwardEuropeanBSEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCPRForwardEuropeanBSEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCPRForwardEuropeanBSEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCPRForwardEuropeanBSEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCPRForwardEuropeanBSEngine
    __del__ = lambda self: None
MCPRForwardEuropeanBSEngine_swigregister = _QuantLib.MCPRForwardEuropeanBSEngine_swigregister
MCPRForwardEuropeanBSEngine_swigregister(MCPRForwardEuropeanBSEngine)

class MCLDForwardEuropeanBSEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCLDForwardEuropeanBSEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCLDForwardEuropeanBSEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCLDForwardEuropeanBSEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCLDForwardEuropeanBSEngine
    __del__ = lambda self: None
MCLDForwardEuropeanBSEngine_swigregister = _QuantLib.MCLDForwardEuropeanBSEngine_swigregister
MCLDForwardEuropeanBSEngine_swigregister(MCLDForwardEuropeanBSEngine)


def MCForwardEuropeanBSEngine(
        process,
        traits,
        timeSteps=None,
        timeStepsPerYear=None,
        brownianBridge=False,
        antitheticVariate=False,
        requiredSamples=None,
        requiredTolerance=None,
        maxSamples=None,
        seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRForwardEuropeanBSEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDForwardEuropeanBSEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(
        process,
        timeSteps,
        timeStepsPerYear,
        brownianBridge,
        antitheticVariate,
        requiredSamples,
        requiredTolerance,
        maxSamples,
        seed)

class MCPRForwardEuropeanHestonEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCPRForwardEuropeanHestonEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCPRForwardEuropeanHestonEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCPRForwardEuropeanHestonEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCPRForwardEuropeanHestonEngine
    __del__ = lambda self: None
MCPRForwardEuropeanHestonEngine_swigregister = _QuantLib.MCPRForwardEuropeanHestonEngine_swigregister
MCPRForwardEuropeanHestonEngine_swigregister(MCPRForwardEuropeanHestonEngine)

class MCLDForwardEuropeanHestonEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCLDForwardEuropeanHestonEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCLDForwardEuropeanHestonEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCLDForwardEuropeanHestonEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCLDForwardEuropeanHestonEngine
    __del__ = lambda self: None
MCLDForwardEuropeanHestonEngine_swigregister = _QuantLib.MCLDForwardEuropeanHestonEngine_swigregister
MCLDForwardEuropeanHestonEngine_swigregister(MCLDForwardEuropeanHestonEngine)


def MCForwardEuropeanHestonEngine(
        process,
        traits,
        timeSteps=None,
        timeStepsPerYear=None,
        antitheticVariate=False,
        requiredSamples=None,
        requiredTolerance=None,
        maxSamples=None,
        seed=0,
        controlVariate=False):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRForwardEuropeanHestonEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDForwardEuropeanHestonEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(
        process,
        timeSteps,
        timeStepsPerYear,
        antitheticVariate,
        requiredSamples,
        requiredTolerance,
        maxSamples,
        seed,
        controlVariate)

class AnalyticContinuousFloatingLookbackEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticContinuousFloatingLookbackEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticContinuousFloatingLookbackEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process):
        this = _QuantLib.new_AnalyticContinuousFloatingLookbackEngine(process)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AnalyticContinuousFloatingLookbackEngine
    __del__ = lambda self: None
AnalyticContinuousFloatingLookbackEngine_swigregister = _QuantLib.AnalyticContinuousFloatingLookbackEngine_swigregister
AnalyticContinuousFloatingLookbackEngine_swigregister(AnalyticContinuousFloatingLookbackEngine)

class AnalyticContinuousFixedLookbackEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticContinuousFixedLookbackEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticContinuousFixedLookbackEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process):
        this = _QuantLib.new_AnalyticContinuousFixedLookbackEngine(process)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AnalyticContinuousFixedLookbackEngine
    __del__ = lambda self: None
AnalyticContinuousFixedLookbackEngine_swigregister = _QuantLib.AnalyticContinuousFixedLookbackEngine_swigregister
AnalyticContinuousFixedLookbackEngine_swigregister(AnalyticContinuousFixedLookbackEngine)

class AnalyticContinuousPartialFloatingLookbackEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticContinuousPartialFloatingLookbackEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticContinuousPartialFloatingLookbackEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process):
        this = _QuantLib.new_AnalyticContinuousPartialFloatingLookbackEngine(process)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AnalyticContinuousPartialFloatingLookbackEngine
    __del__ = lambda self: None
AnalyticContinuousPartialFloatingLookbackEngine_swigregister = _QuantLib.AnalyticContinuousPartialFloatingLookbackEngine_swigregister
AnalyticContinuousPartialFloatingLookbackEngine_swigregister(AnalyticContinuousPartialFloatingLookbackEngine)

class AnalyticContinuousPartialFixedLookbackEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticContinuousPartialFixedLookbackEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticContinuousPartialFixedLookbackEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process):
        this = _QuantLib.new_AnalyticContinuousPartialFixedLookbackEngine(process)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AnalyticContinuousPartialFixedLookbackEngine
    __del__ = lambda self: None
AnalyticContinuousPartialFixedLookbackEngine_swigregister = _QuantLib.AnalyticContinuousPartialFixedLookbackEngine_swigregister
AnalyticContinuousPartialFixedLookbackEngine_swigregister(AnalyticContinuousPartialFixedLookbackEngine)

class QuantoEuropeanEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuantoEuropeanEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuantoEuropeanEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process, foreignRiskFreeRate, exchangeRateVolatility, correlation):
        this = _QuantLib.new_QuantoEuropeanEngine(process, foreignRiskFreeRate, exchangeRateVolatility, correlation)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_QuantoEuropeanEngine
    __del__ = lambda self: None
QuantoEuropeanEngine_swigregister = _QuantLib.QuantoEuropeanEngine_swigregister
QuantoEuropeanEngine_swigregister(QuantoEuropeanEngine)

class QuantoForwardEuropeanEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuantoForwardEuropeanEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuantoForwardEuropeanEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process, foreignRiskFreeRate, exchangeRateVolatility, correlation):
        this = _QuantLib.new_QuantoForwardEuropeanEngine(process, foreignRiskFreeRate, exchangeRateVolatility, correlation)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_QuantoForwardEuropeanEngine
    __del__ = lambda self: None
QuantoForwardEuropeanEngine_swigregister = _QuantLib.QuantoForwardEuropeanEngine_swigregister
QuantoForwardEuropeanEngine_swigregister(QuantoForwardEuropeanEngine)

class KirkSpreadOptionEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KirkSpreadOptionEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KirkSpreadOptionEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process1, process2, correlation):
        this = _QuantLib.new_KirkSpreadOptionEngine(process1, process2, correlation)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_KirkSpreadOptionEngine
    __del__ = lambda self: None
KirkSpreadOptionEngine_swigregister = _QuantLib.KirkSpreadOptionEngine_swigregister
KirkSpreadOptionEngine_swigregister(KirkSpreadOptionEngine)

class DiscountingSwapEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscountingSwapEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiscountingSwapEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_DiscountingSwapEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_DiscountingSwapEngine
    __del__ = lambda self: None
DiscountingSwapEngine_swigregister = _QuantLib.DiscountingSwapEngine_swigregister
DiscountingSwapEngine_swigregister(DiscountingSwapEngine)

class BlackSwaptionEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackSwaptionEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlackSwaptionEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_BlackSwaptionEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BlackSwaptionEngine
    __del__ = lambda self: None
BlackSwaptionEngine_swigregister = _QuantLib.BlackSwaptionEngine_swigregister
BlackSwaptionEngine_swigregister(BlackSwaptionEngine)

class BachelierSwaptionEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BachelierSwaptionEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BachelierSwaptionEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_BachelierSwaptionEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BachelierSwaptionEngine
    __del__ = lambda self: None
BachelierSwaptionEngine_swigregister = _QuantLib.BachelierSwaptionEngine_swigregister
BachelierSwaptionEngine_swigregister(BachelierSwaptionEngine)

class JamshidianSwaptionEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JamshidianSwaptionEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JamshidianSwaptionEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_JamshidianSwaptionEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_JamshidianSwaptionEngine
    __del__ = lambda self: None
JamshidianSwaptionEngine_swigregister = _QuantLib.JamshidianSwaptionEngine_swigregister
JamshidianSwaptionEngine_swigregister(JamshidianSwaptionEngine)

class TreeSwaptionEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeSwaptionEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TreeSwaptionEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_TreeSwaptionEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_TreeSwaptionEngine
    __del__ = lambda self: None
TreeSwaptionEngine_swigregister = _QuantLib.TreeSwaptionEngine_swigregister
TreeSwaptionEngine_swigregister(TreeSwaptionEngine)

class G2SwaptionEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, G2SwaptionEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, G2SwaptionEngine, name)
    __repr__ = _swig_repr

    def __init__(self, model, range, intervals):
        this = _QuantLib.new_G2SwaptionEngine(model, range, intervals)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_G2SwaptionEngine
    __del__ = lambda self: None
G2SwaptionEngine_swigregister = _QuantLib.G2SwaptionEngine_swigregister
G2SwaptionEngine_swigregister(G2SwaptionEngine)

class FdG2SwaptionEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdG2SwaptionEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdG2SwaptionEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FdG2SwaptionEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdG2SwaptionEngine
    __del__ = lambda self: None
FdG2SwaptionEngine_swigregister = _QuantLib.FdG2SwaptionEngine_swigregister
FdG2SwaptionEngine_swigregister(FdG2SwaptionEngine)

class FdHullWhiteSwaptionEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdHullWhiteSwaptionEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdHullWhiteSwaptionEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FdHullWhiteSwaptionEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdHullWhiteSwaptionEngine
    __del__ = lambda self: None
FdHullWhiteSwaptionEngine_swigregister = _QuantLib.FdHullWhiteSwaptionEngine_swigregister
FdHullWhiteSwaptionEngine_swigregister(FdHullWhiteSwaptionEngine)

class Gaussian1dSwaptionEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gaussian1dSwaptionEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Gaussian1dSwaptionEngine, name)
    __repr__ = _swig_repr
    NoProb = _QuantLib.Gaussian1dSwaptionEngine_NoProb
    Naive = _QuantLib.Gaussian1dSwaptionEngine_Naive
    Digital = _QuantLib.Gaussian1dSwaptionEngine_Digital

    def __init__(self, *args):
        this = _QuantLib.new_Gaussian1dSwaptionEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Gaussian1dSwaptionEngine
    __del__ = lambda self: None
Gaussian1dSwaptionEngine_swigregister = _QuantLib.Gaussian1dSwaptionEngine_swigregister
Gaussian1dSwaptionEngine_swigregister(Gaussian1dSwaptionEngine)

class Gaussian1dJamshidianSwaptionEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gaussian1dJamshidianSwaptionEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Gaussian1dJamshidianSwaptionEngine, name)
    __repr__ = _swig_repr

    def __init__(self, model):
        this = _QuantLib.new_Gaussian1dJamshidianSwaptionEngine(model)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Gaussian1dJamshidianSwaptionEngine
    __del__ = lambda self: None
Gaussian1dJamshidianSwaptionEngine_swigregister = _QuantLib.Gaussian1dJamshidianSwaptionEngine_swigregister
Gaussian1dJamshidianSwaptionEngine_swigregister(Gaussian1dJamshidianSwaptionEngine)

class Gaussian1dNonstandardSwaptionEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gaussian1dNonstandardSwaptionEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Gaussian1dNonstandardSwaptionEngine, name)
    __repr__ = _swig_repr
    NoProb = _QuantLib.Gaussian1dNonstandardSwaptionEngine_NoProb
    Naive = _QuantLib.Gaussian1dNonstandardSwaptionEngine_Naive
    Digital = _QuantLib.Gaussian1dNonstandardSwaptionEngine_Digital

    def __init__(self, *args):
        this = _QuantLib.new_Gaussian1dNonstandardSwaptionEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Gaussian1dNonstandardSwaptionEngine
    __del__ = lambda self: None
Gaussian1dNonstandardSwaptionEngine_swigregister = _QuantLib.Gaussian1dNonstandardSwaptionEngine_swigregister
Gaussian1dNonstandardSwaptionEngine_swigregister(Gaussian1dNonstandardSwaptionEngine)

class Gaussian1dFloatFloatSwaptionEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gaussian1dFloatFloatSwaptionEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Gaussian1dFloatFloatSwaptionEngine, name)
    __repr__ = _swig_repr
    NoProb = _QuantLib.Gaussian1dFloatFloatSwaptionEngine_NoProb
    Naive = _QuantLib.Gaussian1dFloatFloatSwaptionEngine_Naive
    Digital = _QuantLib.Gaussian1dFloatFloatSwaptionEngine_Digital

    def __init__(self, *args):
        this = _QuantLib.new_Gaussian1dFloatFloatSwaptionEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def discountingCurve(self):
        return _QuantLib.Gaussian1dFloatFloatSwaptionEngine_discountingCurve(self)
    __swig_destroy__ = _QuantLib.delete_Gaussian1dFloatFloatSwaptionEngine
    __del__ = lambda self: None
Gaussian1dFloatFloatSwaptionEngine_swigregister = _QuantLib.Gaussian1dFloatFloatSwaptionEngine_swigregister
Gaussian1dFloatFloatSwaptionEngine_swigregister(Gaussian1dFloatFloatSwaptionEngine)

class FdSimpleBSSwingEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdSimpleBSSwingEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdSimpleBSSwingEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FdSimpleBSSwingEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdSimpleBSSwingEngine
    __del__ = lambda self: None
FdSimpleBSSwingEngine_swigregister = _QuantLib.FdSimpleBSSwingEngine_swigregister
FdSimpleBSSwingEngine_swigregister(FdSimpleBSSwingEngine)

class FdSimpleExtOUJumpSwingEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdSimpleExtOUJumpSwingEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdSimpleExtOUJumpSwingEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FdSimpleExtOUJumpSwingEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdSimpleExtOUJumpSwingEngine
    __del__ = lambda self: None
FdSimpleExtOUJumpSwingEngine_swigregister = _QuantLib.FdSimpleExtOUJumpSwingEngine_swigregister
FdSimpleExtOUJumpSwingEngine_swigregister(FdSimpleExtOUJumpSwingEngine)

class AnalyticCEVEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticCEVEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticCEVEngine, name)
    __repr__ = _swig_repr

    def __init__(self, f0, alpha, beta, rTS):
        this = _QuantLib.new_AnalyticCEVEngine(f0, alpha, beta, rTS)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AnalyticCEVEngine
    __del__ = lambda self: None
AnalyticCEVEngine_swigregister = _QuantLib.AnalyticCEVEngine_swigregister
AnalyticCEVEngine_swigregister(AnalyticCEVEngine)

class BinomialCRRVanillaEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialCRRVanillaEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialCRRVanillaEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        this = _QuantLib.new_BinomialCRRVanillaEngine(arg2, steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialCRRVanillaEngine
    __del__ = lambda self: None
BinomialCRRVanillaEngine_swigregister = _QuantLib.BinomialCRRVanillaEngine_swigregister
BinomialCRRVanillaEngine_swigregister(BinomialCRRVanillaEngine)

class BinomialJRVanillaEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialJRVanillaEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialJRVanillaEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        this = _QuantLib.new_BinomialJRVanillaEngine(arg2, steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialJRVanillaEngine
    __del__ = lambda self: None
BinomialJRVanillaEngine_swigregister = _QuantLib.BinomialJRVanillaEngine_swigregister
BinomialJRVanillaEngine_swigregister(BinomialJRVanillaEngine)

class BinomialEQPVanillaEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialEQPVanillaEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialEQPVanillaEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        this = _QuantLib.new_BinomialEQPVanillaEngine(arg2, steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialEQPVanillaEngine
    __del__ = lambda self: None
BinomialEQPVanillaEngine_swigregister = _QuantLib.BinomialEQPVanillaEngine_swigregister
BinomialEQPVanillaEngine_swigregister(BinomialEQPVanillaEngine)

class BinomialTrigeorgisVanillaEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialTrigeorgisVanillaEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialTrigeorgisVanillaEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        this = _QuantLib.new_BinomialTrigeorgisVanillaEngine(arg2, steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialTrigeorgisVanillaEngine
    __del__ = lambda self: None
BinomialTrigeorgisVanillaEngine_swigregister = _QuantLib.BinomialTrigeorgisVanillaEngine_swigregister
BinomialTrigeorgisVanillaEngine_swigregister(BinomialTrigeorgisVanillaEngine)

class BinomialTianVanillaEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialTianVanillaEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialTianVanillaEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        this = _QuantLib.new_BinomialTianVanillaEngine(arg2, steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialTianVanillaEngine
    __del__ = lambda self: None
BinomialTianVanillaEngine_swigregister = _QuantLib.BinomialTianVanillaEngine_swigregister
BinomialTianVanillaEngine_swigregister(BinomialTianVanillaEngine)

class BinomialLRVanillaEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialLRVanillaEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialLRVanillaEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        this = _QuantLib.new_BinomialLRVanillaEngine(arg2, steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialLRVanillaEngine
    __del__ = lambda self: None
BinomialLRVanillaEngine_swigregister = _QuantLib.BinomialLRVanillaEngine_swigregister
BinomialLRVanillaEngine_swigregister(BinomialLRVanillaEngine)

class BinomialJ4VanillaEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinomialJ4VanillaEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinomialJ4VanillaEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        this = _QuantLib.new_BinomialJ4VanillaEngine(arg2, steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BinomialJ4VanillaEngine
    __del__ = lambda self: None
BinomialJ4VanillaEngine_swigregister = _QuantLib.BinomialJ4VanillaEngine_swigregister
BinomialJ4VanillaEngine_swigregister(BinomialJ4VanillaEngine)


def BinomialVanillaEngine(
        process, type, steps):
    type = type.lower()
    if type == "crr" or type == "coxrossrubinstein":
        cls = BinomialCRRVanillaEngine
    elif type == "jr" or type == "jarrowrudd":
        cls = BinomialJRVanillaEngine
    elif type == "eqp":
        cls = BinomialEQPVanillaEngine
    elif type == "trigeorgis":
        cls = BinomialTrigeorgisVanillaEngine
    elif type == "tian":
        cls = BinomialTianVanillaEngine
    elif type == "lr" or type == "leisenreimer":
        cls = BinomialLRVanillaEngine
    elif type == "j4" or type == "joshi4":
        cls = BinomialJ4VanillaEngine
    else:
        raise RuntimeError("unknown binomial engine type: %s" % type);
    return cls(process, steps)

class AnalyticBSMHullWhiteEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticBSMHullWhiteEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticBSMHullWhiteEngine, name)
    __repr__ = _swig_repr

    def __init__(self, equityShortRateCorrelation, arg3, arg4):
        this = _QuantLib.new_AnalyticBSMHullWhiteEngine(equityShortRateCorrelation, arg3, arg4)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AnalyticBSMHullWhiteEngine
    __del__ = lambda self: None
AnalyticBSMHullWhiteEngine_swigregister = _QuantLib.AnalyticBSMHullWhiteEngine_swigregister
AnalyticBSMHullWhiteEngine_swigregister(AnalyticBSMHullWhiteEngine)

class AnalyticDigitalAmericanEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticDigitalAmericanEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticDigitalAmericanEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process):
        this = _QuantLib.new_AnalyticDigitalAmericanEngine(process)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AnalyticDigitalAmericanEngine
    __del__ = lambda self: None
AnalyticDigitalAmericanEngine_swigregister = _QuantLib.AnalyticDigitalAmericanEngine_swigregister
AnalyticDigitalAmericanEngine_swigregister(AnalyticDigitalAmericanEngine)

class AnalyticDigitalAmericanKOEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticDigitalAmericanKOEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticDigitalAmericanKOEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process):
        this = _QuantLib.new_AnalyticDigitalAmericanKOEngine(process)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AnalyticDigitalAmericanKOEngine
    __del__ = lambda self: None
AnalyticDigitalAmericanKOEngine_swigregister = _QuantLib.AnalyticDigitalAmericanKOEngine_swigregister
AnalyticDigitalAmericanKOEngine_swigregister(AnalyticDigitalAmericanKOEngine)

class AnalyticEuropeanEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticEuropeanEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticEuropeanEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_AnalyticEuropeanEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AnalyticEuropeanEngine
    __del__ = lambda self: None
AnalyticEuropeanEngine_swigregister = _QuantLib.AnalyticEuropeanEngine_swigregister
AnalyticEuropeanEngine_swigregister(AnalyticEuropeanEngine)

class AnalyticGJRGARCHEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticGJRGARCHEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticGJRGARCHEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process):
        this = _QuantLib.new_AnalyticGJRGARCHEngine(process)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AnalyticGJRGARCHEngine
    __del__ = lambda self: None
AnalyticGJRGARCHEngine_swigregister = _QuantLib.AnalyticGJRGARCHEngine_swigregister
AnalyticGJRGARCHEngine_swigregister(AnalyticGJRGARCHEngine)

class AnalyticHestonEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticHestonEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticHestonEngine, name)
    __repr__ = _swig_repr
    Gatheral = _QuantLib.AnalyticHestonEngine_Gatheral
    BranchCorrection = _QuantLib.AnalyticHestonEngine_BranchCorrection
    AndersenPiterbarg = _QuantLib.AnalyticHestonEngine_AndersenPiterbarg
    AndersenPiterbargOptCV = _QuantLib.AnalyticHestonEngine_AndersenPiterbargOptCV
    AsymptoticChF = _QuantLib.AnalyticHestonEngine_AsymptoticChF
    OptimalCV = _QuantLib.AnalyticHestonEngine_OptimalCV

    def __init__(self, *args):
        this = _QuantLib.new_AnalyticHestonEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def numberOfEvaluations(self):
        return _QuantLib.AnalyticHestonEngine_numberOfEvaluations(self)
    if _newclass:
        doCalculation = staticmethod(_QuantLib.AnalyticHestonEngine_doCalculation)
    else:
        doCalculation = _QuantLib.AnalyticHestonEngine_doCalculation
    if _newclass:
        optimalControlVariate = staticmethod(_QuantLib.AnalyticHestonEngine_optimalControlVariate)
    else:
        optimalControlVariate = _QuantLib.AnalyticHestonEngine_optimalControlVariate

    def chF(self, real, imag, t):
        return _QuantLib.AnalyticHestonEngine_chF(self, real, imag, t)

    def lnChF(self, real, imag, t):
        return _QuantLib.AnalyticHestonEngine_lnChF(self, real, imag, t)
    __swig_destroy__ = _QuantLib.delete_AnalyticHestonEngine
    __del__ = lambda self: None
AnalyticHestonEngine_swigregister = _QuantLib.AnalyticHestonEngine_swigregister
AnalyticHestonEngine_swigregister(AnalyticHestonEngine)

def AnalyticHestonEngine_doCalculation(riskFreeDiscount, dividendDiscount, spotPrice, strikePrice, term, kappa, theta, sigma, v0, rho, type, integration, cpxLog, enginePtr, value, evaluations):
    return _QuantLib.AnalyticHestonEngine_doCalculation(riskFreeDiscount, dividendDiscount, spotPrice, strikePrice, term, kappa, theta, sigma, v0, rho, type, integration, cpxLog, enginePtr, value, evaluations)
AnalyticHestonEngine_doCalculation = _QuantLib.AnalyticHestonEngine_doCalculation

def AnalyticHestonEngine_optimalControlVariate(t, v0, kappa, theta, sigma, rho):
    return _QuantLib.AnalyticHestonEngine_optimalControlVariate(t, v0, kappa, theta, sigma, rho)
AnalyticHestonEngine_optimalControlVariate = _QuantLib.AnalyticHestonEngine_optimalControlVariate

class AnalyticHestonEngineIntegration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticHestonEngineIntegration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticHestonEngineIntegration, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        gaussLaguerre = staticmethod(_QuantLib.AnalyticHestonEngineIntegration_gaussLaguerre)
    else:
        gaussLaguerre = _QuantLib.AnalyticHestonEngineIntegration_gaussLaguerre
    if _newclass:
        gaussLegendre = staticmethod(_QuantLib.AnalyticHestonEngineIntegration_gaussLegendre)
    else:
        gaussLegendre = _QuantLib.AnalyticHestonEngineIntegration_gaussLegendre
    if _newclass:
        gaussChebyshev = staticmethod(_QuantLib.AnalyticHestonEngineIntegration_gaussChebyshev)
    else:
        gaussChebyshev = _QuantLib.AnalyticHestonEngineIntegration_gaussChebyshev
    if _newclass:
        gaussChebyshev2nd = staticmethod(_QuantLib.AnalyticHestonEngineIntegration_gaussChebyshev2nd)
    else:
        gaussChebyshev2nd = _QuantLib.AnalyticHestonEngineIntegration_gaussChebyshev2nd
    if _newclass:
        gaussLobatto = staticmethod(_QuantLib.AnalyticHestonEngineIntegration_gaussLobatto)
    else:
        gaussLobatto = _QuantLib.AnalyticHestonEngineIntegration_gaussLobatto
    if _newclass:
        gaussKronrod = staticmethod(_QuantLib.AnalyticHestonEngineIntegration_gaussKronrod)
    else:
        gaussKronrod = _QuantLib.AnalyticHestonEngineIntegration_gaussKronrod
    if _newclass:
        simpson = staticmethod(_QuantLib.AnalyticHestonEngineIntegration_simpson)
    else:
        simpson = _QuantLib.AnalyticHestonEngineIntegration_simpson
    if _newclass:
        trapezoid = staticmethod(_QuantLib.AnalyticHestonEngineIntegration_trapezoid)
    else:
        trapezoid = _QuantLib.AnalyticHestonEngineIntegration_trapezoid
    if _newclass:
        discreteSimpson = staticmethod(_QuantLib.AnalyticHestonEngineIntegration_discreteSimpson)
    else:
        discreteSimpson = _QuantLib.AnalyticHestonEngineIntegration_discreteSimpson
    if _newclass:
        discreteTrapezoid = staticmethod(_QuantLib.AnalyticHestonEngineIntegration_discreteTrapezoid)
    else:
        discreteTrapezoid = _QuantLib.AnalyticHestonEngineIntegration_discreteTrapezoid
    if _newclass:
        andersenPiterbargIntegrationLimit = staticmethod(_QuantLib.AnalyticHestonEngineIntegration_andersenPiterbargIntegrationLimit)
    else:
        andersenPiterbargIntegrationLimit = _QuantLib.AnalyticHestonEngineIntegration_andersenPiterbargIntegrationLimit

    def calculate(self, *args):
        return _QuantLib.AnalyticHestonEngineIntegration_calculate(self, *args)

    def numberOfEvaluations(self):
        return _QuantLib.AnalyticHestonEngineIntegration_numberOfEvaluations(self)

    def isAdaptiveIntegration(self):
        return _QuantLib.AnalyticHestonEngineIntegration_isAdaptiveIntegration(self)
    __swig_destroy__ = _QuantLib.delete_AnalyticHestonEngineIntegration
    __del__ = lambda self: None
AnalyticHestonEngineIntegration_swigregister = _QuantLib.AnalyticHestonEngineIntegration_swigregister
AnalyticHestonEngineIntegration_swigregister(AnalyticHestonEngineIntegration)

def AnalyticHestonEngineIntegration_gaussLaguerre(integrationOrder=128):
    return _QuantLib.AnalyticHestonEngineIntegration_gaussLaguerre(integrationOrder)
AnalyticHestonEngineIntegration_gaussLaguerre = _QuantLib.AnalyticHestonEngineIntegration_gaussLaguerre

def AnalyticHestonEngineIntegration_gaussLegendre(integrationOrder=128):
    return _QuantLib.AnalyticHestonEngineIntegration_gaussLegendre(integrationOrder)
AnalyticHestonEngineIntegration_gaussLegendre = _QuantLib.AnalyticHestonEngineIntegration_gaussLegendre

def AnalyticHestonEngineIntegration_gaussChebyshev(integrationOrder=128):
    return _QuantLib.AnalyticHestonEngineIntegration_gaussChebyshev(integrationOrder)
AnalyticHestonEngineIntegration_gaussChebyshev = _QuantLib.AnalyticHestonEngineIntegration_gaussChebyshev

def AnalyticHestonEngineIntegration_gaussChebyshev2nd(integrationOrder=128):
    return _QuantLib.AnalyticHestonEngineIntegration_gaussChebyshev2nd(integrationOrder)
AnalyticHestonEngineIntegration_gaussChebyshev2nd = _QuantLib.AnalyticHestonEngineIntegration_gaussChebyshev2nd

def AnalyticHestonEngineIntegration_gaussLobatto(relTolerance, absTolerance, maxEvaluations=1000):
    return _QuantLib.AnalyticHestonEngineIntegration_gaussLobatto(relTolerance, absTolerance, maxEvaluations)
AnalyticHestonEngineIntegration_gaussLobatto = _QuantLib.AnalyticHestonEngineIntegration_gaussLobatto

def AnalyticHestonEngineIntegration_gaussKronrod(absTolerance, maxEvaluations=1000):
    return _QuantLib.AnalyticHestonEngineIntegration_gaussKronrod(absTolerance, maxEvaluations)
AnalyticHestonEngineIntegration_gaussKronrod = _QuantLib.AnalyticHestonEngineIntegration_gaussKronrod

def AnalyticHestonEngineIntegration_simpson(absTolerance, maxEvaluations=1000):
    return _QuantLib.AnalyticHestonEngineIntegration_simpson(absTolerance, maxEvaluations)
AnalyticHestonEngineIntegration_simpson = _QuantLib.AnalyticHestonEngineIntegration_simpson

def AnalyticHestonEngineIntegration_trapezoid(absTolerance, maxEvaluations=1000):
    return _QuantLib.AnalyticHestonEngineIntegration_trapezoid(absTolerance, maxEvaluations)
AnalyticHestonEngineIntegration_trapezoid = _QuantLib.AnalyticHestonEngineIntegration_trapezoid

def AnalyticHestonEngineIntegration_discreteSimpson(evaluation=1000):
    return _QuantLib.AnalyticHestonEngineIntegration_discreteSimpson(evaluation)
AnalyticHestonEngineIntegration_discreteSimpson = _QuantLib.AnalyticHestonEngineIntegration_discreteSimpson

def AnalyticHestonEngineIntegration_discreteTrapezoid(evaluation=1000):
    return _QuantLib.AnalyticHestonEngineIntegration_discreteTrapezoid(evaluation)
AnalyticHestonEngineIntegration_discreteTrapezoid = _QuantLib.AnalyticHestonEngineIntegration_discreteTrapezoid

def AnalyticHestonEngineIntegration_andersenPiterbargIntegrationLimit(c_inf, epsilon, v0, t):
    return _QuantLib.AnalyticHestonEngineIntegration_andersenPiterbargIntegrationLimit(c_inf, epsilon, v0, t)
AnalyticHestonEngineIntegration_andersenPiterbargIntegrationLimit = _QuantLib.AnalyticHestonEngineIntegration_andersenPiterbargIntegrationLimit

class AnalyticPTDHestonEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticPTDHestonEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticPTDHestonEngine, name)
    __repr__ = _swig_repr
    Gatheral = _QuantLib.AnalyticPTDHestonEngine_Gatheral
    AndersenPiterbarg = _QuantLib.AnalyticPTDHestonEngine_AndersenPiterbarg

    def __init__(self, *args):
        this = _QuantLib.new_AnalyticPTDHestonEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def chF(self, real, imag, t):
        return _QuantLib.AnalyticPTDHestonEngine_chF(self, real, imag, t)

    def lnChF(self, real, imag, t):
        return _QuantLib.AnalyticPTDHestonEngine_lnChF(self, real, imag, t)
    __swig_destroy__ = _QuantLib.delete_AnalyticPTDHestonEngine
    __del__ = lambda self: None
AnalyticPTDHestonEngine_swigregister = _QuantLib.AnalyticPTDHestonEngine_swigregister
AnalyticPTDHestonEngine_swigregister(AnalyticPTDHestonEngine)

class AnalyticPDFHestonEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyticPDFHestonEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyticPDFHestonEngine, name)
    __repr__ = _swig_repr

    def __init__(self, model, gaussLobattoEps=1e-6, gaussLobattoIntegrationOrder=10000):
        this = _QuantLib.new_AnalyticPDFHestonEngine(model, gaussLobattoEps, gaussLobattoIntegrationOrder)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Pv(self, x_t, t):
        return _QuantLib.AnalyticPDFHestonEngine_Pv(self, x_t, t)

    def cdf(self, X, t):
        return _QuantLib.AnalyticPDFHestonEngine_cdf(self, X, t)
    __swig_destroy__ = _QuantLib.delete_AnalyticPDFHestonEngine
    __del__ = lambda self: None
AnalyticPDFHestonEngine_swigregister = _QuantLib.AnalyticPDFHestonEngine_swigregister
AnalyticPDFHestonEngine_swigregister(AnalyticPDFHestonEngine)

class BaroneAdesiWhaleyApproximationEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaroneAdesiWhaleyApproximationEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BaroneAdesiWhaleyApproximationEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process):
        this = _QuantLib.new_BaroneAdesiWhaleyApproximationEngine(process)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BaroneAdesiWhaleyApproximationEngine
    __del__ = lambda self: None
BaroneAdesiWhaleyApproximationEngine_swigregister = _QuantLib.BaroneAdesiWhaleyApproximationEngine_swigregister
BaroneAdesiWhaleyApproximationEngine_swigregister(BaroneAdesiWhaleyApproximationEngine)

class BatesEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BatesEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BatesEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_BatesEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BatesEngine
    __del__ = lambda self: None
BatesEngine_swigregister = _QuantLib.BatesEngine_swigregister
BatesEngine_swigregister(BatesEngine)

class BjerksundStenslandApproximationEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BjerksundStenslandApproximationEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BjerksundStenslandApproximationEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process):
        this = _QuantLib.new_BjerksundStenslandApproximationEngine(process)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BjerksundStenslandApproximationEngine
    __del__ = lambda self: None
BjerksundStenslandApproximationEngine_swigregister = _QuantLib.BjerksundStenslandApproximationEngine_swigregister
BjerksundStenslandApproximationEngine_swigregister(BjerksundStenslandApproximationEngine)

class COSHestonEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COSHestonEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, COSHestonEngine, name)
    __repr__ = _swig_repr

    def __init__(self, model, L=16, N=200):
        this = _QuantLib.new_COSHestonEngine(model, L, N)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def update(self):
        return _QuantLib.COSHestonEngine_update(self)

    def calculate(self):
        return _QuantLib.COSHestonEngine_calculate(self)

    def chF(self, u, t):
        return _QuantLib.COSHestonEngine_chF(self, u, t)

    def c1(self, t):
        return _QuantLib.COSHestonEngine_c1(self, t)

    def c2(self, t):
        return _QuantLib.COSHestonEngine_c2(self, t)

    def c3(self, t):
        return _QuantLib.COSHestonEngine_c3(self, t)

    def c4(self, t):
        return _QuantLib.COSHestonEngine_c4(self, t)

    def mu(self, t):
        return _QuantLib.COSHestonEngine_mu(self, t)

    def var(self, t):
        return _QuantLib.COSHestonEngine_var(self, t)

    def skew(self, t):
        return _QuantLib.COSHestonEngine_skew(self, t)

    def kurtosis(self, t):
        return _QuantLib.COSHestonEngine_kurtosis(self, t)
    __swig_destroy__ = _QuantLib.delete_COSHestonEngine
    __del__ = lambda self: None
COSHestonEngine_swigregister = _QuantLib.COSHestonEngine_swigregister
COSHestonEngine_swigregister(COSHestonEngine)

class ExponentialFittingHestonEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExponentialFittingHestonEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExponentialFittingHestonEngine, name)
    __repr__ = _swig_repr
    AndersenPiterbarg = _QuantLib.ExponentialFittingHestonEngine_AndersenPiterbarg
    AndersenPiterbargOptCV = _QuantLib.ExponentialFittingHestonEngine_AndersenPiterbargOptCV
    AsymptoticChF = _QuantLib.ExponentialFittingHestonEngine_AsymptoticChF
    OptimalCV = _QuantLib.ExponentialFittingHestonEngine_OptimalCV

    def __init__(self, *args):
        this = _QuantLib.new_ExponentialFittingHestonEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ExponentialFittingHestonEngine
    __del__ = lambda self: None
ExponentialFittingHestonEngine_swigregister = _QuantLib.ExponentialFittingHestonEngine_swigregister
ExponentialFittingHestonEngine_swigregister(ExponentialFittingHestonEngine)

class FdBlackScholesVanillaEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdBlackScholesVanillaEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdBlackScholesVanillaEngine, name)
    __repr__ = _swig_repr
    Spot = _QuantLib.FdBlackScholesVanillaEngine_Spot
    Escrowed = _QuantLib.FdBlackScholesVanillaEngine_Escrowed

    def __init__(self, *args):
        this = _QuantLib.new_FdBlackScholesVanillaEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        make = staticmethod(_QuantLib.FdBlackScholesVanillaEngine_make)
    else:
        make = _QuantLib.FdBlackScholesVanillaEngine_make
    __swig_destroy__ = _QuantLib.delete_FdBlackScholesVanillaEngine
    __del__ = lambda self: None
FdBlackScholesVanillaEngine_swigregister = _QuantLib.FdBlackScholesVanillaEngine_swigregister
FdBlackScholesVanillaEngine_swigregister(FdBlackScholesVanillaEngine)

def FdBlackScholesVanillaEngine_make(*args, **kwargs):
    return _QuantLib.FdBlackScholesVanillaEngine_make(*args, **kwargs)
FdBlackScholesVanillaEngine_make = _QuantLib.FdBlackScholesVanillaEngine_make

class FdBatesVanillaEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdBatesVanillaEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdBatesVanillaEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FdBatesVanillaEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdBatesVanillaEngine
    __del__ = lambda self: None
FdBatesVanillaEngine_swigregister = _QuantLib.FdBatesVanillaEngine_swigregister
FdBatesVanillaEngine_swigregister(FdBatesVanillaEngine)

class FdCEVVanillaEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdCEVVanillaEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdCEVVanillaEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FdCEVVanillaEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdCEVVanillaEngine
    __del__ = lambda self: None
FdCEVVanillaEngine_swigregister = _QuantLib.FdCEVVanillaEngine_swigregister
FdCEVVanillaEngine_swigregister(FdCEVVanillaEngine)

class FdHestonVanillaEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdHestonVanillaEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdHestonVanillaEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FdHestonVanillaEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def update(self):
        return _QuantLib.FdHestonVanillaEngine_update(self)

    def enableMultipleStrikesCaching(self, strikes):
        return _QuantLib.FdHestonVanillaEngine_enableMultipleStrikesCaching(self, strikes)

    def getSolverDesc(self, equityScaleFactor):
        return _QuantLib.FdHestonVanillaEngine_getSolverDesc(self, equityScaleFactor)
    __swig_destroy__ = _QuantLib.delete_FdHestonVanillaEngine
    __del__ = lambda self: None
FdHestonVanillaEngine_swigregister = _QuantLib.FdHestonVanillaEngine_swigregister
FdHestonVanillaEngine_swigregister(FdHestonVanillaEngine)

class MakeFdHestonVanillaEngine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MakeFdHestonVanillaEngine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MakeFdHestonVanillaEngine, name)
    __repr__ = _swig_repr

    def __init__(self, hestonModel):
        this = _QuantLib.new_MakeFdHestonVanillaEngine(hestonModel)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def withQuantoHelper(self, quantoHelper):
        return _QuantLib.MakeFdHestonVanillaEngine_withQuantoHelper(self, quantoHelper)

    def withTGrid(self, tGrid):
        return _QuantLib.MakeFdHestonVanillaEngine_withTGrid(self, tGrid)

    def withXGrid(self, xGrid):
        return _QuantLib.MakeFdHestonVanillaEngine_withXGrid(self, xGrid)

    def withVGrid(self, vGrid):
        return _QuantLib.MakeFdHestonVanillaEngine_withVGrid(self, vGrid)

    def withDampingSteps(self, dampingSteps):
        return _QuantLib.MakeFdHestonVanillaEngine_withDampingSteps(self, dampingSteps)

    def withFdmSchemeDesc(self, schemeDesc):
        return _QuantLib.MakeFdHestonVanillaEngine_withFdmSchemeDesc(self, schemeDesc)

    def withLeverageFunction(self, leverageFct):
        return _QuantLib.MakeFdHestonVanillaEngine_withLeverageFunction(self, leverageFct)

    def toPricingEngine(self):
        return _QuantLib.MakeFdHestonVanillaEngine_toPricingEngine(self)
    __swig_destroy__ = _QuantLib.delete_MakeFdHestonVanillaEngine
    __del__ = lambda self: None
MakeFdHestonVanillaEngine_swigregister = _QuantLib.MakeFdHestonVanillaEngine_swigregister
MakeFdHestonVanillaEngine_swigregister(MakeFdHestonVanillaEngine)

class FdSabrVanillaEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdSabrVanillaEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdSabrVanillaEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FdSabrVanillaEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdSabrVanillaEngine
    __del__ = lambda self: None
FdSabrVanillaEngine_swigregister = _QuantLib.FdSabrVanillaEngine_swigregister
FdSabrVanillaEngine_swigregister(FdSabrVanillaEngine)

class FFTVarianceGammaEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FFTVarianceGammaEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FFTVarianceGammaEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process, logStrikeSpacing=0.001):
        this = _QuantLib.new_FFTVarianceGammaEngine(process, logStrikeSpacing)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def precalculate(self, optionList):
        return _QuantLib.FFTVarianceGammaEngine_precalculate(self, optionList)
    __swig_destroy__ = _QuantLib.delete_FFTVarianceGammaEngine
    __del__ = lambda self: None
FFTVarianceGammaEngine_swigregister = _QuantLib.FFTVarianceGammaEngine_swigregister
FFTVarianceGammaEngine_swigregister(FFTVarianceGammaEngine)

class FFTVanillaEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FFTVanillaEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FFTVanillaEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process, logStrikeSpacing=0.001):
        this = _QuantLib.new_FFTVanillaEngine(process, logStrikeSpacing)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def precalculate(self, optionList):
        return _QuantLib.FFTVanillaEngine_precalculate(self, optionList)
    __swig_destroy__ = _QuantLib.delete_FFTVanillaEngine
    __del__ = lambda self: None
FFTVanillaEngine_swigregister = _QuantLib.FFTVanillaEngine_swigregister
FFTVanillaEngine_swigregister(FFTVanillaEngine)

class HestonExpansionEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HestonExpansionEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HestonExpansionEngine, name)
    __repr__ = _swig_repr
    LPP2 = _QuantLib.HestonExpansionEngine_LPP2
    LPP3 = _QuantLib.HestonExpansionEngine_LPP3
    Forde = _QuantLib.HestonExpansionEngine_Forde

    def __init__(self, model, formula):
        this = _QuantLib.new_HestonExpansionEngine(model, formula)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_HestonExpansionEngine
    __del__ = lambda self: None
HestonExpansionEngine_swigregister = _QuantLib.HestonExpansionEngine_swigregister
HestonExpansionEngine_swigregister(HestonExpansionEngine)

class IntegralEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegralEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntegralEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _QuantLib.new_IntegralEngine(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_IntegralEngine
    __del__ = lambda self: None
IntegralEngine_swigregister = _QuantLib.IntegralEngine_swigregister
IntegralEngine_swigregister(IntegralEngine)

class JuQuadraticApproximationEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JuQuadraticApproximationEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JuQuadraticApproximationEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process):
        this = _QuantLib.new_JuQuadraticApproximationEngine(process)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_JuQuadraticApproximationEngine
    __del__ = lambda self: None
JuQuadraticApproximationEngine_swigregister = _QuantLib.JuQuadraticApproximationEngine_swigregister
JuQuadraticApproximationEngine_swigregister(JuQuadraticApproximationEngine)

class MCPREuropeanEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCPREuropeanEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCPREuropeanEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCPREuropeanEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCPREuropeanEngine
    __del__ = lambda self: None
MCPREuropeanEngine_swigregister = _QuantLib.MCPREuropeanEngine_swigregister
MCPREuropeanEngine_swigregister(MCPREuropeanEngine)

class MCLDEuropeanEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCLDEuropeanEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCLDEuropeanEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCLDEuropeanEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCLDEuropeanEngine
    __del__ = lambda self: None
MCLDEuropeanEngine_swigregister = _QuantLib.MCLDEuropeanEngine_swigregister
MCLDEuropeanEngine_swigregister(MCLDEuropeanEngine)


def MCEuropeanEngine(
        process,
        traits,
        timeSteps=None,
        timeStepsPerYear=None,
        brownianBridge=False,
        antitheticVariate=False,
        requiredSamples=None,
        requiredTolerance=None,
        maxSamples=None,
        seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPREuropeanEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDEuropeanEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(
        process,
        timeSteps,
        timeStepsPerYear,
        brownianBridge,
        antitheticVariate,
        requiredSamples,
        requiredTolerance,
        maxSamples,
        seed)

class MakeMCPREuropeanEngine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MakeMCPREuropeanEngine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MakeMCPREuropeanEngine, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        this = _QuantLib.new_MakeMCPREuropeanEngine(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def withSteps(self, steps):
        return _QuantLib.MakeMCPREuropeanEngine_withSteps(self, steps)

    def withStepsPerYear(self, steps):
        return _QuantLib.MakeMCPREuropeanEngine_withStepsPerYear(self, steps)

    def withBrownianBridge(self, b=True):
        return _QuantLib.MakeMCPREuropeanEngine_withBrownianBridge(self, b)

    def withSamples(self, samples):
        return _QuantLib.MakeMCPREuropeanEngine_withSamples(self, samples)

    def withAbsoluteTolerance(self, tolerance):
        return _QuantLib.MakeMCPREuropeanEngine_withAbsoluteTolerance(self, tolerance)

    def withMaxSamples(self, samples):
        return _QuantLib.MakeMCPREuropeanEngine_withMaxSamples(self, samples)

    def withSeed(self, seed):
        return _QuantLib.MakeMCPREuropeanEngine_withSeed(self, seed)

    def withAntitheticVariate(self, b=True):
        return _QuantLib.MakeMCPREuropeanEngine_withAntitheticVariate(self, b)

    def toPricingEngine(self):
        return _QuantLib.MakeMCPREuropeanEngine_toPricingEngine(self)
    __swig_destroy__ = _QuantLib.delete_MakeMCPREuropeanEngine
    __del__ = lambda self: None
MakeMCPREuropeanEngine_swigregister = _QuantLib.MakeMCPREuropeanEngine_swigregister
MakeMCPREuropeanEngine_swigregister(MakeMCPREuropeanEngine)

class MakeMCLDEuropeanEngine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MakeMCLDEuropeanEngine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MakeMCLDEuropeanEngine, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        this = _QuantLib.new_MakeMCLDEuropeanEngine(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def withSteps(self, steps):
        return _QuantLib.MakeMCLDEuropeanEngine_withSteps(self, steps)

    def withStepsPerYear(self, steps):
        return _QuantLib.MakeMCLDEuropeanEngine_withStepsPerYear(self, steps)

    def withBrownianBridge(self, b=True):
        return _QuantLib.MakeMCLDEuropeanEngine_withBrownianBridge(self, b)

    def withSamples(self, samples):
        return _QuantLib.MakeMCLDEuropeanEngine_withSamples(self, samples)

    def withAbsoluteTolerance(self, tolerance):
        return _QuantLib.MakeMCLDEuropeanEngine_withAbsoluteTolerance(self, tolerance)

    def withMaxSamples(self, samples):
        return _QuantLib.MakeMCLDEuropeanEngine_withMaxSamples(self, samples)

    def withSeed(self, seed):
        return _QuantLib.MakeMCLDEuropeanEngine_withSeed(self, seed)

    def withAntitheticVariate(self, b=True):
        return _QuantLib.MakeMCLDEuropeanEngine_withAntitheticVariate(self, b)

    def toPricingEngine(self):
        return _QuantLib.MakeMCLDEuropeanEngine_toPricingEngine(self)
    __swig_destroy__ = _QuantLib.delete_MakeMCLDEuropeanEngine
    __del__ = lambda self: None
MakeMCLDEuropeanEngine_swigregister = _QuantLib.MakeMCLDEuropeanEngine_swigregister
MakeMCLDEuropeanEngine_swigregister(MakeMCLDEuropeanEngine)

class MCPRAmericanEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCPRAmericanEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCPRAmericanEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCPRAmericanEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCPRAmericanEngine
    __del__ = lambda self: None
MCPRAmericanEngine_swigregister = _QuantLib.MCPRAmericanEngine_swigregister
MCPRAmericanEngine_swigregister(MCPRAmericanEngine)

class MCLDAmericanEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCLDAmericanEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCLDAmericanEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCLDAmericanEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCLDAmericanEngine
    __del__ = lambda self: None
MCLDAmericanEngine_swigregister = _QuantLib.MCLDAmericanEngine_swigregister
MCLDAmericanEngine_swigregister(MCLDAmericanEngine)


def MCAmericanEngine(
        process,
        traits,
        timeSteps=None,
        timeStepsPerYear=None,
        antitheticVariate=False,
        controlVariate=False,
        requiredSamples=None,
        requiredTolerance=None,
        maxSamples=None,
        seed=0,
        polynomOrder=2,
        polynomType=LsmBasisSystem.Monomial,
        nCalibrationSamples=2048,
        antitheticVariateCalibration=None,
        seedCalibration=None):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRAmericanEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDAmericanEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               timeSteps,
               timeStepsPerYear,
               antitheticVariate,
               controlVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed,
               polynomOrder,
               polynomType,
               nCalibrationSamples,
               antitheticVariateCalibration,
               seedCalibration if seedCalibration is not None else nullInt())

class VarianceGammaEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarianceGammaEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VarianceGammaEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process):
        this = _QuantLib.new_VarianceGammaEngine(process)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_VarianceGammaEngine
    __del__ = lambda self: None
VarianceGammaEngine_swigregister = _QuantLib.VarianceGammaEngine_swigregister
VarianceGammaEngine_swigregister(VarianceGammaEngine)

class FDCNBermudanEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FDCNBermudanEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FDCNBermudanEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process, timeSteps=100, gridPoints=100, timeDependent=False):
        this = _QuantLib.new_FDCNBermudanEngine(process, timeSteps, gridPoints, timeDependent)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FDCNBermudanEngine
    __del__ = lambda self: None
FDCNBermudanEngine_swigregister = _QuantLib.FDCNBermudanEngine_swigregister
FDCNBermudanEngine_swigregister(FDCNBermudanEngine)

class FDCNEuropeanEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FDCNEuropeanEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FDCNEuropeanEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process, timeSteps=100, gridPoints=100, timeDependent=False):
        this = _QuantLib.new_FDCNEuropeanEngine(process, timeSteps, gridPoints, timeDependent)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FDCNEuropeanEngine
    __del__ = lambda self: None
FDCNEuropeanEngine_swigregister = _QuantLib.FDCNEuropeanEngine_swigregister
FDCNEuropeanEngine_swigregister(FDCNEuropeanEngine)

class MCPREuropeanHestonEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCPREuropeanHestonEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCPREuropeanHestonEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCPREuropeanHestonEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCPREuropeanHestonEngine
    __del__ = lambda self: None
MCPREuropeanHestonEngine_swigregister = _QuantLib.MCPREuropeanHestonEngine_swigregister
MCPREuropeanHestonEngine_swigregister(MCPREuropeanHestonEngine)

class MCLDEuropeanHestonEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCLDEuropeanHestonEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCLDEuropeanHestonEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCLDEuropeanHestonEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCLDEuropeanHestonEngine
    __del__ = lambda self: None
MCLDEuropeanHestonEngine_swigregister = _QuantLib.MCLDEuropeanHestonEngine_swigregister
MCLDEuropeanHestonEngine_swigregister(MCLDEuropeanHestonEngine)


def MCEuropeanHestonEngine(
        process,
        traits,
        timeSteps=None,
        timeStepsPerYear=None,
        antitheticVariate=False,
        requiredSamples=None,
        requiredTolerance=None,
        maxSamples=None,
        seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPREuropeanHestonEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDEuropeanHestonEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(
        process,
        timeSteps,
        timeStepsPerYear,
        antitheticVariate,
        requiredSamples,
        requiredTolerance,
        maxSamples,
        seed)

class MakeMCPREuropeanHestonEngine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MakeMCPREuropeanHestonEngine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MakeMCPREuropeanHestonEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process):
        this = _QuantLib.new_MakeMCPREuropeanHestonEngine(process)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def withSteps(self, steps):
        return _QuantLib.MakeMCPREuropeanHestonEngine_withSteps(self, steps)

    def withStepsPerYear(self, steps):
        return _QuantLib.MakeMCPREuropeanHestonEngine_withStepsPerYear(self, steps)

    def withSamples(self, samples):
        return _QuantLib.MakeMCPREuropeanHestonEngine_withSamples(self, samples)

    def withAbsoluteTolerance(self, tolerance):
        return _QuantLib.MakeMCPREuropeanHestonEngine_withAbsoluteTolerance(self, tolerance)

    def withMaxSamples(self, samples):
        return _QuantLib.MakeMCPREuropeanHestonEngine_withMaxSamples(self, samples)

    def withSeed(self, seed):
        return _QuantLib.MakeMCPREuropeanHestonEngine_withSeed(self, seed)

    def withAntitheticVariate(self, b=True):
        return _QuantLib.MakeMCPREuropeanHestonEngine_withAntitheticVariate(self, b)

    def toPricingEngine(self):
        return _QuantLib.MakeMCPREuropeanHestonEngine_toPricingEngine(self)
    __swig_destroy__ = _QuantLib.delete_MakeMCPREuropeanHestonEngine
    __del__ = lambda self: None
MakeMCPREuropeanHestonEngine_swigregister = _QuantLib.MakeMCPREuropeanHestonEngine_swigregister
MakeMCPREuropeanHestonEngine_swigregister(MakeMCPREuropeanHestonEngine)

class MakeMCLDEuropeanHestonEngine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MakeMCLDEuropeanHestonEngine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MakeMCLDEuropeanHestonEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process):
        this = _QuantLib.new_MakeMCLDEuropeanHestonEngine(process)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def withSteps(self, steps):
        return _QuantLib.MakeMCLDEuropeanHestonEngine_withSteps(self, steps)

    def withStepsPerYear(self, steps):
        return _QuantLib.MakeMCLDEuropeanHestonEngine_withStepsPerYear(self, steps)

    def withSamples(self, samples):
        return _QuantLib.MakeMCLDEuropeanHestonEngine_withSamples(self, samples)

    def withAbsoluteTolerance(self, tolerance):
        return _QuantLib.MakeMCLDEuropeanHestonEngine_withAbsoluteTolerance(self, tolerance)

    def withMaxSamples(self, samples):
        return _QuantLib.MakeMCLDEuropeanHestonEngine_withMaxSamples(self, samples)

    def withSeed(self, seed):
        return _QuantLib.MakeMCLDEuropeanHestonEngine_withSeed(self, seed)

    def withAntitheticVariate(self, b=True):
        return _QuantLib.MakeMCLDEuropeanHestonEngine_withAntitheticVariate(self, b)

    def toPricingEngine(self):
        return _QuantLib.MakeMCLDEuropeanHestonEngine_toPricingEngine(self)
    __swig_destroy__ = _QuantLib.delete_MakeMCLDEuropeanHestonEngine
    __del__ = lambda self: None
MakeMCLDEuropeanHestonEngine_swigregister = _QuantLib.MakeMCLDEuropeanHestonEngine_swigregister
MakeMCLDEuropeanHestonEngine_swigregister(MakeMCLDEuropeanHestonEngine)

class FDCNAmericanEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FDCNAmericanEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FDCNAmericanEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process, timeSteps=100, gridPoints=100, timeDependent=False):
        this = _QuantLib.new_FDCNAmericanEngine(process, timeSteps, gridPoints, timeDependent)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FDCNAmericanEngine
    __del__ = lambda self: None
FDCNAmericanEngine_swigregister = _QuantLib.FDCNAmericanEngine_swigregister
FDCNAmericanEngine_swigregister(FDCNAmericanEngine)

class FDCNShoutEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FDCNShoutEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FDCNShoutEngine, name)
    __repr__ = _swig_repr

    def __init__(self, process, timeSteps=100, gridPoints=100, timeDependent=False):
        this = _QuantLib.new_FDCNShoutEngine(process, timeSteps, gridPoints, timeDependent)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FDCNShoutEngine
    __del__ = lambda self: None
FDCNShoutEngine_swigregister = _QuantLib.FDCNShoutEngine_swigregister
FDCNShoutEngine_swigregister(FDCNShoutEngine)

class MCPREuropeanGJRGARCHEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCPREuropeanGJRGARCHEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCPREuropeanGJRGARCHEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCPREuropeanGJRGARCHEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCPREuropeanGJRGARCHEngine
    __del__ = lambda self: None
MCPREuropeanGJRGARCHEngine_swigregister = _QuantLib.MCPREuropeanGJRGARCHEngine_swigregister
MCPREuropeanGJRGARCHEngine_swigregister(MCPREuropeanGJRGARCHEngine)

class MCLDEuropeanGJRGARCHEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCLDEuropeanGJRGARCHEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCLDEuropeanGJRGARCHEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_MCLDEuropeanGJRGARCHEngine(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MCLDEuropeanGJRGARCHEngine
    __del__ = lambda self: None
MCLDEuropeanGJRGARCHEngine_swigregister = _QuantLib.MCLDEuropeanGJRGARCHEngine_swigregister
MCLDEuropeanGJRGARCHEngine_swigregister(MCLDEuropeanGJRGARCHEngine)


def MCEuropeanGJRGARCHEngine(
        process,
        traits,
        timeSteps=None,
        timeStepsPerYear=None,
        antitheticVariate=False,
        requiredSamples=None,
        requiredTolerance=None,
        maxSamples=None,
        seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPREuropeanGJRGARCHEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDEuropeanGJRGARCHEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(
        process,
        timeSteps,
        timeStepsPerYear,
        antitheticVariate,
        requiredSamples,
        requiredTolerance,
        maxSamples,
        seed)

class YoYInflationBlackCapFloorEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YoYInflationBlackCapFloorEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YoYInflationBlackCapFloorEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, vol, nominalTermStructure):
        this = _QuantLib.new_YoYInflationBlackCapFloorEngine(arg2, vol, nominalTermStructure)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_YoYInflationBlackCapFloorEngine
    __del__ = lambda self: None
YoYInflationBlackCapFloorEngine_swigregister = _QuantLib.YoYInflationBlackCapFloorEngine_swigregister
YoYInflationBlackCapFloorEngine_swigregister(YoYInflationBlackCapFloorEngine)

class YoYInflationUnitDisplacedBlackCapFloorEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YoYInflationUnitDisplacedBlackCapFloorEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YoYInflationUnitDisplacedBlackCapFloorEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, vol, nominalTermStructure):
        this = _QuantLib.new_YoYInflationUnitDisplacedBlackCapFloorEngine(arg2, vol, nominalTermStructure)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_YoYInflationUnitDisplacedBlackCapFloorEngine
    __del__ = lambda self: None
YoYInflationUnitDisplacedBlackCapFloorEngine_swigregister = _QuantLib.YoYInflationUnitDisplacedBlackCapFloorEngine_swigregister
YoYInflationUnitDisplacedBlackCapFloorEngine_swigregister(YoYInflationUnitDisplacedBlackCapFloorEngine)

class YoYInflationBachelierCapFloorEngine(PricingEngine):
    __swig_setmethods__ = {}
    for _s in [PricingEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YoYInflationBachelierCapFloorEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [PricingEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YoYInflationBachelierCapFloorEngine, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, vol, nominalTermStructure):
        this = _QuantLib.new_YoYInflationBachelierCapFloorEngine(arg2, vol, nominalTermStructure)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_YoYInflationBachelierCapFloorEngine
    __del__ = lambda self: None
YoYInflationBachelierCapFloorEngine_swigregister = _QuantLib.YoYInflationBachelierCapFloorEngine_swigregister
YoYInflationBachelierCapFloorEngine_swigregister(YoYInflationBachelierCapFloorEngine)

class ExchangeRate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExchangeRate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExchangeRate, name)
    __repr__ = _swig_repr
    Direct = _QuantLib.ExchangeRate_Direct
    Derived = _QuantLib.ExchangeRate_Derived

    def __init__(self, source, target, rate):
        this = _QuantLib.new_ExchangeRate(source, target, rate)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def source(self):
        return _QuantLib.ExchangeRate_source(self)

    def target(self):
        return _QuantLib.ExchangeRate_target(self)

    def type(self):
        return _QuantLib.ExchangeRate_type(self)

    def rate(self):
        return _QuantLib.ExchangeRate_rate(self)

    def exchange(self, amount):
        return _QuantLib.ExchangeRate_exchange(self, amount)
    if _newclass:
        chain = staticmethod(_QuantLib.ExchangeRate_chain)
    else:
        chain = _QuantLib.ExchangeRate_chain
    __swig_destroy__ = _QuantLib.delete_ExchangeRate
    __del__ = lambda self: None
ExchangeRate_swigregister = _QuantLib.ExchangeRate_swigregister
ExchangeRate_swigregister(ExchangeRate)

def ExchangeRate_chain(r1, r2):
    return _QuantLib.ExchangeRate_chain(r1, r2)
ExchangeRate_chain = _QuantLib.ExchangeRate_chain

class ExchangeRateManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExchangeRateManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExchangeRateManager, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        instance = staticmethod(_QuantLib.ExchangeRateManager_instance)
    else:
        instance = _QuantLib.ExchangeRateManager_instance

    def add(self, *args):
        return _QuantLib.ExchangeRateManager_add(self, *args)

    def lookup(self, *args):
        return _QuantLib.ExchangeRateManager_lookup(self, *args)

    def clear(self):
        return _QuantLib.ExchangeRateManager_clear(self)
    __swig_destroy__ = _QuantLib.delete_ExchangeRateManager
    __del__ = lambda self: None
ExchangeRateManager_swigregister = _QuantLib.ExchangeRateManager_swigregister
ExchangeRateManager_swigregister(ExchangeRateManager)

def ExchangeRateManager_instance():
    return _QuantLib.ExchangeRateManager_instance()
ExchangeRateManager_instance = _QuantLib.ExchangeRateManager_instance

class Exercise(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exercise, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Exercise, name)
    __repr__ = _swig_repr
    American = _QuantLib.Exercise_American
    Bermudan = _QuantLib.Exercise_Bermudan
    European = _QuantLib.Exercise_European

    def __init__(self, type):
        this = _QuantLib.new_Exercise(type)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def type(self):
        return _QuantLib.Exercise_type(self)

    def date(self, index):
        return _QuantLib.Exercise_date(self, index)

    def dateAt(self, index):
        return _QuantLib.Exercise_dateAt(self, index)

    def dates(self):
        return _QuantLib.Exercise_dates(self)

    def lastDate(self):
        return _QuantLib.Exercise_lastDate(self)
    __swig_destroy__ = _QuantLib.delete_Exercise
    __del__ = lambda self: None
Exercise_swigregister = _QuantLib.Exercise_swigregister
Exercise_swigregister(Exercise)

class EuropeanExercise(Exercise):
    __swig_setmethods__ = {}
    for _s in [Exercise]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EuropeanExercise, name, value)
    __swig_getmethods__ = {}
    for _s in [Exercise]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EuropeanExercise, name)
    __repr__ = _swig_repr

    def __init__(self, date):
        this = _QuantLib.new_EuropeanExercise(date)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EuropeanExercise
    __del__ = lambda self: None
EuropeanExercise_swigregister = _QuantLib.EuropeanExercise_swigregister
EuropeanExercise_swigregister(EuropeanExercise)

class RebatedExercise(Exercise):
    __swig_setmethods__ = {}
    for _s in [Exercise]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RebatedExercise, name, value)
    __swig_getmethods__ = {}
    for _s in [Exercise]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RebatedExercise, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_RebatedExercise(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def rebate(self, index):
        return _QuantLib.RebatedExercise_rebate(self, index)

    def rebatePaymentDate(self, index):
        return _QuantLib.RebatedExercise_rebatePaymentDate(self, index)

    def rebates(self):
        return _QuantLib.RebatedExercise_rebates(self)
    __swig_destroy__ = _QuantLib.delete_RebatedExercise
    __del__ = lambda self: None
RebatedExercise_swigregister = _QuantLib.RebatedExercise_swigregister
RebatedExercise_swigregister(RebatedExercise)

class EarlyExercise(Exercise):
    __swig_setmethods__ = {}
    for _s in [Exercise]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EarlyExercise, name, value)
    __swig_getmethods__ = {}
    for _s in [Exercise]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EarlyExercise, name)
    __repr__ = _swig_repr

    def __init__(self, type, payoffAtExpiry=False):
        this = _QuantLib.new_EarlyExercise(type, payoffAtExpiry)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def payoffAtExpiry(self):
        return _QuantLib.EarlyExercise_payoffAtExpiry(self)
    __swig_destroy__ = _QuantLib.delete_EarlyExercise
    __del__ = lambda self: None
EarlyExercise_swigregister = _QuantLib.EarlyExercise_swigregister
EarlyExercise_swigregister(EarlyExercise)

class AmericanExercise(EarlyExercise):
    __swig_setmethods__ = {}
    for _s in [EarlyExercise]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AmericanExercise, name, value)
    __swig_getmethods__ = {}
    for _s in [EarlyExercise]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AmericanExercise, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_AmericanExercise(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AmericanExercise
    __del__ = lambda self: None
AmericanExercise_swigregister = _QuantLib.AmericanExercise_swigregister
AmericanExercise_swigregister(AmericanExercise)

class BermudanExercise(EarlyExercise):
    __swig_setmethods__ = {}
    for _s in [EarlyExercise]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BermudanExercise, name, value)
    __swig_getmethods__ = {}
    for _s in [EarlyExercise]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BermudanExercise, name)
    __repr__ = _swig_repr

    def __init__(self, dates, payoffAtExpiry=False):
        this = _QuantLib.new_BermudanExercise(dates, payoffAtExpiry)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BermudanExercise
    __del__ = lambda self: None
BermudanExercise_swigregister = _QuantLib.BermudanExercise_swigregister
BermudanExercise_swigregister(BermudanExercise)

class SwingExercise(BermudanExercise):
    __swig_setmethods__ = {}
    for _s in [BermudanExercise]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwingExercise, name, value)
    __swig_getmethods__ = {}
    for _s in [BermudanExercise]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SwingExercise, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_SwingExercise(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def seconds(self):
        return _QuantLib.SwingExercise_seconds(self)

    def exerciseTimes(self, dc, refDate):
        return _QuantLib.SwingExercise_exerciseTimes(self, dc, refDate)
    __swig_destroy__ = _QuantLib.delete_SwingExercise
    __del__ = lambda self: None
SwingExercise_swigregister = _QuantLib.SwingExercise_swigregister
SwingExercise_swigregister(SwingExercise)

class Fdm1dMesher(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Fdm1dMesher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Fdm1dMesher, name)
    __repr__ = _swig_repr

    def __init__(self, size):
        this = _QuantLib.new_Fdm1dMesher(size)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def size(self):
        return _QuantLib.Fdm1dMesher_size(self)

    def dplus(self, index):
        return _QuantLib.Fdm1dMesher_dplus(self, index)

    def dminus(self, index):
        return _QuantLib.Fdm1dMesher_dminus(self, index)

    def location(self, index):
        return _QuantLib.Fdm1dMesher_location(self, index)

    def locations(self):
        return _QuantLib.Fdm1dMesher_locations(self)
    __swig_destroy__ = _QuantLib.delete_Fdm1dMesher
    __del__ = lambda self: None
Fdm1dMesher_swigregister = _QuantLib.Fdm1dMesher_swigregister
Fdm1dMesher_swigregister(Fdm1dMesher)

class Fdm1dMesherVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Fdm1dMesherVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Fdm1dMesherVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.Fdm1dMesherVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.Fdm1dMesherVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.Fdm1dMesherVector___bool__(self)

    def __len__(self):
        return _QuantLib.Fdm1dMesherVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.Fdm1dMesherVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.Fdm1dMesherVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.Fdm1dMesherVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.Fdm1dMesherVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.Fdm1dMesherVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.Fdm1dMesherVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.Fdm1dMesherVector_pop(self)

    def append(self, x):
        return _QuantLib.Fdm1dMesherVector_append(self, x)

    def empty(self):
        return _QuantLib.Fdm1dMesherVector_empty(self)

    def size(self):
        return _QuantLib.Fdm1dMesherVector_size(self)

    def swap(self, v):
        return _QuantLib.Fdm1dMesherVector_swap(self, v)

    def begin(self):
        return _QuantLib.Fdm1dMesherVector_begin(self)

    def end(self):
        return _QuantLib.Fdm1dMesherVector_end(self)

    def rbegin(self):
        return _QuantLib.Fdm1dMesherVector_rbegin(self)

    def rend(self):
        return _QuantLib.Fdm1dMesherVector_rend(self)

    def clear(self):
        return _QuantLib.Fdm1dMesherVector_clear(self)

    def get_allocator(self):
        return _QuantLib.Fdm1dMesherVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.Fdm1dMesherVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.Fdm1dMesherVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_Fdm1dMesherVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.Fdm1dMesherVector_push_back(self, x)

    def front(self):
        return _QuantLib.Fdm1dMesherVector_front(self)

    def back(self):
        return _QuantLib.Fdm1dMesherVector_back(self)

    def assign(self, n, x):
        return _QuantLib.Fdm1dMesherVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.Fdm1dMesherVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.Fdm1dMesherVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.Fdm1dMesherVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.Fdm1dMesherVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_Fdm1dMesherVector
    __del__ = lambda self: None
Fdm1dMesherVector_swigregister = _QuantLib.Fdm1dMesherVector_swigregister
Fdm1dMesherVector_swigregister(Fdm1dMesherVector)

class FdmBoundaryCondition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmBoundaryCondition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FdmBoundaryCondition, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    NoSide = _QuantLib.FdmBoundaryCondition_NoSide
    Upper = _QuantLib.FdmBoundaryCondition_Upper
    Lower = _QuantLib.FdmBoundaryCondition_Lower

    def applyBeforeApplying(self, arg2):
        return _QuantLib.FdmBoundaryCondition_applyBeforeApplying(self, arg2)

    def applyAfterApplying(self, arg2):
        return _QuantLib.FdmBoundaryCondition_applyAfterApplying(self, arg2)

    def applyBeforeSolving(self, arg2, rhs):
        return _QuantLib.FdmBoundaryCondition_applyBeforeSolving(self, arg2, rhs)

    def applyAfterSolving(self, arg2):
        return _QuantLib.FdmBoundaryCondition_applyAfterSolving(self, arg2)

    def setTime(self, t):
        return _QuantLib.FdmBoundaryCondition_setTime(self, t)
    __swig_destroy__ = _QuantLib.delete_FdmBoundaryCondition
    __del__ = lambda self: None
FdmBoundaryCondition_swigregister = _QuantLib.FdmBoundaryCondition_swigregister
FdmBoundaryCondition_swigregister(FdmBoundaryCondition)

class FdmBoundaryConditionSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmBoundaryConditionSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FdmBoundaryConditionSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.FdmBoundaryConditionSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.FdmBoundaryConditionSet___nonzero__(self)

    def __bool__(self):
        return _QuantLib.FdmBoundaryConditionSet___bool__(self)

    def __len__(self):
        return _QuantLib.FdmBoundaryConditionSet___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.FdmBoundaryConditionSet___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.FdmBoundaryConditionSet___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.FdmBoundaryConditionSet___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.FdmBoundaryConditionSet___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.FdmBoundaryConditionSet___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.FdmBoundaryConditionSet___setitem__(self, *args)

    def pop(self):
        return _QuantLib.FdmBoundaryConditionSet_pop(self)

    def append(self, x):
        return _QuantLib.FdmBoundaryConditionSet_append(self, x)

    def empty(self):
        return _QuantLib.FdmBoundaryConditionSet_empty(self)

    def size(self):
        return _QuantLib.FdmBoundaryConditionSet_size(self)

    def swap(self, v):
        return _QuantLib.FdmBoundaryConditionSet_swap(self, v)

    def begin(self):
        return _QuantLib.FdmBoundaryConditionSet_begin(self)

    def end(self):
        return _QuantLib.FdmBoundaryConditionSet_end(self)

    def rbegin(self):
        return _QuantLib.FdmBoundaryConditionSet_rbegin(self)

    def rend(self):
        return _QuantLib.FdmBoundaryConditionSet_rend(self)

    def clear(self):
        return _QuantLib.FdmBoundaryConditionSet_clear(self)

    def get_allocator(self):
        return _QuantLib.FdmBoundaryConditionSet_get_allocator(self)

    def pop_back(self):
        return _QuantLib.FdmBoundaryConditionSet_pop_back(self)

    def erase(self, *args):
        return _QuantLib.FdmBoundaryConditionSet_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_FdmBoundaryConditionSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.FdmBoundaryConditionSet_push_back(self, x)

    def front(self):
        return _QuantLib.FdmBoundaryConditionSet_front(self)

    def back(self):
        return _QuantLib.FdmBoundaryConditionSet_back(self)

    def assign(self, n, x):
        return _QuantLib.FdmBoundaryConditionSet_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.FdmBoundaryConditionSet_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.FdmBoundaryConditionSet_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.FdmBoundaryConditionSet_reserve(self, n)

    def capacity(self):
        return _QuantLib.FdmBoundaryConditionSet_capacity(self)
    __swig_destroy__ = _QuantLib.delete_FdmBoundaryConditionSet
    __del__ = lambda self: None
FdmBoundaryConditionSet_swigregister = _QuantLib.FdmBoundaryConditionSet_swigregister
FdmBoundaryConditionSet_swigregister(FdmBoundaryConditionSet)

class FdmInnerValueCalculator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmInnerValueCalculator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FdmInnerValueCalculator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def innerValue(self, iter, t):
        return _QuantLib.FdmInnerValueCalculator_innerValue(self, iter, t)

    def avgInnerValue(self, iter, t):
        return _QuantLib.FdmInnerValueCalculator_avgInnerValue(self, iter, t)
    __swig_destroy__ = _QuantLib.delete_FdmInnerValueCalculator
    __del__ = lambda self: None
FdmInnerValueCalculator_swigregister = _QuantLib.FdmInnerValueCalculator_swigregister
FdmInnerValueCalculator_swigregister(FdmInnerValueCalculator)

class FdmLinearOp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmLinearOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FdmLinearOp, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def apply(self, r):
        return _QuantLib.FdmLinearOp_apply(self, r)
    __swig_destroy__ = _QuantLib.delete_FdmLinearOp
    __del__ = lambda self: None
FdmLinearOp_swigregister = _QuantLib.FdmLinearOp_swigregister
FdmLinearOp_swigregister(FdmLinearOp)

class FdmSolverDesc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmSolverDesc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FdmSolverDesc, name)
    __repr__ = _swig_repr

    def __init__(self, mesher, bcSet, condition, calculator, maturity, timeSteps, dampingSteps):
        this = _QuantLib.new_FdmSolverDesc(mesher, bcSet, condition, calculator, maturity, timeSteps, dampingSteps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getMesher(self):
        return _QuantLib.FdmSolverDesc_getMesher(self)

    def getBcSet(self):
        return _QuantLib.FdmSolverDesc_getBcSet(self)

    def getStepConditions(self):
        return _QuantLib.FdmSolverDesc_getStepConditions(self)

    def getCalculator(self):
        return _QuantLib.FdmSolverDesc_getCalculator(self)

    def getMaturity(self):
        return _QuantLib.FdmSolverDesc_getMaturity(self)

    def getTimeSteps(self):
        return _QuantLib.FdmSolverDesc_getTimeSteps(self)

    def getDampingSteps(self):
        return _QuantLib.FdmSolverDesc_getDampingSteps(self)
    __swig_destroy__ = _QuantLib.delete_FdmSolverDesc
    __del__ = lambda self: None
FdmSolverDesc_swigregister = _QuantLib.FdmSolverDesc_swigregister
FdmSolverDesc_swigregister(FdmSolverDesc)

class Fdm1DimSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Fdm1DimSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Fdm1DimSolver, name)
    __repr__ = _swig_repr

    def __init__(self, solverDesc, schemeDesc, op):
        this = _QuantLib.new_Fdm1DimSolver(solverDesc, schemeDesc, op)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def interpolateAt(self, x):
        return _QuantLib.Fdm1DimSolver_interpolateAt(self, x)

    def thetaAt(self, x):
        return _QuantLib.Fdm1DimSolver_thetaAt(self, x)

    def derivativeX(self, x):
        return _QuantLib.Fdm1DimSolver_derivativeX(self, x)

    def derivativeXX(self, x):
        return _QuantLib.Fdm1DimSolver_derivativeXX(self, x)
    __swig_destroy__ = _QuantLib.delete_Fdm1DimSolver
    __del__ = lambda self: None
Fdm1DimSolver_swigregister = _QuantLib.Fdm1DimSolver_swigregister
Fdm1DimSolver_swigregister(Fdm1DimSolver)

class FdmBackwardSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmBackwardSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FdmBackwardSolver, name)
    __repr__ = _swig_repr

    def __init__(self, map, bcSet, condition, schemeDesc):
        this = _QuantLib.new_FdmBackwardSolver(map, bcSet, condition, schemeDesc)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def rollback(self, a, arg3, to, steps, dampingSteps):
        return _QuantLib.FdmBackwardSolver_rollback(self, a, arg3, to, steps, dampingSteps)
    __swig_destroy__ = _QuantLib.delete_FdmBackwardSolver
    __del__ = lambda self: None
FdmBackwardSolver_swigregister = _QuantLib.FdmBackwardSolver_swigregister
FdmBackwardSolver_swigregister(FdmBackwardSolver)

class Fdm2dBlackScholesSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Fdm2dBlackScholesSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Fdm2dBlackScholesSolver, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_Fdm2dBlackScholesSolver(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def valueAt(self, x, y):
        return _QuantLib.Fdm2dBlackScholesSolver_valueAt(self, x, y)

    def thetaAt(self, x, y):
        return _QuantLib.Fdm2dBlackScholesSolver_thetaAt(self, x, y)

    def deltaXat(self, x, y):
        return _QuantLib.Fdm2dBlackScholesSolver_deltaXat(self, x, y)

    def deltaYat(self, x, y):
        return _QuantLib.Fdm2dBlackScholesSolver_deltaYat(self, x, y)

    def gammaXat(self, x, y):
        return _QuantLib.Fdm2dBlackScholesSolver_gammaXat(self, x, y)

    def gammaYat(self, x, y):
        return _QuantLib.Fdm2dBlackScholesSolver_gammaYat(self, x, y)

    def gammaXYat(self, x, y):
        return _QuantLib.Fdm2dBlackScholesSolver_gammaXYat(self, x, y)
    __swig_destroy__ = _QuantLib.delete_Fdm2dBlackScholesSolver
    __del__ = lambda self: None
Fdm2dBlackScholesSolver_swigregister = _QuantLib.Fdm2dBlackScholesSolver_swigregister
Fdm2dBlackScholesSolver_swigregister(Fdm2dBlackScholesSolver)

class Fdm2DimSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Fdm2DimSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Fdm2DimSolver, name)
    __repr__ = _swig_repr

    def __init__(self, solverDesc, schemeDesc, op):
        this = _QuantLib.new_Fdm2DimSolver(solverDesc, schemeDesc, op)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def interpolateAt(self, x, y):
        return _QuantLib.Fdm2DimSolver_interpolateAt(self, x, y)

    def thetaAt(self, x, y):
        return _QuantLib.Fdm2DimSolver_thetaAt(self, x, y)

    def derivativeX(self, x, y):
        return _QuantLib.Fdm2DimSolver_derivativeX(self, x, y)

    def derivativeY(self, x, y):
        return _QuantLib.Fdm2DimSolver_derivativeY(self, x, y)

    def derivativeXX(self, x, y):
        return _QuantLib.Fdm2DimSolver_derivativeXX(self, x, y)

    def derivativeYY(self, x, y):
        return _QuantLib.Fdm2DimSolver_derivativeYY(self, x, y)

    def derivativeXY(self, x, y):
        return _QuantLib.Fdm2DimSolver_derivativeXY(self, x, y)
    __swig_destroy__ = _QuantLib.delete_Fdm2DimSolver
    __del__ = lambda self: None
Fdm2DimSolver_swigregister = _QuantLib.Fdm2DimSolver_swigregister
Fdm2DimSolver_swigregister(Fdm2DimSolver)

class Fdm3DimSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Fdm3DimSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Fdm3DimSolver, name)
    __repr__ = _swig_repr

    def __init__(self, solverDesc, schemeDesc, op):
        this = _QuantLib.new_Fdm3DimSolver(solverDesc, schemeDesc, op)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def performCalculations(self):
        return _QuantLib.Fdm3DimSolver_performCalculations(self)

    def interpolateAt(self, x, y, z):
        return _QuantLib.Fdm3DimSolver_interpolateAt(self, x, y, z)

    def thetaAt(self, x, y, z):
        return _QuantLib.Fdm3DimSolver_thetaAt(self, x, y, z)
    __swig_destroy__ = _QuantLib.delete_Fdm3DimSolver
    __del__ = lambda self: None
Fdm3DimSolver_swigregister = _QuantLib.Fdm3DimSolver_swigregister
Fdm3DimSolver_swigregister(Fdm3DimSolver)

class FdmG2Solver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmG2Solver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FdmG2Solver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FdmG2Solver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def valueAt(self, x, y):
        return _QuantLib.FdmG2Solver_valueAt(self, x, y)
    __swig_destroy__ = _QuantLib.delete_FdmG2Solver
    __del__ = lambda self: None
FdmG2Solver_swigregister = _QuantLib.FdmG2Solver_swigregister
FdmG2Solver_swigregister(FdmG2Solver)

class FdmHestonHullWhiteSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmHestonHullWhiteSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FdmHestonHullWhiteSolver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FdmHestonHullWhiteSolver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def valueAt(self, s, v, r):
        return _QuantLib.FdmHestonHullWhiteSolver_valueAt(self, s, v, r)

    def thetaAt(self, s, v, r):
        return _QuantLib.FdmHestonHullWhiteSolver_thetaAt(self, s, v, r)

    def deltaAt(self, s, v, r, eps):
        return _QuantLib.FdmHestonHullWhiteSolver_deltaAt(self, s, v, r, eps)

    def gammaAt(self, s, v, r, eps):
        return _QuantLib.FdmHestonHullWhiteSolver_gammaAt(self, s, v, r, eps)
    __swig_destroy__ = _QuantLib.delete_FdmHestonHullWhiteSolver
    __del__ = lambda self: None
FdmHestonHullWhiteSolver_swigregister = _QuantLib.FdmHestonHullWhiteSolver_swigregister
FdmHestonHullWhiteSolver_swigregister(FdmHestonHullWhiteSolver)

class FdmHestonSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmHestonSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FdmHestonSolver, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_FdmHestonSolver(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def valueAt(self, s, v):
        return _QuantLib.FdmHestonSolver_valueAt(self, s, v)

    def thetaAt(self, s, v):
        return _QuantLib.FdmHestonSolver_thetaAt(self, s, v)

    def deltaAt(self, s, v):
        return _QuantLib.FdmHestonSolver_deltaAt(self, s, v)

    def gammaAt(self, s, v):
        return _QuantLib.FdmHestonSolver_gammaAt(self, s, v)

    def meanVarianceDeltaAt(self, s, v):
        return _QuantLib.FdmHestonSolver_meanVarianceDeltaAt(self, s, v)

    def meanVarianceGammaAt(self, s, v):
        return _QuantLib.FdmHestonSolver_meanVarianceGammaAt(self, s, v)
    __swig_destroy__ = _QuantLib.delete_FdmHestonSolver
    __del__ = lambda self: None
FdmHestonSolver_swigregister = _QuantLib.FdmHestonSolver_swigregister
FdmHestonSolver_swigregister(FdmHestonSolver)

class FdmHullWhiteSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmHullWhiteSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FdmHullWhiteSolver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FdmHullWhiteSolver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def valueAt(self, r):
        return _QuantLib.FdmHullWhiteSolver_valueAt(self, r)
    __swig_destroy__ = _QuantLib.delete_FdmHullWhiteSolver
    __del__ = lambda self: None
FdmHullWhiteSolver_swigregister = _QuantLib.FdmHullWhiteSolver_swigregister
FdmHullWhiteSolver_swigregister(FdmHullWhiteSolver)

class Fdm4dimSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Fdm4dimSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Fdm4dimSolver, name)
    __repr__ = _swig_repr

    def __init__(self, solverDesc, schemeDesc, op):
        this = _QuantLib.new_Fdm4dimSolver(solverDesc, schemeDesc, op)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def interpolateAt(self, x):
        return _QuantLib.Fdm4dimSolver_interpolateAt(self, x)

    def thetaAt(self, x):
        return _QuantLib.Fdm4dimSolver_thetaAt(self, x)
    __swig_destroy__ = _QuantLib.delete_Fdm4dimSolver
    __del__ = lambda self: None
Fdm4dimSolver_swigregister = _QuantLib.Fdm4dimSolver_swigregister
Fdm4dimSolver_swigregister(Fdm4dimSolver)

class Fdm5dimSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Fdm5dimSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Fdm5dimSolver, name)
    __repr__ = _swig_repr

    def __init__(self, solverDesc, schemeDesc, op):
        this = _QuantLib.new_Fdm5dimSolver(solverDesc, schemeDesc, op)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def interpolateAt(self, x):
        return _QuantLib.Fdm5dimSolver_interpolateAt(self, x)

    def thetaAt(self, x):
        return _QuantLib.Fdm5dimSolver_thetaAt(self, x)
    __swig_destroy__ = _QuantLib.delete_Fdm5dimSolver
    __del__ = lambda self: None
Fdm5dimSolver_swigregister = _QuantLib.Fdm5dimSolver_swigregister
Fdm5dimSolver_swigregister(Fdm5dimSolver)

class Fdm6dimSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Fdm6dimSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Fdm6dimSolver, name)
    __repr__ = _swig_repr

    def __init__(self, solverDesc, schemeDesc, op):
        this = _QuantLib.new_Fdm6dimSolver(solverDesc, schemeDesc, op)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def interpolateAt(self, x):
        return _QuantLib.Fdm6dimSolver_interpolateAt(self, x)

    def thetaAt(self, x):
        return _QuantLib.Fdm6dimSolver_thetaAt(self, x)
    __swig_destroy__ = _QuantLib.delete_Fdm6dimSolver
    __del__ = lambda self: None
Fdm6dimSolver_swigregister = _QuantLib.Fdm6dimSolver_swigregister
Fdm6dimSolver_swigregister(Fdm6dimSolver)

class CraigSneydScheme(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CraigSneydScheme, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CraigSneydScheme, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_CraigSneydScheme(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def step(self, a, t):
        return _QuantLib.CraigSneydScheme_step(self, a, t)

    def setStep(self, dt):
        return _QuantLib.CraigSneydScheme_setStep(self, dt)
    __swig_destroy__ = _QuantLib.delete_CraigSneydScheme
    __del__ = lambda self: None
CraigSneydScheme_swigregister = _QuantLib.CraigSneydScheme_swigregister
CraigSneydScheme_swigregister(CraigSneydScheme)

class ImplicitEulerScheme(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImplicitEulerScheme, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImplicitEulerScheme, name)
    __repr__ = _swig_repr
    BiCGstab = _QuantLib.ImplicitEulerScheme_BiCGstab
    GMRES = _QuantLib.ImplicitEulerScheme_GMRES

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_ImplicitEulerScheme(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def step(self, a, t):
        return _QuantLib.ImplicitEulerScheme_step(self, a, t)

    def setStep(self, dt):
        return _QuantLib.ImplicitEulerScheme_setStep(self, dt)

    def numberOfIterations(self):
        return _QuantLib.ImplicitEulerScheme_numberOfIterations(self)
    __swig_destroy__ = _QuantLib.delete_ImplicitEulerScheme
    __del__ = lambda self: None
ImplicitEulerScheme_swigregister = _QuantLib.ImplicitEulerScheme_swigregister
ImplicitEulerScheme_swigregister(ImplicitEulerScheme)

class CrankNicolsonScheme(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrankNicolsonScheme, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CrankNicolsonScheme, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_CrankNicolsonScheme(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def step(self, a, t):
        return _QuantLib.CrankNicolsonScheme_step(self, a, t)

    def setStep(self, dt):
        return _QuantLib.CrankNicolsonScheme_setStep(self, dt)

    def numberOfIterations(self):
        return _QuantLib.CrankNicolsonScheme_numberOfIterations(self)
    __swig_destroy__ = _QuantLib.delete_CrankNicolsonScheme
    __del__ = lambda self: None
CrankNicolsonScheme_swigregister = _QuantLib.CrankNicolsonScheme_swigregister
CrankNicolsonScheme_swigregister(CrankNicolsonScheme)

class DouglasScheme(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DouglasScheme, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DouglasScheme, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_DouglasScheme(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def step(self, a, t):
        return _QuantLib.DouglasScheme_step(self, a, t)

    def setStep(self, dt):
        return _QuantLib.DouglasScheme_setStep(self, dt)
    __swig_destroy__ = _QuantLib.delete_DouglasScheme
    __del__ = lambda self: None
DouglasScheme_swigregister = _QuantLib.DouglasScheme_swigregister
DouglasScheme_swigregister(DouglasScheme)

class ExplicitEulerScheme(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExplicitEulerScheme, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExplicitEulerScheme, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ExplicitEulerScheme(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def step(self, a, t):
        return _QuantLib.ExplicitEulerScheme_step(self, a, t)

    def setStep(self, dt):
        return _QuantLib.ExplicitEulerScheme_setStep(self, dt)
    __swig_destroy__ = _QuantLib.delete_ExplicitEulerScheme
    __del__ = lambda self: None
ExplicitEulerScheme_swigregister = _QuantLib.ExplicitEulerScheme_swigregister
ExplicitEulerScheme_swigregister(ExplicitEulerScheme)

class HundsdorferScheme(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HundsdorferScheme, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HundsdorferScheme, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_HundsdorferScheme(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def step(self, a, t):
        return _QuantLib.HundsdorferScheme_step(self, a, t)

    def setStep(self, dt):
        return _QuantLib.HundsdorferScheme_setStep(self, dt)
    __swig_destroy__ = _QuantLib.delete_HundsdorferScheme
    __del__ = lambda self: None
HundsdorferScheme_swigregister = _QuantLib.HundsdorferScheme_swigregister
HundsdorferScheme_swigregister(HundsdorferScheme)

class MethodOfLinesScheme(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MethodOfLinesScheme, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MethodOfLinesScheme, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_MethodOfLinesScheme(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def step(self, a, t):
        return _QuantLib.MethodOfLinesScheme_step(self, a, t)

    def setStep(self, dt):
        return _QuantLib.MethodOfLinesScheme_setStep(self, dt)
    __swig_destroy__ = _QuantLib.delete_MethodOfLinesScheme
    __del__ = lambda self: None
MethodOfLinesScheme_swigregister = _QuantLib.MethodOfLinesScheme_swigregister
MethodOfLinesScheme_swigregister(MethodOfLinesScheme)

class ModifiedCraigSneydScheme(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModifiedCraigSneydScheme, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModifiedCraigSneydScheme, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ModifiedCraigSneydScheme(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def step(self, a, t):
        return _QuantLib.ModifiedCraigSneydScheme_step(self, a, t)

    def setStep(self, dt):
        return _QuantLib.ModifiedCraigSneydScheme_setStep(self, dt)
    __swig_destroy__ = _QuantLib.delete_ModifiedCraigSneydScheme
    __del__ = lambda self: None
ModifiedCraigSneydScheme_swigregister = _QuantLib.ModifiedCraigSneydScheme_swigregister
ModifiedCraigSneydScheme_swigregister(ModifiedCraigSneydScheme)

class FdmStepCondition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmStepCondition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FdmStepCondition, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def applyTo(self, a, t):
        return _QuantLib.FdmStepCondition_applyTo(self, a, t)
    __swig_destroy__ = _QuantLib.delete_FdmStepCondition
    __del__ = lambda self: None
FdmStepCondition_swigregister = _QuantLib.FdmStepCondition_swigregister
FdmStepCondition_swigregister(FdmStepCondition)

class FdmDirichletBoundary(FdmBoundaryCondition):
    __swig_setmethods__ = {}
    for _s in [FdmBoundaryCondition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmDirichletBoundary, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmBoundaryCondition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmDirichletBoundary, name)
    __repr__ = _swig_repr

    def __init__(self, mesher, valueOnBoundary, direction, side):
        this = _QuantLib.new_FdmDirichletBoundary(mesher, valueOnBoundary, direction, side)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def applyAfterApplying(self, *args):
        return _QuantLib.FdmDirichletBoundary_applyAfterApplying(self, *args)
    __swig_destroy__ = _QuantLib.delete_FdmDirichletBoundary
    __del__ = lambda self: None
FdmDirichletBoundary_swigregister = _QuantLib.FdmDirichletBoundary_swigregister
FdmDirichletBoundary_swigregister(FdmDirichletBoundary)

class FdmDiscountDirichletBoundary(FdmBoundaryCondition):
    __swig_setmethods__ = {}
    for _s in [FdmBoundaryCondition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmDiscountDirichletBoundary, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmBoundaryCondition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmDiscountDirichletBoundary, name)
    __repr__ = _swig_repr

    def __init__(self, mesher, rTS, maturityTime, valueOnBoundary, direction, side):
        this = _QuantLib.new_FdmDiscountDirichletBoundary(mesher, rTS, maturityTime, valueOnBoundary, direction, side)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmDiscountDirichletBoundary
    __del__ = lambda self: None
FdmDiscountDirichletBoundary_swigregister = _QuantLib.FdmDiscountDirichletBoundary_swigregister
FdmDiscountDirichletBoundary_swigregister(FdmDiscountDirichletBoundary)

class FdmTimeDepDirichletBoundary(FdmBoundaryCondition):
    __swig_setmethods__ = {}
    for _s in [FdmBoundaryCondition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmTimeDepDirichletBoundary, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmBoundaryCondition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmTimeDepDirichletBoundary, name)
    __repr__ = _swig_repr

    def __init__(self, mesher, function, direction, side):
        this = _QuantLib.new_FdmTimeDepDirichletBoundary(mesher, function, direction, side)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmTimeDepDirichletBoundary
    __del__ = lambda self: None
FdmTimeDepDirichletBoundary_swigregister = _QuantLib.FdmTimeDepDirichletBoundary_swigregister
FdmTimeDepDirichletBoundary_swigregister(FdmTimeDepDirichletBoundary)

class FdmBlackScholesMesher(Fdm1dMesher):
    __swig_setmethods__ = {}
    for _s in [Fdm1dMesher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmBlackScholesMesher, name, value)
    __swig_getmethods__ = {}
    for _s in [Fdm1dMesher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmBlackScholesMesher, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_FdmBlackScholesMesher(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        processHelper = staticmethod(_QuantLib.FdmBlackScholesMesher_processHelper)
    else:
        processHelper = _QuantLib.FdmBlackScholesMesher_processHelper
    __swig_destroy__ = _QuantLib.delete_FdmBlackScholesMesher
    __del__ = lambda self: None
FdmBlackScholesMesher_swigregister = _QuantLib.FdmBlackScholesMesher_swigregister
FdmBlackScholesMesher_swigregister(FdmBlackScholesMesher)

def FdmBlackScholesMesher_processHelper(s0, rTS, qTS, vol):
    return _QuantLib.FdmBlackScholesMesher_processHelper(s0, rTS, qTS, vol)
FdmBlackScholesMesher_processHelper = _QuantLib.FdmBlackScholesMesher_processHelper

class Concentrating1dMesherPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Concentrating1dMesherPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Concentrating1dMesherPoint, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3, arg4):
        this = _QuantLib.new_Concentrating1dMesherPoint(arg2, arg3, arg4)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def first(self):
        return _QuantLib.Concentrating1dMesherPoint_first(self)

    def second(self):
        return _QuantLib.Concentrating1dMesherPoint_second(self)

    def third(self):
        return _QuantLib.Concentrating1dMesherPoint_third(self)
    __swig_destroy__ = _QuantLib.delete_Concentrating1dMesherPoint
    __del__ = lambda self: None
Concentrating1dMesherPoint_swigregister = _QuantLib.Concentrating1dMesherPoint_swigregister
Concentrating1dMesherPoint_swigregister(Concentrating1dMesherPoint)

class Concentrating1dMesherPointVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Concentrating1dMesherPointVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Concentrating1dMesherPointVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.Concentrating1dMesherPointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.Concentrating1dMesherPointVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.Concentrating1dMesherPointVector___bool__(self)

    def __len__(self):
        return _QuantLib.Concentrating1dMesherPointVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.Concentrating1dMesherPointVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.Concentrating1dMesherPointVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.Concentrating1dMesherPointVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.Concentrating1dMesherPointVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.Concentrating1dMesherPointVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.Concentrating1dMesherPointVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.Concentrating1dMesherPointVector_pop(self)

    def append(self, x):
        return _QuantLib.Concentrating1dMesherPointVector_append(self, x)

    def empty(self):
        return _QuantLib.Concentrating1dMesherPointVector_empty(self)

    def size(self):
        return _QuantLib.Concentrating1dMesherPointVector_size(self)

    def swap(self, v):
        return _QuantLib.Concentrating1dMesherPointVector_swap(self, v)

    def begin(self):
        return _QuantLib.Concentrating1dMesherPointVector_begin(self)

    def end(self):
        return _QuantLib.Concentrating1dMesherPointVector_end(self)

    def rbegin(self):
        return _QuantLib.Concentrating1dMesherPointVector_rbegin(self)

    def rend(self):
        return _QuantLib.Concentrating1dMesherPointVector_rend(self)

    def clear(self):
        return _QuantLib.Concentrating1dMesherPointVector_clear(self)

    def get_allocator(self):
        return _QuantLib.Concentrating1dMesherPointVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.Concentrating1dMesherPointVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.Concentrating1dMesherPointVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_Concentrating1dMesherPointVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.Concentrating1dMesherPointVector_push_back(self, x)

    def front(self):
        return _QuantLib.Concentrating1dMesherPointVector_front(self)

    def back(self):
        return _QuantLib.Concentrating1dMesherPointVector_back(self)

    def assign(self, n, x):
        return _QuantLib.Concentrating1dMesherPointVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.Concentrating1dMesherPointVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.Concentrating1dMesherPointVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.Concentrating1dMesherPointVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.Concentrating1dMesherPointVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_Concentrating1dMesherPointVector
    __del__ = lambda self: None
Concentrating1dMesherPointVector_swigregister = _QuantLib.Concentrating1dMesherPointVector_swigregister
Concentrating1dMesherPointVector_swigregister(Concentrating1dMesherPointVector)

class Concentrating1dMesher(Fdm1dMesher):
    __swig_setmethods__ = {}
    for _s in [Fdm1dMesher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Concentrating1dMesher, name, value)
    __swig_getmethods__ = {}
    for _s in [Fdm1dMesher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Concentrating1dMesher, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Concentrating1dMesher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Concentrating1dMesher
    __del__ = lambda self: None
Concentrating1dMesher_swigregister = _QuantLib.Concentrating1dMesher_swigregister
Concentrating1dMesher_swigregister(Concentrating1dMesher)

class ExponentialJump1dMesher(Fdm1dMesher):
    __swig_setmethods__ = {}
    for _s in [Fdm1dMesher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExponentialJump1dMesher, name, value)
    __swig_getmethods__ = {}
    for _s in [Fdm1dMesher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExponentialJump1dMesher, name)
    __repr__ = _swig_repr

    def __init__(self, steps, beta, jumpIntensity, eta, eps=1e-3):
        this = _QuantLib.new_ExponentialJump1dMesher(steps, beta, jumpIntensity, eta, eps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ExponentialJump1dMesher
    __del__ = lambda self: None
ExponentialJump1dMesher_swigregister = _QuantLib.ExponentialJump1dMesher_swigregister
ExponentialJump1dMesher_swigregister(ExponentialJump1dMesher)

class FdmCEV1dMesher(Fdm1dMesher):
    __swig_setmethods__ = {}
    for _s in [Fdm1dMesher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmCEV1dMesher, name, value)
    __swig_getmethods__ = {}
    for _s in [Fdm1dMesher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmCEV1dMesher, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_FdmCEV1dMesher(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmCEV1dMesher
    __del__ = lambda self: None
FdmCEV1dMesher_swigregister = _QuantLib.FdmCEV1dMesher_swigregister
FdmCEV1dMesher_swigregister(FdmCEV1dMesher)

class FdmHestonVarianceMesher(Fdm1dMesher):
    __swig_setmethods__ = {}
    for _s in [Fdm1dMesher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmHestonVarianceMesher, name, value)
    __swig_getmethods__ = {}
    for _s in [Fdm1dMesher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmHestonVarianceMesher, name)
    __repr__ = _swig_repr

    def __init__(self, size, process, maturity, tAvgSteps=10, epsilon=0.0001):
        this = _QuantLib.new_FdmHestonVarianceMesher(size, process, maturity, tAvgSteps, epsilon)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def volaEstimate(self):
        return _QuantLib.FdmHestonVarianceMesher_volaEstimate(self)
    __swig_destroy__ = _QuantLib.delete_FdmHestonVarianceMesher
    __del__ = lambda self: None
FdmHestonVarianceMesher_swigregister = _QuantLib.FdmHestonVarianceMesher_swigregister
FdmHestonVarianceMesher_swigregister(FdmHestonVarianceMesher)

class FdmHestonLocalVolatilityVarianceMesher(Fdm1dMesher):
    __swig_setmethods__ = {}
    for _s in [Fdm1dMesher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmHestonLocalVolatilityVarianceMesher, name, value)
    __swig_getmethods__ = {}
    for _s in [Fdm1dMesher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmHestonLocalVolatilityVarianceMesher, name)
    __repr__ = _swig_repr

    def __init__(self, size, process, leverageFct, maturity, tAvgSteps=10, epsilon=0.0001):
        this = _QuantLib.new_FdmHestonLocalVolatilityVarianceMesher(size, process, leverageFct, maturity, tAvgSteps, epsilon)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def volaEstimate(self):
        return _QuantLib.FdmHestonLocalVolatilityVarianceMesher_volaEstimate(self)
    __swig_destroy__ = _QuantLib.delete_FdmHestonLocalVolatilityVarianceMesher
    __del__ = lambda self: None
FdmHestonLocalVolatilityVarianceMesher_swigregister = _QuantLib.FdmHestonLocalVolatilityVarianceMesher_swigregister
FdmHestonLocalVolatilityVarianceMesher_swigregister(FdmHestonLocalVolatilityVarianceMesher)

class FdmSimpleProcess1dMesher(Fdm1dMesher):
    __swig_setmethods__ = {}
    for _s in [Fdm1dMesher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmSimpleProcess1dMesher, name, value)
    __swig_getmethods__ = {}
    for _s in [Fdm1dMesher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmSimpleProcess1dMesher, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FdmSimpleProcess1dMesher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmSimpleProcess1dMesher
    __del__ = lambda self: None
FdmSimpleProcess1dMesher_swigregister = _QuantLib.FdmSimpleProcess1dMesher_swigregister
FdmSimpleProcess1dMesher_swigregister(FdmSimpleProcess1dMesher)

class Uniform1dMesher(Fdm1dMesher):
    __swig_setmethods__ = {}
    for _s in [Fdm1dMesher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Uniform1dMesher, name, value)
    __swig_getmethods__ = {}
    for _s in [Fdm1dMesher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Uniform1dMesher, name)
    __repr__ = _swig_repr

    def __init__(self, start, end, size):
        this = _QuantLib.new_Uniform1dMesher(start, end, size)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Uniform1dMesher
    __del__ = lambda self: None
Uniform1dMesher_swigregister = _QuantLib.Uniform1dMesher_swigregister
Uniform1dMesher_swigregister(Uniform1dMesher)

class Predefined1dMesher(Fdm1dMesher):
    __swig_setmethods__ = {}
    for _s in [Fdm1dMesher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Predefined1dMesher, name, value)
    __swig_getmethods__ = {}
    for _s in [Fdm1dMesher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Predefined1dMesher, name)
    __repr__ = _swig_repr

    def __init__(self, x):
        this = _QuantLib.new_Predefined1dMesher(x)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Predefined1dMesher
    __del__ = lambda self: None
Predefined1dMesher_swigregister = _QuantLib.Predefined1dMesher_swigregister
Predefined1dMesher_swigregister(Predefined1dMesher)

class Glued1dMesher(Fdm1dMesher):
    __swig_setmethods__ = {}
    for _s in [Fdm1dMesher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Glued1dMesher, name, value)
    __swig_getmethods__ = {}
    for _s in [Fdm1dMesher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Glued1dMesher, name)
    __repr__ = _swig_repr

    def __init__(self, leftMesher, rightMesher):
        this = _QuantLib.new_Glued1dMesher(leftMesher, rightMesher)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Glued1dMesher
    __del__ = lambda self: None
Glued1dMesher_swigregister = _QuantLib.Glued1dMesher_swigregister
Glued1dMesher_swigregister(Glued1dMesher)

class FdmInnerValueCalculatorProxy(FdmInnerValueCalculator):
    __swig_setmethods__ = {}
    for _s in [FdmInnerValueCalculator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmInnerValueCalculatorProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmInnerValueCalculator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmInnerValueCalculatorProxy, name)
    __repr__ = _swig_repr

    def __init__(self, callback):
        this = _QuantLib.new_FdmInnerValueCalculatorProxy(callback)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmInnerValueCalculatorProxy
    __del__ = lambda self: None
FdmInnerValueCalculatorProxy_swigregister = _QuantLib.FdmInnerValueCalculatorProxy_swigregister
FdmInnerValueCalculatorProxy_swigregister(FdmInnerValueCalculatorProxy)

class FdmCellAveragingInnerValue(FdmInnerValueCalculator):
    __swig_setmethods__ = {}
    for _s in [FdmInnerValueCalculator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmCellAveragingInnerValue, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmInnerValueCalculator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmCellAveragingInnerValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FdmCellAveragingInnerValue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmCellAveragingInnerValue
    __del__ = lambda self: None
FdmCellAveragingInnerValue_swigregister = _QuantLib.FdmCellAveragingInnerValue_swigregister
FdmCellAveragingInnerValue_swigregister(FdmCellAveragingInnerValue)

class FdmLogInnerValue(FdmCellAveragingInnerValue):
    __swig_setmethods__ = {}
    for _s in [FdmCellAveragingInnerValue]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmLogInnerValue, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmCellAveragingInnerValue]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmLogInnerValue, name)
    __repr__ = _swig_repr

    def __init__(self, payoff, mesher, direction):
        this = _QuantLib.new_FdmLogInnerValue(payoff, mesher, direction)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmLogInnerValue
    __del__ = lambda self: None
FdmLogInnerValue_swigregister = _QuantLib.FdmLogInnerValue_swigregister
FdmLogInnerValue_swigregister(FdmLogInnerValue)

class FdmLogBasketInnerValue(FdmInnerValueCalculator):
    __swig_setmethods__ = {}
    for _s in [FdmInnerValueCalculator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmLogBasketInnerValue, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmInnerValueCalculator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmLogBasketInnerValue, name)
    __repr__ = _swig_repr

    def __init__(self, payoff, mesher):
        this = _QuantLib.new_FdmLogBasketInnerValue(payoff, mesher)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmLogBasketInnerValue
    __del__ = lambda self: None
FdmLogBasketInnerValue_swigregister = _QuantLib.FdmLogBasketInnerValue_swigregister
FdmLogBasketInnerValue_swigregister(FdmLogBasketInnerValue)

class FdmZeroInnerValue(FdmInnerValueCalculator):
    __swig_setmethods__ = {}
    for _s in [FdmInnerValueCalculator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmZeroInnerValue, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmInnerValueCalculator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmZeroInnerValue, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_FdmZeroInnerValue()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmZeroInnerValue
    __del__ = lambda self: None
FdmZeroInnerValue_swigregister = _QuantLib.FdmZeroInnerValue_swigregister
FdmZeroInnerValue_swigregister(FdmZeroInnerValue)

class TimeToDateMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeToDateMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeToDateMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.TimeToDateMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.TimeToDateMap___nonzero__(self)

    def __bool__(self):
        return _QuantLib.TimeToDateMap___bool__(self)

    def __len__(self):
        return _QuantLib.TimeToDateMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _QuantLib.TimeToDateMap___getitem__(self, key)

    def __delitem__(self, key):
        return _QuantLib.TimeToDateMap___delitem__(self, key)

    def has_key(self, key):
        return _QuantLib.TimeToDateMap_has_key(self, key)

    def keys(self):
        return _QuantLib.TimeToDateMap_keys(self)

    def values(self):
        return _QuantLib.TimeToDateMap_values(self)

    def items(self):
        return _QuantLib.TimeToDateMap_items(self)

    def __contains__(self, key):
        return _QuantLib.TimeToDateMap___contains__(self, key)

    def key_iterator(self):
        return _QuantLib.TimeToDateMap_key_iterator(self)

    def value_iterator(self):
        return _QuantLib.TimeToDateMap_value_iterator(self)

    def __setitem__(self, *args):
        return _QuantLib.TimeToDateMap___setitem__(self, *args)

    def asdict(self):
        return _QuantLib.TimeToDateMap_asdict(self)

    def __init__(self, *args):
        this = _QuantLib.new_TimeToDateMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _QuantLib.TimeToDateMap_empty(self)

    def size(self):
        return _QuantLib.TimeToDateMap_size(self)

    def swap(self, v):
        return _QuantLib.TimeToDateMap_swap(self, v)

    def begin(self):
        return _QuantLib.TimeToDateMap_begin(self)

    def end(self):
        return _QuantLib.TimeToDateMap_end(self)

    def rbegin(self):
        return _QuantLib.TimeToDateMap_rbegin(self)

    def rend(self):
        return _QuantLib.TimeToDateMap_rend(self)

    def clear(self):
        return _QuantLib.TimeToDateMap_clear(self)

    def get_allocator(self):
        return _QuantLib.TimeToDateMap_get_allocator(self)

    def count(self, x):
        return _QuantLib.TimeToDateMap_count(self, x)

    def erase(self, *args):
        return _QuantLib.TimeToDateMap_erase(self, *args)

    def find(self, x):
        return _QuantLib.TimeToDateMap_find(self, x)

    def lower_bound(self, x):
        return _QuantLib.TimeToDateMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _QuantLib.TimeToDateMap_upper_bound(self, x)
    __swig_destroy__ = _QuantLib.delete_TimeToDateMap
    __del__ = lambda self: None
TimeToDateMap_swigregister = _QuantLib.TimeToDateMap_swigregister
TimeToDateMap_swigregister(TimeToDateMap)

class FdmAffineG2ModelSwapInnerValue(FdmInnerValueCalculator):
    __swig_setmethods__ = {}
    for _s in [FdmInnerValueCalculator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmAffineG2ModelSwapInnerValue, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmInnerValueCalculator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmAffineG2ModelSwapInnerValue, name)
    __repr__ = _swig_repr

    def __init__(self, disModel, fwdModel, swap, exerciseDates, mesher, direction):
        this = _QuantLib.new_FdmAffineG2ModelSwapInnerValue(disModel, fwdModel, swap, exerciseDates, mesher, direction)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmAffineG2ModelSwapInnerValue
    __del__ = lambda self: None
FdmAffineG2ModelSwapInnerValue_swigregister = _QuantLib.FdmAffineG2ModelSwapInnerValue_swigregister
FdmAffineG2ModelSwapInnerValue_swigregister(FdmAffineG2ModelSwapInnerValue)

class FdmAffineHullWhiteModelSwapInnerValue(FdmInnerValueCalculator):
    __swig_setmethods__ = {}
    for _s in [FdmInnerValueCalculator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmAffineHullWhiteModelSwapInnerValue, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmInnerValueCalculator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmAffineHullWhiteModelSwapInnerValue, name)
    __repr__ = _swig_repr

    def __init__(self, disModel, fwdModel, swap, exerciseDates, mesher, direction):
        this = _QuantLib.new_FdmAffineHullWhiteModelSwapInnerValue(disModel, fwdModel, swap, exerciseDates, mesher, direction)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmAffineHullWhiteModelSwapInnerValue
    __del__ = lambda self: None
FdmAffineHullWhiteModelSwapInnerValue_swigregister = _QuantLib.FdmAffineHullWhiteModelSwapInnerValue_swigregister
FdmAffineHullWhiteModelSwapInnerValue_swigregister(FdmAffineHullWhiteModelSwapInnerValue)

class Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Array(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def at(self, arg2):
        return _QuantLib.Array_at(self, arg2)

    def front(self):
        return _QuantLib.Array_front(self)

    def back(self):
        return _QuantLib.Array_back(self)

    def __len__(self):
        return _QuantLib.Array___len__(self)

    def empty(self):
        return _QuantLib.Array_empty(self)

    def resize(self, n):
        return _QuantLib.Array_resize(self, n)

    def swap(self, arg2):
        return _QuantLib.Array_swap(self, arg2)

    def __str__(self):
        return _QuantLib.Array___str__(self)

    def __add__(self, a):
        return _QuantLib.Array___add__(self, a)

    def __sub__(self, a):
        return _QuantLib.Array___sub__(self, a)

    def __mul__(self, *args):
        return _QuantLib.Array___mul__(self, *args)

    def __div__(self, a):
        return _QuantLib.Array___div__(self, a)

    def __rmul__(self, a):
        return _QuantLib.Array___rmul__(self, a)

    def __getslice__(self, i, j):
        return _QuantLib.Array___getslice__(self, i, j)

    def __setslice__(self, i, j, rhs):
        return _QuantLib.Array___setslice__(self, i, j, rhs)

    def __nonzero__(self):
        return _QuantLib.Array___nonzero__(self)

    def __bool__(self):
        return _QuantLib.Array___bool__(self)

    def __getitem__(self, i):
        return _QuantLib.Array___getitem__(self, i)

    def __setitem__(self, i, x):
        return _QuantLib.Array___setitem__(self, i, x)
    __swig_destroy__ = _QuantLib.delete_Array
    __del__ = lambda self: None
Array_swigregister = _QuantLib.Array_swigregister
Array_swigregister(Array)


def NullArray():
    return _QuantLib.NullArray()
NullArray = _QuantLib.NullArray

def DotProduct(arg1, arg2):
    return _QuantLib.DotProduct(arg1, arg2)
DotProduct = _QuantLib.DotProduct

def Norm2(arg1):
    return _QuantLib.Norm2(arg1)
Norm2 = _QuantLib.Norm2
class DefaultLexicographicalViewColumn(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultLexicographicalViewColumn, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultLexicographicalViewColumn, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __getitem__(self, i):
        return _QuantLib.DefaultLexicographicalViewColumn___getitem__(self, i)

    def __setitem__(self, i, x):
        return _QuantLib.DefaultLexicographicalViewColumn___setitem__(self, i, x)
    __swig_destroy__ = _QuantLib.delete_DefaultLexicographicalViewColumn
    __del__ = lambda self: None
DefaultLexicographicalViewColumn_swigregister = _QuantLib.DefaultLexicographicalViewColumn_swigregister
DefaultLexicographicalViewColumn_swigregister(DefaultLexicographicalViewColumn)

class LexicographicalView(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LexicographicalView, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LexicographicalView, name)
    __repr__ = _swig_repr

    def xSize(self):
        return _QuantLib.LexicographicalView_xSize(self)

    def ySize(self):
        return _QuantLib.LexicographicalView_ySize(self)

    def __init__(self, a, xSize):
        this = _QuantLib.new_LexicographicalView(a, xSize)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self):
        return _QuantLib.LexicographicalView___str__(self)

    def __getitem__(self, i):
        return _QuantLib.LexicographicalView___getitem__(self, i)
    __swig_destroy__ = _QuantLib.delete_LexicographicalView
    __del__ = lambda self: None
LexicographicalView_swigregister = _QuantLib.LexicographicalView_swigregister
LexicographicalView_swigregister(LexicographicalView)

class MatrixRow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixRow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixRow, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __getitem__(self, i):
        return _QuantLib.MatrixRow___getitem__(self, i)

    def __setitem__(self, i, x):
        return _QuantLib.MatrixRow___setitem__(self, i, x)
    __swig_destroy__ = _QuantLib.delete_MatrixRow
    __del__ = lambda self: None
MatrixRow_swigregister = _QuantLib.MatrixRow_swigregister
MatrixRow_swigregister(MatrixRow)

class Matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Matrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def rows(self):
        return _QuantLib.Matrix_rows(self)

    def columns(self):
        return _QuantLib.Matrix_columns(self)

    def __str__(self):
        return _QuantLib.Matrix___str__(self)

    def __add__(self, m):
        return _QuantLib.Matrix___add__(self, m)

    def __sub__(self, m):
        return _QuantLib.Matrix___sub__(self, m)

    def __mul__(self, *args):
        return _QuantLib.Matrix___mul__(self, *args)

    def __div__(self, x):
        return _QuantLib.Matrix___div__(self, x)

    def __getitem__(self, i):
        return _QuantLib.Matrix___getitem__(self, i)

    def __rmul__(self, *args):
        return _QuantLib.Matrix___rmul__(self, *args)
    __swig_destroy__ = _QuantLib.delete_Matrix
    __del__ = lambda self: None
Matrix_swigregister = _QuantLib.Matrix_swigregister
Matrix_swigregister(Matrix)

class SalvagingAlgorithm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SalvagingAlgorithm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SalvagingAlgorithm, name)
    __repr__ = _swig_repr
    NoAlgorithm = _QuantLib.SalvagingAlgorithm_NoAlgorithm
    Spectral = _QuantLib.SalvagingAlgorithm_Spectral

    def __init__(self):
        this = _QuantLib.new_SalvagingAlgorithm()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SalvagingAlgorithm
    __del__ = lambda self: None
SalvagingAlgorithm_swigregister = _QuantLib.SalvagingAlgorithm_swigregister
SalvagingAlgorithm_swigregister(SalvagingAlgorithm)


def inverse(m):
    return _QuantLib.inverse(m)
inverse = _QuantLib.inverse

def transpose(m):
    return _QuantLib.transpose(m)
transpose = _QuantLib.transpose

def outerProduct(v1, v2):
    return _QuantLib.outerProduct(v1, v2)
outerProduct = _QuantLib.outerProduct

def pseudoSqrt(m, a):
    return _QuantLib.pseudoSqrt(m, a)
pseudoSqrt = _QuantLib.pseudoSqrt
class SVD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SVD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SVD, name)
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _QuantLib.new_SVD(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def U(self):
        return _QuantLib.SVD_U(self)

    def V(self):
        return _QuantLib.SVD_V(self)

    def S(self):
        return _QuantLib.SVD_S(self)

    def singularValues(self):
        return _QuantLib.SVD_singularValues(self)
    __swig_destroy__ = _QuantLib.delete_SVD
    __del__ = lambda self: None
SVD_swigregister = _QuantLib.SVD_swigregister
SVD_swigregister(SVD)

class MatrixMultiplicationProxy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixMultiplicationProxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixMultiplicationProxy, name)
    __repr__ = _swig_repr

    def __init__(self, matrixMult):
        this = _QuantLib.new_MatrixMultiplicationProxy(matrixMult)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x):
        return _QuantLib.MatrixMultiplicationProxy___call__(self, x)
    __swig_destroy__ = _QuantLib.delete_MatrixMultiplicationProxy
    __del__ = lambda self: None
MatrixMultiplicationProxy_swigregister = _QuantLib.MatrixMultiplicationProxy_swigregister
MatrixMultiplicationProxy_swigregister(MatrixMultiplicationProxy)

class BiCGstab(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiCGstab, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BiCGstab, name)
    __repr__ = _swig_repr

    def solve(self, *args):
        return _QuantLib.BiCGstab_solve(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_BiCGstab(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BiCGstab
    __del__ = lambda self: None
BiCGstab_swigregister = _QuantLib.BiCGstab_swigregister
BiCGstab_swigregister(BiCGstab)

class GMRES(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GMRES, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GMRES, name)
    __repr__ = _swig_repr

    def solve(self, *args):
        return _QuantLib.GMRES_solve(self, *args)

    def solveWithRestart(self, *args):
        return _QuantLib.GMRES_solveWithRestart(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_GMRES(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_GMRES
    __del__ = lambda self: None
GMRES_swigregister = _QuantLib.GMRES_swigregister
GMRES_swigregister(GMRES)

class FdmLinearOpComposite(FdmLinearOp):
    __swig_setmethods__ = {}
    for _s in [FdmLinearOp]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmLinearOpComposite, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmLinearOp]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmLinearOpComposite, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def size(self):
        return _QuantLib.FdmLinearOpComposite_size(self)

    def setTime(self, t1, t2):
        return _QuantLib.FdmLinearOpComposite_setTime(self, t1, t2)

    def apply_mixed(self, r):
        return _QuantLib.FdmLinearOpComposite_apply_mixed(self, r)

    def apply_direction(self, direction, r):
        return _QuantLib.FdmLinearOpComposite_apply_direction(self, direction, r)

    def solve_splitting(self, direction, r, s):
        return _QuantLib.FdmLinearOpComposite_solve_splitting(self, direction, r, s)

    def preconditioner(self, r, s):
        return _QuantLib.FdmLinearOpComposite_preconditioner(self, r, s)
    __swig_destroy__ = _QuantLib.delete_FdmLinearOpComposite
    __del__ = lambda self: None
FdmLinearOpComposite_swigregister = _QuantLib.FdmLinearOpComposite_swigregister
FdmLinearOpComposite_swigregister(FdmLinearOpComposite)

class FdmLinearOpCompositeProxy(FdmLinearOpComposite):
    __swig_setmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmLinearOpCompositeProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmLinearOpCompositeProxy, name)
    __repr__ = _swig_repr

    def __init__(self, callback):
        this = _QuantLib.new_FdmLinearOpCompositeProxy(callback)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmLinearOpCompositeProxy
    __del__ = lambda self: None
FdmLinearOpCompositeProxy_swigregister = _QuantLib.FdmLinearOpCompositeProxy_swigregister
FdmLinearOpCompositeProxy_swigregister(FdmLinearOpCompositeProxy)

class TripleBandLinearOp(FdmLinearOp):
    __swig_setmethods__ = {}
    for _s in [FdmLinearOp]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TripleBandLinearOp, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmLinearOp]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TripleBandLinearOp, name)
    __repr__ = _swig_repr

    def __init__(self, direction, mesher):
        this = _QuantLib.new_TripleBandLinearOp(direction, mesher)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def apply(self, r):
        return _QuantLib.TripleBandLinearOp_apply(self, r)

    def solve_splitting(self, r, a, b=1.0):
        return _QuantLib.TripleBandLinearOp_solve_splitting(self, r, a, b)

    def mult(self, u):
        return _QuantLib.TripleBandLinearOp_mult(self, u)

    def multR(self, u):
        return _QuantLib.TripleBandLinearOp_multR(self, u)

    def add(self, *args):
        return _QuantLib.TripleBandLinearOp_add(self, *args)

    def axpyb(self, a, x, y, b):
        return _QuantLib.TripleBandLinearOp_axpyb(self, a, x, y, b)

    def swap(self, m):
        return _QuantLib.TripleBandLinearOp_swap(self, m)
    __swig_destroy__ = _QuantLib.delete_TripleBandLinearOp
    __del__ = lambda self: None
TripleBandLinearOp_swigregister = _QuantLib.TripleBandLinearOp_swigregister
TripleBandLinearOp_swigregister(TripleBandLinearOp)

class NinePointLinearOp(FdmLinearOp):
    __swig_setmethods__ = {}
    for _s in [FdmLinearOp]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NinePointLinearOp, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmLinearOp]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NinePointLinearOp, name)
    __repr__ = _swig_repr

    def __init__(self, d0, d1, mesher):
        this = _QuantLib.new_NinePointLinearOp(d0, d1, mesher)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_NinePointLinearOp
    __del__ = lambda self: None
NinePointLinearOp_swigregister = _QuantLib.NinePointLinearOp_swigregister
NinePointLinearOp_swigregister(NinePointLinearOp)

class NthOrderDerivativeOp(FdmLinearOp):
    __swig_setmethods__ = {}
    for _s in [FdmLinearOp]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NthOrderDerivativeOp, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmLinearOp]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NthOrderDerivativeOp, name)
    __repr__ = _swig_repr

    def __init__(self, direction, order, nPoints, mesher):
        this = _QuantLib.new_NthOrderDerivativeOp(direction, order, nPoints, mesher)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_NthOrderDerivativeOp
    __del__ = lambda self: None
NthOrderDerivativeOp_swigregister = _QuantLib.NthOrderDerivativeOp_swigregister
NthOrderDerivativeOp_swigregister(NthOrderDerivativeOp)

class FdmBatesOp(FdmLinearOpComposite):
    __swig_setmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmBatesOp, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmBatesOp, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FdmBatesOp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmBatesOp
    __del__ = lambda self: None
FdmBatesOp_swigregister = _QuantLib.FdmBatesOp_swigregister
FdmBatesOp_swigregister(FdmBatesOp)

class FdmBlackScholesOp(FdmLinearOpComposite):
    __swig_setmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmBlackScholesOp, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmBlackScholesOp, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FdmBlackScholesOp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmBlackScholesOp
    __del__ = lambda self: None
FdmBlackScholesOp_swigregister = _QuantLib.FdmBlackScholesOp_swigregister
FdmBlackScholesOp_swigregister(FdmBlackScholesOp)

class Fdm2dBlackScholesOp(FdmLinearOpComposite):
    __swig_setmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Fdm2dBlackScholesOp, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Fdm2dBlackScholesOp, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Fdm2dBlackScholesOp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Fdm2dBlackScholesOp
    __del__ = lambda self: None
Fdm2dBlackScholesOp_swigregister = _QuantLib.Fdm2dBlackScholesOp_swigregister
Fdm2dBlackScholesOp_swigregister(Fdm2dBlackScholesOp)

class FdmCEVOp(FdmLinearOpComposite):
    __swig_setmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmCEVOp, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmCEVOp, name)
    __repr__ = _swig_repr

    def __init__(self, mesher, rTS, f0, alpha, beta, direction):
        this = _QuantLib.new_FdmCEVOp(mesher, rTS, f0, alpha, beta, direction)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmCEVOp
    __del__ = lambda self: None
FdmCEVOp_swigregister = _QuantLib.FdmCEVOp_swigregister
FdmCEVOp_swigregister(FdmCEVOp)

class FdmG2Op(FdmLinearOpComposite):
    __swig_setmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmG2Op, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmG2Op, name)
    __repr__ = _swig_repr

    def __init__(self, mesher, model, direction1, direction2):
        this = _QuantLib.new_FdmG2Op(mesher, model, direction1, direction2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmG2Op
    __del__ = lambda self: None
FdmG2Op_swigregister = _QuantLib.FdmG2Op_swigregister
FdmG2Op_swigregister(FdmG2Op)

class FdmHestonHullWhiteOp(FdmLinearOpComposite):
    __swig_setmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmHestonHullWhiteOp, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmHestonHullWhiteOp, name)
    __repr__ = _swig_repr

    def __init__(self, mesher, hestonProcess, hwProcess, equityShortRateCorrelation):
        this = _QuantLib.new_FdmHestonHullWhiteOp(mesher, hestonProcess, hwProcess, equityShortRateCorrelation)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmHestonHullWhiteOp
    __del__ = lambda self: None
FdmHestonHullWhiteOp_swigregister = _QuantLib.FdmHestonHullWhiteOp_swigregister
FdmHestonHullWhiteOp_swigregister(FdmHestonHullWhiteOp)

class FdmHestonOp(FdmLinearOpComposite):
    __swig_setmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmHestonOp, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmHestonOp, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FdmHestonOp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmHestonOp
    __del__ = lambda self: None
FdmHestonOp_swigregister = _QuantLib.FdmHestonOp_swigregister
FdmHestonOp_swigregister(FdmHestonOp)

class FdmHullWhiteOp(FdmLinearOpComposite):
    __swig_setmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmHullWhiteOp, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmHullWhiteOp, name)
    __repr__ = _swig_repr

    def __init__(self, mesher, model, direction):
        this = _QuantLib.new_FdmHullWhiteOp(mesher, model, direction)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmHullWhiteOp
    __del__ = lambda self: None
FdmHullWhiteOp_swigregister = _QuantLib.FdmHullWhiteOp_swigregister
FdmHullWhiteOp_swigregister(FdmHullWhiteOp)

class FdmLocalVolFwdOp(FdmLinearOpComposite):
    __swig_setmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmLocalVolFwdOp, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmLocalVolFwdOp, name)
    __repr__ = _swig_repr

    def __init__(self, mesher, spot, rTS, qTS, localVol, direction=0):
        this = _QuantLib.new_FdmLocalVolFwdOp(mesher, spot, rTS, qTS, localVol, direction)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmLocalVolFwdOp
    __del__ = lambda self: None
FdmLocalVolFwdOp_swigregister = _QuantLib.FdmLocalVolFwdOp_swigregister
FdmLocalVolFwdOp_swigregister(FdmLocalVolFwdOp)

class FdmOrnsteinUhlenbeckOp(FdmLinearOpComposite):
    __swig_setmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmOrnsteinUhlenbeckOp, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmOrnsteinUhlenbeckOp, name)
    __repr__ = _swig_repr

    def __init__(self, mesher, p, rTS, direction=0):
        this = _QuantLib.new_FdmOrnsteinUhlenbeckOp(mesher, p, rTS, direction)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmOrnsteinUhlenbeckOp
    __del__ = lambda self: None
FdmOrnsteinUhlenbeckOp_swigregister = _QuantLib.FdmOrnsteinUhlenbeckOp_swigregister
FdmOrnsteinUhlenbeckOp_swigregister(FdmOrnsteinUhlenbeckOp)

class FdmSabrOp(FdmLinearOpComposite):
    __swig_setmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmSabrOp, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmSabrOp, name)
    __repr__ = _swig_repr

    def __init__(self, mesher, rTS, f0, alpha, beta, nu, rho):
        this = _QuantLib.new_FdmSabrOp(mesher, rTS, f0, alpha, beta, nu, rho)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmSabrOp
    __del__ = lambda self: None
FdmSabrOp_swigregister = _QuantLib.FdmSabrOp_swigregister
FdmSabrOp_swigregister(FdmSabrOp)

class FdmZabrOp(FdmLinearOpComposite):
    __swig_setmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmZabrOp, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmZabrOp, name)
    __repr__ = _swig_repr

    def __init__(self, mesher, beta, nu, rho, gamma):
        this = _QuantLib.new_FdmZabrOp(mesher, beta, nu, rho, gamma)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmZabrOp
    __del__ = lambda self: None
FdmZabrOp_swigregister = _QuantLib.FdmZabrOp_swigregister
FdmZabrOp_swigregister(FdmZabrOp)

class FdmDupire1dOp(FdmLinearOpComposite):
    __swig_setmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmDupire1dOp, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmDupire1dOp, name)
    __repr__ = _swig_repr

    def __init__(self, mesher, localVolatility):
        this = _QuantLib.new_FdmDupire1dOp(mesher, localVolatility)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmDupire1dOp
    __del__ = lambda self: None
FdmDupire1dOp_swigregister = _QuantLib.FdmDupire1dOp_swigregister
FdmDupire1dOp_swigregister(FdmDupire1dOp)

class FdmBlackScholesFwdOp(FdmLinearOpComposite):
    __swig_setmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmBlackScholesFwdOp, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmBlackScholesFwdOp, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FdmBlackScholesFwdOp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmBlackScholesFwdOp
    __del__ = lambda self: None
FdmBlackScholesFwdOp_swigregister = _QuantLib.FdmBlackScholesFwdOp_swigregister
FdmBlackScholesFwdOp_swigregister(FdmBlackScholesFwdOp)

class FdmSquareRootFwdOp(FdmLinearOpComposite):
    __swig_setmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmSquareRootFwdOp, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmSquareRootFwdOp, name)
    __repr__ = _swig_repr
    Plain = _QuantLib.FdmSquareRootFwdOp_Plain
    Power = _QuantLib.FdmSquareRootFwdOp_Power
    Log = _QuantLib.FdmSquareRootFwdOp_Log

    def __init__(self, *args):
        this = _QuantLib.new_FdmSquareRootFwdOp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmSquareRootFwdOp
    __del__ = lambda self: None
FdmSquareRootFwdOp_swigregister = _QuantLib.FdmSquareRootFwdOp_swigregister
FdmSquareRootFwdOp_swigregister(FdmSquareRootFwdOp)

class FdmHestonFwdOp(FdmLinearOpComposite):
    __swig_setmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmHestonFwdOp, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmLinearOpComposite]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmHestonFwdOp, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FdmHestonFwdOp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmHestonFwdOp
    __del__ = lambda self: None
FdmHestonFwdOp_swigregister = _QuantLib.FdmHestonFwdOp_swigregister
FdmHestonFwdOp_swigregister(FdmHestonFwdOp)

class FirstDerivativeOp(TripleBandLinearOp):
    __swig_setmethods__ = {}
    for _s in [TripleBandLinearOp]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FirstDerivativeOp, name, value)
    __swig_getmethods__ = {}
    for _s in [TripleBandLinearOp]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FirstDerivativeOp, name)
    __repr__ = _swig_repr

    def __init__(self, direction, mesher):
        this = _QuantLib.new_FirstDerivativeOp(direction, mesher)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FirstDerivativeOp
    __del__ = lambda self: None
FirstDerivativeOp_swigregister = _QuantLib.FirstDerivativeOp_swigregister
FirstDerivativeOp_swigregister(FirstDerivativeOp)

class SecondDerivativeOp(TripleBandLinearOp):
    __swig_setmethods__ = {}
    for _s in [TripleBandLinearOp]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecondDerivativeOp, name, value)
    __swig_getmethods__ = {}
    for _s in [TripleBandLinearOp]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecondDerivativeOp, name)
    __repr__ = _swig_repr

    def __init__(self, direction, mesher):
        this = _QuantLib.new_SecondDerivativeOp(direction, mesher)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SecondDerivativeOp
    __del__ = lambda self: None
SecondDerivativeOp_swigregister = _QuantLib.SecondDerivativeOp_swigregister
SecondDerivativeOp_swigregister(SecondDerivativeOp)

class SecondOrderMixedDerivativeOp(NinePointLinearOp):
    __swig_setmethods__ = {}
    for _s in [NinePointLinearOp]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecondOrderMixedDerivativeOp, name, value)
    __swig_getmethods__ = {}
    for _s in [NinePointLinearOp]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecondOrderMixedDerivativeOp, name)
    __repr__ = _swig_repr

    def __init__(self, d0, d1, mesher):
        this = _QuantLib.new_SecondOrderMixedDerivativeOp(d0, d1, mesher)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SecondOrderMixedDerivativeOp
    __del__ = lambda self: None
SecondOrderMixedDerivativeOp_swigregister = _QuantLib.SecondOrderMixedDerivativeOp_swigregister
SecondOrderMixedDerivativeOp_swigregister(SecondOrderMixedDerivativeOp)

class FdmLinearOpIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmLinearOpIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FdmLinearOpIterator, name)
    __repr__ = _swig_repr

    def __init__(self, dim, coordinates, index):
        this = _QuantLib.new_FdmLinearOpIterator(dim, coordinates, index)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def coordinates(self):
        return _QuantLib.FdmLinearOpIterator_coordinates(self)

    def increment(self):
        return _QuantLib.FdmLinearOpIterator_increment(self)

    def notEqual(self, iterator):
        return _QuantLib.FdmLinearOpIterator_notEqual(self, iterator)

    def index(self):
        return _QuantLib.FdmLinearOpIterator_index(self)
    __swig_destroy__ = _QuantLib.delete_FdmLinearOpIterator
    __del__ = lambda self: None
FdmLinearOpIterator_swigregister = _QuantLib.FdmLinearOpIterator_swigregister
FdmLinearOpIterator_swigregister(FdmLinearOpIterator)

class FdmLinearOpLayout(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmLinearOpLayout, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FdmLinearOpLayout, name)
    __repr__ = _swig_repr

    def __init__(self, dim):
        this = _QuantLib.new_FdmLinearOpLayout(dim)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def spacing(self):
        return _QuantLib.FdmLinearOpLayout_spacing(self)

    def dim(self):
        return _QuantLib.FdmLinearOpLayout_dim(self)

    def index(self, coordinates):
        return _QuantLib.FdmLinearOpLayout_index(self, coordinates)

    def begin(self):
        return _QuantLib.FdmLinearOpLayout_begin(self)

    def end(self):
        return _QuantLib.FdmLinearOpLayout_end(self)

    def size(self):
        return _QuantLib.FdmLinearOpLayout_size(self)

    def neighbourhood(self, *args):
        return _QuantLib.FdmLinearOpLayout_neighbourhood(self, *args)

    def iter_neighbourhood(self, iterator, i, offset):
        return _QuantLib.FdmLinearOpLayout_iter_neighbourhood(self, iterator, i, offset)
    __swig_destroy__ = _QuantLib.delete_FdmLinearOpLayout
    __del__ = lambda self: None
FdmLinearOpLayout_swigregister = _QuantLib.FdmLinearOpLayout_swigregister
FdmLinearOpLayout_swigregister(FdmLinearOpLayout)

class FdmIndicesOnBoundary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmIndicesOnBoundary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FdmIndicesOnBoundary, name)
    __repr__ = _swig_repr

    def __init__(self, l, direction, side):
        this = _QuantLib.new_FdmIndicesOnBoundary(l, direction, side)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getIndices(self):
        return _QuantLib.FdmIndicesOnBoundary_getIndices(self)
    __swig_destroy__ = _QuantLib.delete_FdmIndicesOnBoundary
    __del__ = lambda self: None
FdmIndicesOnBoundary_swigregister = _QuantLib.FdmIndicesOnBoundary_swigregister
FdmIndicesOnBoundary_swigregister(FdmIndicesOnBoundary)

class FdmSchemeDesc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmSchemeDesc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FdmSchemeDesc, name)
    __repr__ = _swig_repr
    HundsdorferType = _QuantLib.FdmSchemeDesc_HundsdorferType
    DouglasType = _QuantLib.FdmSchemeDesc_DouglasType
    CraigSneydType = _QuantLib.FdmSchemeDesc_CraigSneydType
    ModifiedCraigSneydType = _QuantLib.FdmSchemeDesc_ModifiedCraigSneydType
    ImplicitEulerType = _QuantLib.FdmSchemeDesc_ImplicitEulerType
    ExplicitEulerType = _QuantLib.FdmSchemeDesc_ExplicitEulerType
    MethodOfLinesType = _QuantLib.FdmSchemeDesc_MethodOfLinesType
    TrBDF2Type = _QuantLib.FdmSchemeDesc_TrBDF2Type
    CrankNicolsonType = _QuantLib.FdmSchemeDesc_CrankNicolsonType

    def __init__(self, type, theta, mu):
        this = _QuantLib.new_FdmSchemeDesc(type, theta, mu)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_getmethods__["type"] = _QuantLib.FdmSchemeDesc_type_get
    if _newclass:
        type = _swig_property(_QuantLib.FdmSchemeDesc_type_get)
    __swig_getmethods__["theta"] = _QuantLib.FdmSchemeDesc_theta_get
    if _newclass:
        theta = _swig_property(_QuantLib.FdmSchemeDesc_theta_get)
    __swig_getmethods__["mu"] = _QuantLib.FdmSchemeDesc_mu_get
    if _newclass:
        mu = _swig_property(_QuantLib.FdmSchemeDesc_mu_get)
    if _newclass:
        Douglas = staticmethod(_QuantLib.FdmSchemeDesc_Douglas)
    else:
        Douglas = _QuantLib.FdmSchemeDesc_Douglas
    if _newclass:
        CrankNicolson = staticmethod(_QuantLib.FdmSchemeDesc_CrankNicolson)
    else:
        CrankNicolson = _QuantLib.FdmSchemeDesc_CrankNicolson
    if _newclass:
        ImplicitEuler = staticmethod(_QuantLib.FdmSchemeDesc_ImplicitEuler)
    else:
        ImplicitEuler = _QuantLib.FdmSchemeDesc_ImplicitEuler
    if _newclass:
        ExplicitEuler = staticmethod(_QuantLib.FdmSchemeDesc_ExplicitEuler)
    else:
        ExplicitEuler = _QuantLib.FdmSchemeDesc_ExplicitEuler
    if _newclass:
        CraigSneyd = staticmethod(_QuantLib.FdmSchemeDesc_CraigSneyd)
    else:
        CraigSneyd = _QuantLib.FdmSchemeDesc_CraigSneyd
    if _newclass:
        ModifiedCraigSneyd = staticmethod(_QuantLib.FdmSchemeDesc_ModifiedCraigSneyd)
    else:
        ModifiedCraigSneyd = _QuantLib.FdmSchemeDesc_ModifiedCraigSneyd
    if _newclass:
        Hundsdorfer = staticmethod(_QuantLib.FdmSchemeDesc_Hundsdorfer)
    else:
        Hundsdorfer = _QuantLib.FdmSchemeDesc_Hundsdorfer
    if _newclass:
        ModifiedHundsdorfer = staticmethod(_QuantLib.FdmSchemeDesc_ModifiedHundsdorfer)
    else:
        ModifiedHundsdorfer = _QuantLib.FdmSchemeDesc_ModifiedHundsdorfer
    if _newclass:
        MethodOfLines = staticmethod(_QuantLib.FdmSchemeDesc_MethodOfLines)
    else:
        MethodOfLines = _QuantLib.FdmSchemeDesc_MethodOfLines
    if _newclass:
        TrBDF2 = staticmethod(_QuantLib.FdmSchemeDesc_TrBDF2)
    else:
        TrBDF2 = _QuantLib.FdmSchemeDesc_TrBDF2
    __swig_destroy__ = _QuantLib.delete_FdmSchemeDesc
    __del__ = lambda self: None
FdmSchemeDesc_swigregister = _QuantLib.FdmSchemeDesc_swigregister
FdmSchemeDesc_swigregister(FdmSchemeDesc)

def FdmSchemeDesc_Douglas():
    return _QuantLib.FdmSchemeDesc_Douglas()
FdmSchemeDesc_Douglas = _QuantLib.FdmSchemeDesc_Douglas

def FdmSchemeDesc_CrankNicolson():
    return _QuantLib.FdmSchemeDesc_CrankNicolson()
FdmSchemeDesc_CrankNicolson = _QuantLib.FdmSchemeDesc_CrankNicolson

def FdmSchemeDesc_ImplicitEuler():
    return _QuantLib.FdmSchemeDesc_ImplicitEuler()
FdmSchemeDesc_ImplicitEuler = _QuantLib.FdmSchemeDesc_ImplicitEuler

def FdmSchemeDesc_ExplicitEuler():
    return _QuantLib.FdmSchemeDesc_ExplicitEuler()
FdmSchemeDesc_ExplicitEuler = _QuantLib.FdmSchemeDesc_ExplicitEuler

def FdmSchemeDesc_CraigSneyd():
    return _QuantLib.FdmSchemeDesc_CraigSneyd()
FdmSchemeDesc_CraigSneyd = _QuantLib.FdmSchemeDesc_CraigSneyd

def FdmSchemeDesc_ModifiedCraigSneyd():
    return _QuantLib.FdmSchemeDesc_ModifiedCraigSneyd()
FdmSchemeDesc_ModifiedCraigSneyd = _QuantLib.FdmSchemeDesc_ModifiedCraigSneyd

def FdmSchemeDesc_Hundsdorfer():
    return _QuantLib.FdmSchemeDesc_Hundsdorfer()
FdmSchemeDesc_Hundsdorfer = _QuantLib.FdmSchemeDesc_Hundsdorfer

def FdmSchemeDesc_ModifiedHundsdorfer():
    return _QuantLib.FdmSchemeDesc_ModifiedHundsdorfer()
FdmSchemeDesc_ModifiedHundsdorfer = _QuantLib.FdmSchemeDesc_ModifiedHundsdorfer

def FdmSchemeDesc_MethodOfLines(eps=0.001, relInitStepSize=0.01):
    return _QuantLib.FdmSchemeDesc_MethodOfLines(eps, relInitStepSize)
FdmSchemeDesc_MethodOfLines = _QuantLib.FdmSchemeDesc_MethodOfLines

def FdmSchemeDesc_TrBDF2():
    return _QuantLib.FdmSchemeDesc_TrBDF2()
FdmSchemeDesc_TrBDF2 = _QuantLib.FdmSchemeDesc_TrBDF2

class FdmQuantoHelper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmQuantoHelper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FdmQuantoHelper, name)
    __repr__ = _swig_repr

    def __init__(self, rTS, fTS, fxVolTS, equityFxCorrelation, exchRateATMlevel):
        this = _QuantLib.new_FdmQuantoHelper(rTS, fTS, fxVolTS, equityFxCorrelation, exchRateATMlevel)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmQuantoHelper
    __del__ = lambda self: None
FdmQuantoHelper_swigregister = _QuantLib.FdmQuantoHelper_swigregister
FdmQuantoHelper_swigregister(FdmQuantoHelper)

class FdmHestonGreensFct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmHestonGreensFct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FdmHestonGreensFct, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ZeroCorrelation = _QuantLib.FdmHestonGreensFct_ZeroCorrelation
    Gaussian = _QuantLib.FdmHestonGreensFct_Gaussian
    SemiAnalytical = _QuantLib.FdmHestonGreensFct_SemiAnalytical
    __swig_destroy__ = _QuantLib.delete_FdmHestonGreensFct
    __del__ = lambda self: None
FdmHestonGreensFct_swigregister = _QuantLib.FdmHestonGreensFct_swigregister
FdmHestonGreensFct_swigregister(FdmHestonGreensFct)

class FdmStepConditionProxy(FdmStepCondition):
    __swig_setmethods__ = {}
    for _s in [FdmStepCondition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmStepConditionProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmStepCondition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmStepConditionProxy, name)
    __repr__ = _swig_repr

    def __init__(self, callback):
        this = _QuantLib.new_FdmStepConditionProxy(callback)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmStepConditionProxy
    __del__ = lambda self: None
FdmStepConditionProxy_swigregister = _QuantLib.FdmStepConditionProxy_swigregister
FdmStepConditionProxy_swigregister(FdmStepConditionProxy)

class FdmSnapshotCondition(FdmStepCondition):
    __swig_setmethods__ = {}
    for _s in [FdmStepCondition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmSnapshotCondition, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmStepCondition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmSnapshotCondition, name)
    __repr__ = _swig_repr

    def __init__(self, t):
        this = _QuantLib.new_FdmSnapshotCondition(t)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getTime(self):
        return _QuantLib.FdmSnapshotCondition_getTime(self)

    def getValues(self):
        return _QuantLib.FdmSnapshotCondition_getValues(self)
    __swig_destroy__ = _QuantLib.delete_FdmSnapshotCondition
    __del__ = lambda self: None
FdmSnapshotCondition_swigregister = _QuantLib.FdmSnapshotCondition_swigregister
FdmSnapshotCondition_swigregister(FdmSnapshotCondition)

class FdmStepConditionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmStepConditionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FdmStepConditionVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.FdmStepConditionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.FdmStepConditionVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.FdmStepConditionVector___bool__(self)

    def __len__(self):
        return _QuantLib.FdmStepConditionVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.FdmStepConditionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.FdmStepConditionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.FdmStepConditionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.FdmStepConditionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.FdmStepConditionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.FdmStepConditionVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.FdmStepConditionVector_pop(self)

    def append(self, x):
        return _QuantLib.FdmStepConditionVector_append(self, x)

    def empty(self):
        return _QuantLib.FdmStepConditionVector_empty(self)

    def size(self):
        return _QuantLib.FdmStepConditionVector_size(self)

    def swap(self, v):
        return _QuantLib.FdmStepConditionVector_swap(self, v)

    def begin(self):
        return _QuantLib.FdmStepConditionVector_begin(self)

    def end(self):
        return _QuantLib.FdmStepConditionVector_end(self)

    def rbegin(self):
        return _QuantLib.FdmStepConditionVector_rbegin(self)

    def rend(self):
        return _QuantLib.FdmStepConditionVector_rend(self)

    def clear(self):
        return _QuantLib.FdmStepConditionVector_clear(self)

    def get_allocator(self):
        return _QuantLib.FdmStepConditionVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.FdmStepConditionVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.FdmStepConditionVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_FdmStepConditionVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.FdmStepConditionVector_push_back(self, x)

    def front(self):
        return _QuantLib.FdmStepConditionVector_front(self)

    def back(self):
        return _QuantLib.FdmStepConditionVector_back(self)

    def assign(self, n, x):
        return _QuantLib.FdmStepConditionVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.FdmStepConditionVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.FdmStepConditionVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.FdmStepConditionVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.FdmStepConditionVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_FdmStepConditionVector
    __del__ = lambda self: None
FdmStepConditionVector_swigregister = _QuantLib.FdmStepConditionVector_swigregister
FdmStepConditionVector_swigregister(FdmStepConditionVector)

class FdmStepConditionComposite(FdmStepCondition):
    __swig_setmethods__ = {}
    for _s in [FdmStepCondition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmStepConditionComposite, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmStepCondition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmStepConditionComposite, name)
    __repr__ = _swig_repr

    def __init__(self, stoppingTimes, conditions):
        this = _QuantLib.new_FdmStepConditionComposite(stoppingTimes, conditions)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def stoppingTimes(self):
        return _QuantLib.FdmStepConditionComposite_stoppingTimes(self)

    def conditions(self):
        return _QuantLib.FdmStepConditionComposite_conditions(self)
    if _newclass:
        joinConditions = staticmethod(_QuantLib.FdmStepConditionComposite_joinConditions)
    else:
        joinConditions = _QuantLib.FdmStepConditionComposite_joinConditions
    if _newclass:
        vanillaComposite = staticmethod(_QuantLib.FdmStepConditionComposite_vanillaComposite)
    else:
        vanillaComposite = _QuantLib.FdmStepConditionComposite_vanillaComposite
    __swig_destroy__ = _QuantLib.delete_FdmStepConditionComposite
    __del__ = lambda self: None
FdmStepConditionComposite_swigregister = _QuantLib.FdmStepConditionComposite_swigregister
FdmStepConditionComposite_swigregister(FdmStepConditionComposite)

def FdmStepConditionComposite_joinConditions(c1, c2):
    return _QuantLib.FdmStepConditionComposite_joinConditions(c1, c2)
FdmStepConditionComposite_joinConditions = _QuantLib.FdmStepConditionComposite_joinConditions

def FdmStepConditionComposite_vanillaComposite(schedule, exercise, mesher, calculator, refDate, dayCounter):
    return _QuantLib.FdmStepConditionComposite_vanillaComposite(schedule, exercise, mesher, calculator, refDate, dayCounter)
FdmStepConditionComposite_vanillaComposite = _QuantLib.FdmStepConditionComposite_vanillaComposite

class FdmAmericanStepCondition(FdmStepCondition):
    __swig_setmethods__ = {}
    for _s in [FdmStepCondition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmAmericanStepCondition, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmStepCondition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmAmericanStepCondition, name)
    __repr__ = _swig_repr

    def __init__(self, mesher, calculator):
        this = _QuantLib.new_FdmAmericanStepCondition(mesher, calculator)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmAmericanStepCondition
    __del__ = lambda self: None
FdmAmericanStepCondition_swigregister = _QuantLib.FdmAmericanStepCondition_swigregister
FdmAmericanStepCondition_swigregister(FdmAmericanStepCondition)

class FdmArithmeticAverageCondition(FdmStepCondition):
    __swig_setmethods__ = {}
    for _s in [FdmStepCondition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmArithmeticAverageCondition, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmStepCondition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmArithmeticAverageCondition, name)
    __repr__ = _swig_repr

    def __init__(self, averageTimes, arg3, pastFixings, mesher, equityDirection):
        this = _QuantLib.new_FdmArithmeticAverageCondition(averageTimes, arg3, pastFixings, mesher, equityDirection)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmArithmeticAverageCondition
    __del__ = lambda self: None
FdmArithmeticAverageCondition_swigregister = _QuantLib.FdmArithmeticAverageCondition_swigregister
FdmArithmeticAverageCondition_swigregister(FdmArithmeticAverageCondition)

class FdmBermudanStepCondition(FdmStepCondition):
    __swig_setmethods__ = {}
    for _s in [FdmStepCondition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmBermudanStepCondition, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmStepCondition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmBermudanStepCondition, name)
    __repr__ = _swig_repr

    def __init__(self, exerciseDates, referenceDate, dayCounter, mesher, calculator):
        this = _QuantLib.new_FdmBermudanStepCondition(exerciseDates, referenceDate, dayCounter, mesher, calculator)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def exerciseTimes(self):
        return _QuantLib.FdmBermudanStepCondition_exerciseTimes(self)
    __swig_destroy__ = _QuantLib.delete_FdmBermudanStepCondition
    __del__ = lambda self: None
FdmBermudanStepCondition_swigregister = _QuantLib.FdmBermudanStepCondition_swigregister
FdmBermudanStepCondition_swigregister(FdmBermudanStepCondition)

class FdmSimpleStorageCondition(FdmStepCondition):
    __swig_setmethods__ = {}
    for _s in [FdmStepCondition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmSimpleStorageCondition, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmStepCondition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmSimpleStorageCondition, name)
    __repr__ = _swig_repr

    def __init__(self, exerciseTimes, mesher, calculator, changeRate):
        this = _QuantLib.new_FdmSimpleStorageCondition(exerciseTimes, mesher, calculator, changeRate)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmSimpleStorageCondition
    __del__ = lambda self: None
FdmSimpleStorageCondition_swigregister = _QuantLib.FdmSimpleStorageCondition_swigregister
FdmSimpleStorageCondition_swigregister(FdmSimpleStorageCondition)

class FdmSimpleSwingCondition(FdmStepCondition):
    __swig_setmethods__ = {}
    for _s in [FdmStepCondition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmSimpleSwingCondition, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmStepCondition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmSimpleSwingCondition, name)
    __repr__ = _swig_repr

    def __init__(self, exerciseTimes, mesher, calculator, swingDirection, minExercises=0):
        this = _QuantLib.new_FdmSimpleSwingCondition(exerciseTimes, mesher, calculator, swingDirection, minExercises)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FdmSimpleSwingCondition
    __del__ = lambda self: None
FdmSimpleSwingCondition_swigregister = _QuantLib.FdmSimpleSwingCondition_swigregister
FdmSimpleSwingCondition_swigregister(FdmSimpleSwingCondition)

class FdmDividendHandler(FdmStepCondition):
    __swig_setmethods__ = {}
    for _s in [FdmStepCondition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FdmDividendHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [FdmStepCondition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FdmDividendHandler, name)
    __repr__ = _swig_repr

    def __init__(self, schedule, mesher, referenceDate, dayCounter, equityDirection):
        this = _QuantLib.new_FdmDividendHandler(schedule, mesher, referenceDate, dayCounter, equityDirection)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dividendTimes(self):
        return _QuantLib.FdmDividendHandler_dividendTimes(self)

    def dividendDates(self):
        return _QuantLib.FdmDividendHandler_dividendDates(self)

    def dividends(self):
        return _QuantLib.FdmDividendHandler_dividends(self)
    __swig_destroy__ = _QuantLib.delete_FdmDividendHandler
    __del__ = lambda self: None
FdmDividendHandler_swigregister = _QuantLib.FdmDividendHandler_swigregister
FdmDividendHandler_swigregister(FdmDividendHandler)

class TimeGrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeGrid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_TimeGrid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __len__(self):
        return _QuantLib.TimeGrid___len__(self)

    def __getitem__(self, i):
        return _QuantLib.TimeGrid___getitem__(self, i)

    def dt(self, i):
        return _QuantLib.TimeGrid_dt(self, i)
    __swig_destroy__ = _QuantLib.delete_TimeGrid
    __del__ = lambda self: None
TimeGrid_swigregister = _QuantLib.TimeGrid_swigregister
TimeGrid_swigregister(TimeGrid)

class HestonExpansion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HestonExpansion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HestonExpansion, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def impliedVolatility(self, strike, forward):
        return _QuantLib.HestonExpansion_impliedVolatility(self, strike, forward)
    __swig_destroy__ = _QuantLib.delete_HestonExpansion
    __del__ = lambda self: None
HestonExpansion_swigregister = _QuantLib.HestonExpansion_swigregister
HestonExpansion_swigregister(HestonExpansion)

class LPP2HestonExpansion(HestonExpansion):
    __swig_setmethods__ = {}
    for _s in [HestonExpansion]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LPP2HestonExpansion, name, value)
    __swig_getmethods__ = {}
    for _s in [HestonExpansion]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LPP2HestonExpansion, name)
    __repr__ = _swig_repr

    def __init__(self, kappa, theta, sigma, v0, rho, term):
        this = _QuantLib.new_LPP2HestonExpansion(kappa, theta, sigma, v0, rho, term)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def impliedVolatility(self, strike, forward):
        return _QuantLib.LPP2HestonExpansion_impliedVolatility(self, strike, forward)
    __swig_destroy__ = _QuantLib.delete_LPP2HestonExpansion
    __del__ = lambda self: None
LPP2HestonExpansion_swigregister = _QuantLib.LPP2HestonExpansion_swigregister
LPP2HestonExpansion_swigregister(LPP2HestonExpansion)

class LPP3HestonExpansion(HestonExpansion):
    __swig_setmethods__ = {}
    for _s in [HestonExpansion]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LPP3HestonExpansion, name, value)
    __swig_getmethods__ = {}
    for _s in [HestonExpansion]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LPP3HestonExpansion, name)
    __repr__ = _swig_repr

    def __init__(self, kappa, theta, sigma, v0, rho, term):
        this = _QuantLib.new_LPP3HestonExpansion(kappa, theta, sigma, v0, rho, term)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def impliedVolatility(self, strike, forward):
        return _QuantLib.LPP3HestonExpansion_impliedVolatility(self, strike, forward)
    __swig_destroy__ = _QuantLib.delete_LPP3HestonExpansion
    __del__ = lambda self: None
LPP3HestonExpansion_swigregister = _QuantLib.LPP3HestonExpansion_swigregister
LPP3HestonExpansion_swigregister(LPP3HestonExpansion)

class FordeHestonExpansion(HestonExpansion):
    __swig_setmethods__ = {}
    for _s in [HestonExpansion]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FordeHestonExpansion, name, value)
    __swig_getmethods__ = {}
    for _s in [HestonExpansion]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FordeHestonExpansion, name)
    __repr__ = _swig_repr

    def __init__(self, kappa, theta, sigma, v0, rho, term):
        this = _QuantLib.new_FordeHestonExpansion(kappa, theta, sigma, v0, rho, term)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def impliedVolatility(self, strike, forward):
        return _QuantLib.FordeHestonExpansion_impliedVolatility(self, strike, forward)
    __swig_destroy__ = _QuantLib.delete_FordeHestonExpansion
    __del__ = lambda self: None
FordeHestonExpansion_swigregister = _QuantLib.FordeHestonExpansion_swigregister
FordeHestonExpansion_swigregister(FordeHestonExpansion)

class IndexManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexManager, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        instance = staticmethod(_QuantLib.IndexManager_instance)
    else:
        instance = _QuantLib.IndexManager_instance

    def setHistory(self, name, fixings):
        return _QuantLib.IndexManager_setHistory(self, name, fixings)

    def getHistory(self, name):
        return _QuantLib.IndexManager_getHistory(self, name)

    def hasHistory(self, name):
        return _QuantLib.IndexManager_hasHistory(self, name)

    def histories(self):
        return _QuantLib.IndexManager_histories(self)

    def clearHistory(self, name):
        return _QuantLib.IndexManager_clearHistory(self, name)

    def clearHistories(self):
        return _QuantLib.IndexManager_clearHistories(self)
    __swig_destroy__ = _QuantLib.delete_IndexManager
    __del__ = lambda self: None
IndexManager_swigregister = _QuantLib.IndexManager_swigregister
IndexManager_swigregister(IndexManager)

def IndexManager_instance():
    return _QuantLib.IndexManager_instance()
IndexManager_instance = _QuantLib.IndexManager_instance

class InterestRateIndex(Index):
    __swig_setmethods__ = {}
    for _s in [Index]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterestRateIndex, name, value)
    __swig_getmethods__ = {}
    for _s in [Index]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterestRateIndex, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def familyName(self):
        return _QuantLib.InterestRateIndex_familyName(self)

    def tenor(self):
        return _QuantLib.InterestRateIndex_tenor(self)

    def fixingDays(self):
        return _QuantLib.InterestRateIndex_fixingDays(self)

    def fixingDate(self, valueDate):
        return _QuantLib.InterestRateIndex_fixingDate(self, valueDate)

    def maturityDate(self, valueDate):
        return _QuantLib.InterestRateIndex_maturityDate(self, valueDate)

    def valueDate(self, fixingDate):
        return _QuantLib.InterestRateIndex_valueDate(self, fixingDate)

    def currency(self):
        return _QuantLib.InterestRateIndex_currency(self)

    def dayCounter(self):
        return _QuantLib.InterestRateIndex_dayCounter(self)

    def forecastFixing(self, fixingDate):
        return _QuantLib.InterestRateIndex_forecastFixing(self, fixingDate)

    def pastFixing(self, fixingDate):
        return _QuantLib.InterestRateIndex_pastFixing(self, fixingDate)
    __swig_destroy__ = _QuantLib.delete_InterestRateIndex
    __del__ = lambda self: None
InterestRateIndex_swigregister = _QuantLib.InterestRateIndex_swigregister
InterestRateIndex_swigregister(InterestRateIndex)

class BMAIndex(InterestRateIndex):
    __swig_setmethods__ = {}
    for _s in [InterestRateIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BMAIndex, name, value)
    __swig_getmethods__ = {}
    for _s in [InterestRateIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BMAIndex, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_BMAIndex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isValidFixingDate(self, fixingDate):
        return _QuantLib.BMAIndex_isValidFixingDate(self, fixingDate)

    def forwardingTermStructure(self):
        return _QuantLib.BMAIndex_forwardingTermStructure(self)

    def maturityDate(self, valueDate):
        return _QuantLib.BMAIndex_maturityDate(self, valueDate)

    def fixingSchedule(self, start, end):
        return _QuantLib.BMAIndex_fixingSchedule(self, start, end)
    __swig_destroy__ = _QuantLib.delete_BMAIndex
    __del__ = lambda self: None
BMAIndex_swigregister = _QuantLib.BMAIndex_swigregister
BMAIndex_swigregister(BMAIndex)

class IborIndex(InterestRateIndex):
    __swig_setmethods__ = {}
    for _s in [InterestRateIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IborIndex, name, value)
    __swig_getmethods__ = {}
    for _s in [InterestRateIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IborIndex, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_IborIndex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def businessDayConvention(self):
        return _QuantLib.IborIndex_businessDayConvention(self)

    def endOfMonth(self):
        return _QuantLib.IborIndex_endOfMonth(self)

    def forwardingTermStructure(self):
        return _QuantLib.IborIndex_forwardingTermStructure(self)

    def clone(self, arg2):
        return _QuantLib.IborIndex_clone(self, arg2)
    __swig_destroy__ = _QuantLib.delete_IborIndex
    __del__ = lambda self: None
IborIndex_swigregister = _QuantLib.IborIndex_swigregister
IborIndex_swigregister(IborIndex)


def as_iborindex(index):
    return _QuantLib.as_iborindex(index)
as_iborindex = _QuantLib.as_iborindex
class OvernightIndex(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OvernightIndex, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OvernightIndex, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_OvernightIndex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self, h):
        return _QuantLib.OvernightIndex_clone(self, h)
    __swig_destroy__ = _QuantLib.delete_OvernightIndex
    __del__ = lambda self: None
OvernightIndex_swigregister = _QuantLib.OvernightIndex_swigregister
OvernightIndex_swigregister(OvernightIndex)

class Libor(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Libor, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Libor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Libor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Libor
    __del__ = lambda self: None
Libor_swigregister = _QuantLib.Libor_swigregister
Libor_swigregister(Libor)

class DailyTenorLibor(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DailyTenorLibor, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DailyTenorLibor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_DailyTenorLibor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_DailyTenorLibor
    __del__ = lambda self: None
DailyTenorLibor_swigregister = _QuantLib.DailyTenorLibor_swigregister
DailyTenorLibor_swigregister(DailyTenorLibor)

class SwapIndex(InterestRateIndex):
    __swig_setmethods__ = {}
    for _s in [InterestRateIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwapIndex, name, value)
    __swig_getmethods__ = {}
    for _s in [InterestRateIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SwapIndex, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_SwapIndex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def fixedLegTenor(self):
        return _QuantLib.SwapIndex_fixedLegTenor(self)

    def fixedLegConvention(self):
        return _QuantLib.SwapIndex_fixedLegConvention(self)

    def iborIndex(self):
        return _QuantLib.SwapIndex_iborIndex(self)

    def forwardingTermStructure(self):
        return _QuantLib.SwapIndex_forwardingTermStructure(self)

    def discountingTermStructure(self):
        return _QuantLib.SwapIndex_discountingTermStructure(self)

    def clone(self, *args):
        return _QuantLib.SwapIndex_clone(self, *args)
    __swig_destroy__ = _QuantLib.delete_SwapIndex
    __del__ = lambda self: None
SwapIndex_swigregister = _QuantLib.SwapIndex_swigregister
SwapIndex_swigregister(SwapIndex)

class SwapIndexVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwapIndexVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwapIndexVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.SwapIndexVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.SwapIndexVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.SwapIndexVector___bool__(self)

    def __len__(self):
        return _QuantLib.SwapIndexVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.SwapIndexVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.SwapIndexVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.SwapIndexVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.SwapIndexVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.SwapIndexVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.SwapIndexVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.SwapIndexVector_pop(self)

    def append(self, x):
        return _QuantLib.SwapIndexVector_append(self, x)

    def empty(self):
        return _QuantLib.SwapIndexVector_empty(self)

    def size(self):
        return _QuantLib.SwapIndexVector_size(self)

    def swap(self, v):
        return _QuantLib.SwapIndexVector_swap(self, v)

    def begin(self):
        return _QuantLib.SwapIndexVector_begin(self)

    def end(self):
        return _QuantLib.SwapIndexVector_end(self)

    def rbegin(self):
        return _QuantLib.SwapIndexVector_rbegin(self)

    def rend(self):
        return _QuantLib.SwapIndexVector_rend(self)

    def clear(self):
        return _QuantLib.SwapIndexVector_clear(self)

    def get_allocator(self):
        return _QuantLib.SwapIndexVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.SwapIndexVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.SwapIndexVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_SwapIndexVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.SwapIndexVector_push_back(self, x)

    def front(self):
        return _QuantLib.SwapIndexVector_front(self)

    def back(self):
        return _QuantLib.SwapIndexVector_back(self)

    def assign(self, n, x):
        return _QuantLib.SwapIndexVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.SwapIndexVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.SwapIndexVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.SwapIndexVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.SwapIndexVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_SwapIndexVector
    __del__ = lambda self: None
SwapIndexVector_swigregister = _QuantLib.SwapIndexVector_swigregister
SwapIndexVector_swigregister(SwapIndexVector)

class SwapSpreadIndex(InterestRateIndex):
    __swig_setmethods__ = {}
    for _s in [InterestRateIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwapSpreadIndex, name, value)
    __swig_getmethods__ = {}
    for _s in [InterestRateIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SwapSpreadIndex, name)
    __repr__ = _swig_repr

    def __init__(self, familyName, swapIndex1, swapIndex2, gearing1=1.0, gearing2=-1.0):
        this = _QuantLib.new_SwapSpreadIndex(familyName, swapIndex1, swapIndex2, gearing1, gearing2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def forecastFixing(self, fixingDate):
        return _QuantLib.SwapSpreadIndex_forecastFixing(self, fixingDate)

    def pastFixing(self, fixingDate):
        return _QuantLib.SwapSpreadIndex_pastFixing(self, fixingDate)

    def swapIndex1(self):
        return _QuantLib.SwapSpreadIndex_swapIndex1(self)

    def swapIndex2(self):
        return _QuantLib.SwapSpreadIndex_swapIndex2(self)

    def gearing1(self):
        return _QuantLib.SwapSpreadIndex_gearing1(self)

    def gearing2(self):
        return _QuantLib.SwapSpreadIndex_gearing2(self)
    __swig_destroy__ = _QuantLib.delete_SwapSpreadIndex
    __del__ = lambda self: None
SwapSpreadIndex_swigregister = _QuantLib.SwapSpreadIndex_swigregister
SwapSpreadIndex_swigregister(SwapSpreadIndex)


def as_swap_index(index):
    return _QuantLib.as_swap_index(index)
as_swap_index = _QuantLib.as_swap_index
class AUDLibor(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AUDLibor, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AUDLibor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_AUDLibor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AUDLibor
    __del__ = lambda self: None
AUDLibor_swigregister = _QuantLib.AUDLibor_swigregister
AUDLibor_swigregister(AUDLibor)

class CADLibor(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CADLibor, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CADLibor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_CADLibor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CADLibor
    __del__ = lambda self: None
CADLibor_swigregister = _QuantLib.CADLibor_swigregister
CADLibor_swigregister(CADLibor)

class Cdor(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cdor, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cdor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Cdor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Cdor
    __del__ = lambda self: None
Cdor_swigregister = _QuantLib.Cdor_swigregister
Cdor_swigregister(Cdor)

class CHFLibor(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHFLibor, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CHFLibor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_CHFLibor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CHFLibor
    __del__ = lambda self: None
CHFLibor_swigregister = _QuantLib.CHFLibor_swigregister
CHFLibor_swigregister(CHFLibor)

class DKKLibor(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DKKLibor, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DKKLibor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_DKKLibor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_DKKLibor
    __del__ = lambda self: None
DKKLibor_swigregister = _QuantLib.DKKLibor_swigregister
DKKLibor_swigregister(DKKLibor)

class Bbsw(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bbsw, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bbsw, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Bbsw(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Bbsw
    __del__ = lambda self: None
Bbsw_swigregister = _QuantLib.Bbsw_swigregister
Bbsw_swigregister(Bbsw)

class Bkbm(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bkbm, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bkbm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Bkbm(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Bkbm
    __del__ = lambda self: None
Bkbm_swigregister = _QuantLib.Bkbm_swigregister
Bkbm_swigregister(Bkbm)

class Euribor(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor
    __del__ = lambda self: None
Euribor_swigregister = _QuantLib.Euribor_swigregister
Euribor_swigregister(Euribor)

class Euribor365(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor365, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor365, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor365(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor365
    __del__ = lambda self: None
Euribor365_swigregister = _QuantLib.Euribor365_swigregister
Euribor365_swigregister(Euribor365)

class EURLibor(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EURLibor, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EURLibor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_EURLibor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EURLibor
    __del__ = lambda self: None
EURLibor_swigregister = _QuantLib.EURLibor_swigregister
EURLibor_swigregister(EURLibor)

class GBPLibor(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GBPLibor, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GBPLibor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_GBPLibor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_GBPLibor
    __del__ = lambda self: None
GBPLibor_swigregister = _QuantLib.GBPLibor_swigregister
GBPLibor_swigregister(GBPLibor)

class Jibar(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Jibar, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Jibar, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Jibar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Jibar
    __del__ = lambda self: None
Jibar_swigregister = _QuantLib.Jibar_swigregister
Jibar_swigregister(Jibar)

class JPYLibor(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JPYLibor, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JPYLibor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_JPYLibor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_JPYLibor
    __del__ = lambda self: None
JPYLibor_swigregister = _QuantLib.JPYLibor_swigregister
JPYLibor_swigregister(JPYLibor)

class Mosprime(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mosprime, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Mosprime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Mosprime(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Mosprime
    __del__ = lambda self: None
Mosprime_swigregister = _QuantLib.Mosprime_swigregister
Mosprime_swigregister(Mosprime)

class NZDLibor(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NZDLibor, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NZDLibor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_NZDLibor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_NZDLibor
    __del__ = lambda self: None
NZDLibor_swigregister = _QuantLib.NZDLibor_swigregister
NZDLibor_swigregister(NZDLibor)

class Pribor(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pribor, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pribor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Pribor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Pribor
    __del__ = lambda self: None
Pribor_swigregister = _QuantLib.Pribor_swigregister
Pribor_swigregister(Pribor)

class Robor(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Robor, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Robor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Robor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Robor
    __del__ = lambda self: None
Robor_swigregister = _QuantLib.Robor_swigregister
Robor_swigregister(Robor)

class SEKLibor(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SEKLibor, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SEKLibor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_SEKLibor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SEKLibor
    __del__ = lambda self: None
SEKLibor_swigregister = _QuantLib.SEKLibor_swigregister
SEKLibor_swigregister(SEKLibor)

class Shibor(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shibor, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Shibor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Shibor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Shibor
    __del__ = lambda self: None
Shibor_swigregister = _QuantLib.Shibor_swigregister
Shibor_swigregister(Shibor)

class Tibor(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tibor, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Tibor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Tibor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Tibor
    __del__ = lambda self: None
Tibor_swigregister = _QuantLib.Tibor_swigregister
Tibor_swigregister(Tibor)

class THBFIX(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, THBFIX, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, THBFIX, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_THBFIX(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_THBFIX
    __del__ = lambda self: None
THBFIX_swigregister = _QuantLib.THBFIX_swigregister
THBFIX_swigregister(THBFIX)

class TRLibor(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRLibor, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TRLibor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_TRLibor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_TRLibor
    __del__ = lambda self: None
TRLibor_swigregister = _QuantLib.TRLibor_swigregister
TRLibor_swigregister(TRLibor)

class USDLibor(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, USDLibor, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, USDLibor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_USDLibor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_USDLibor
    __del__ = lambda self: None
USDLibor_swigregister = _QuantLib.USDLibor_swigregister
USDLibor_swigregister(USDLibor)

class Wibor(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Wibor, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Wibor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Wibor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Wibor
    __del__ = lambda self: None
Wibor_swigregister = _QuantLib.Wibor_swigregister
Wibor_swigregister(Wibor)

class Zibor(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Zibor, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Zibor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Zibor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Zibor
    __del__ = lambda self: None
Zibor_swigregister = _QuantLib.Zibor_swigregister
Zibor_swigregister(Zibor)

class Bibor(IborIndex):
    __swig_setmethods__ = {}
    for _s in [IborIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bibor, name, value)
    __swig_getmethods__ = {}
    for _s in [IborIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bibor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Bibor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Bibor
    __del__ = lambda self: None
Bibor_swigregister = _QuantLib.Bibor_swigregister
Bibor_swigregister(Bibor)

class USDLiborON(DailyTenorLibor):
    __swig_setmethods__ = {}
    for _s in [DailyTenorLibor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, USDLiborON, name, value)
    __swig_getmethods__ = {}
    for _s in [DailyTenorLibor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, USDLiborON, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_USDLiborON(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_USDLiborON
    __del__ = lambda self: None
USDLiborON_swigregister = _QuantLib.USDLiborON_swigregister
USDLiborON_swigregister(USDLiborON)

class GBPLiborON(DailyTenorLibor):
    __swig_setmethods__ = {}
    for _s in [DailyTenorLibor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GBPLiborON, name, value)
    __swig_getmethods__ = {}
    for _s in [DailyTenorLibor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GBPLiborON, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_GBPLiborON(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_GBPLiborON
    __del__ = lambda self: None
GBPLiborON_swigregister = _QuantLib.GBPLiborON_swigregister
GBPLiborON_swigregister(GBPLiborON)

class CADLiborON(DailyTenorLibor):
    __swig_setmethods__ = {}
    for _s in [DailyTenorLibor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CADLiborON, name, value)
    __swig_getmethods__ = {}
    for _s in [DailyTenorLibor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CADLiborON, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_CADLiborON(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CADLiborON
    __del__ = lambda self: None
CADLiborON_swigregister = _QuantLib.CADLiborON_swigregister
CADLiborON_swigregister(CADLiborON)

class Bbsw1M(Bbsw):
    __swig_setmethods__ = {}
    for _s in [Bbsw]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bbsw1M, name, value)
    __swig_getmethods__ = {}
    for _s in [Bbsw]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bbsw1M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Bbsw1M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Bbsw1M
    __del__ = lambda self: None
Bbsw1M_swigregister = _QuantLib.Bbsw1M_swigregister
Bbsw1M_swigregister(Bbsw1M)

class Bbsw2M(Bbsw):
    __swig_setmethods__ = {}
    for _s in [Bbsw]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bbsw2M, name, value)
    __swig_getmethods__ = {}
    for _s in [Bbsw]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bbsw2M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Bbsw2M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Bbsw2M
    __del__ = lambda self: None
Bbsw2M_swigregister = _QuantLib.Bbsw2M_swigregister
Bbsw2M_swigregister(Bbsw2M)

class Bbsw3M(Bbsw):
    __swig_setmethods__ = {}
    for _s in [Bbsw]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bbsw3M, name, value)
    __swig_getmethods__ = {}
    for _s in [Bbsw]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bbsw3M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Bbsw3M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Bbsw3M
    __del__ = lambda self: None
Bbsw3M_swigregister = _QuantLib.Bbsw3M_swigregister
Bbsw3M_swigregister(Bbsw3M)

class Bbsw4M(Bbsw):
    __swig_setmethods__ = {}
    for _s in [Bbsw]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bbsw4M, name, value)
    __swig_getmethods__ = {}
    for _s in [Bbsw]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bbsw4M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Bbsw4M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Bbsw4M
    __del__ = lambda self: None
Bbsw4M_swigregister = _QuantLib.Bbsw4M_swigregister
Bbsw4M_swigregister(Bbsw4M)

class Bbsw5M(Bbsw):
    __swig_setmethods__ = {}
    for _s in [Bbsw]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bbsw5M, name, value)
    __swig_getmethods__ = {}
    for _s in [Bbsw]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bbsw5M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Bbsw5M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Bbsw5M
    __del__ = lambda self: None
Bbsw5M_swigregister = _QuantLib.Bbsw5M_swigregister
Bbsw5M_swigregister(Bbsw5M)

class Bbsw6M(Bbsw):
    __swig_setmethods__ = {}
    for _s in [Bbsw]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bbsw6M, name, value)
    __swig_getmethods__ = {}
    for _s in [Bbsw]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bbsw6M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Bbsw6M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Bbsw6M
    __del__ = lambda self: None
Bbsw6M_swigregister = _QuantLib.Bbsw6M_swigregister
Bbsw6M_swigregister(Bbsw6M)

class Bkbm1M(Bkbm):
    __swig_setmethods__ = {}
    for _s in [Bkbm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bkbm1M, name, value)
    __swig_getmethods__ = {}
    for _s in [Bkbm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bkbm1M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Bkbm1M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Bkbm1M
    __del__ = lambda self: None
Bkbm1M_swigregister = _QuantLib.Bkbm1M_swigregister
Bkbm1M_swigregister(Bkbm1M)

class Bkbm2M(Bkbm):
    __swig_setmethods__ = {}
    for _s in [Bkbm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bkbm2M, name, value)
    __swig_getmethods__ = {}
    for _s in [Bkbm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bkbm2M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Bkbm2M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Bkbm2M
    __del__ = lambda self: None
Bkbm2M_swigregister = _QuantLib.Bkbm2M_swigregister
Bkbm2M_swigregister(Bkbm2M)

class Bkbm3M(Bkbm):
    __swig_setmethods__ = {}
    for _s in [Bkbm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bkbm3M, name, value)
    __swig_getmethods__ = {}
    for _s in [Bkbm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bkbm3M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Bkbm3M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Bkbm3M
    __del__ = lambda self: None
Bkbm3M_swigregister = _QuantLib.Bkbm3M_swigregister
Bkbm3M_swigregister(Bkbm3M)

class Bkbm4M(Bkbm):
    __swig_setmethods__ = {}
    for _s in [Bkbm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bkbm4M, name, value)
    __swig_getmethods__ = {}
    for _s in [Bkbm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bkbm4M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Bkbm4M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Bkbm4M
    __del__ = lambda self: None
Bkbm4M_swigregister = _QuantLib.Bkbm4M_swigregister
Bkbm4M_swigregister(Bkbm4M)

class Bkbm5M(Bkbm):
    __swig_setmethods__ = {}
    for _s in [Bkbm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bkbm5M, name, value)
    __swig_getmethods__ = {}
    for _s in [Bkbm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bkbm5M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Bkbm5M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Bkbm5M
    __del__ = lambda self: None
Bkbm5M_swigregister = _QuantLib.Bkbm5M_swigregister
Bkbm5M_swigregister(Bkbm5M)

class Bkbm6M(Bkbm):
    __swig_setmethods__ = {}
    for _s in [Bkbm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bkbm6M, name, value)
    __swig_getmethods__ = {}
    for _s in [Bkbm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bkbm6M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Bkbm6M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Bkbm6M
    __del__ = lambda self: None
Bkbm6M_swigregister = _QuantLib.Bkbm6M_swigregister
Bkbm6M_swigregister(Bkbm6M)

class EuriborSW(Euribor):
    __swig_setmethods__ = {}
    for _s in [Euribor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EuriborSW, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EuriborSW, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_EuriborSW(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EuriborSW
    __del__ = lambda self: None
EuriborSW_swigregister = _QuantLib.EuriborSW_swigregister
EuriborSW_swigregister(EuriborSW)

class Euribor2W(Euribor):
    __swig_setmethods__ = {}
    for _s in [Euribor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor2W, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor2W, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor2W(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor2W
    __del__ = lambda self: None
Euribor2W_swigregister = _QuantLib.Euribor2W_swigregister
Euribor2W_swigregister(Euribor2W)

class Euribor3W(Euribor):
    __swig_setmethods__ = {}
    for _s in [Euribor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor3W, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor3W, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor3W(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor3W
    __del__ = lambda self: None
Euribor3W_swigregister = _QuantLib.Euribor3W_swigregister
Euribor3W_swigregister(Euribor3W)

class Euribor1M(Euribor):
    __swig_setmethods__ = {}
    for _s in [Euribor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor1M, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor1M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor1M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor1M
    __del__ = lambda self: None
Euribor1M_swigregister = _QuantLib.Euribor1M_swigregister
Euribor1M_swigregister(Euribor1M)

class Euribor2M(Euribor):
    __swig_setmethods__ = {}
    for _s in [Euribor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor2M, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor2M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor2M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor2M
    __del__ = lambda self: None
Euribor2M_swigregister = _QuantLib.Euribor2M_swigregister
Euribor2M_swigregister(Euribor2M)

class Euribor3M(Euribor):
    __swig_setmethods__ = {}
    for _s in [Euribor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor3M, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor3M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor3M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor3M
    __del__ = lambda self: None
Euribor3M_swigregister = _QuantLib.Euribor3M_swigregister
Euribor3M_swigregister(Euribor3M)

class Euribor4M(Euribor):
    __swig_setmethods__ = {}
    for _s in [Euribor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor4M, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor4M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor4M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor4M
    __del__ = lambda self: None
Euribor4M_swigregister = _QuantLib.Euribor4M_swigregister
Euribor4M_swigregister(Euribor4M)

class Euribor5M(Euribor):
    __swig_setmethods__ = {}
    for _s in [Euribor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor5M, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor5M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor5M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor5M
    __del__ = lambda self: None
Euribor5M_swigregister = _QuantLib.Euribor5M_swigregister
Euribor5M_swigregister(Euribor5M)

class Euribor6M(Euribor):
    __swig_setmethods__ = {}
    for _s in [Euribor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor6M, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor6M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor6M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor6M
    __del__ = lambda self: None
Euribor6M_swigregister = _QuantLib.Euribor6M_swigregister
Euribor6M_swigregister(Euribor6M)

class Euribor7M(Euribor):
    __swig_setmethods__ = {}
    for _s in [Euribor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor7M, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor7M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor7M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor7M
    __del__ = lambda self: None
Euribor7M_swigregister = _QuantLib.Euribor7M_swigregister
Euribor7M_swigregister(Euribor7M)

class Euribor8M(Euribor):
    __swig_setmethods__ = {}
    for _s in [Euribor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor8M, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor8M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor8M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor8M
    __del__ = lambda self: None
Euribor8M_swigregister = _QuantLib.Euribor8M_swigregister
Euribor8M_swigregister(Euribor8M)

class Euribor9M(Euribor):
    __swig_setmethods__ = {}
    for _s in [Euribor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor9M, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor9M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor9M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor9M
    __del__ = lambda self: None
Euribor9M_swigregister = _QuantLib.Euribor9M_swigregister
Euribor9M_swigregister(Euribor9M)

class Euribor10M(Euribor):
    __swig_setmethods__ = {}
    for _s in [Euribor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor10M, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor10M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor10M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor10M
    __del__ = lambda self: None
Euribor10M_swigregister = _QuantLib.Euribor10M_swigregister
Euribor10M_swigregister(Euribor10M)

class Euribor11M(Euribor):
    __swig_setmethods__ = {}
    for _s in [Euribor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor11M, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor11M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor11M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor11M
    __del__ = lambda self: None
Euribor11M_swigregister = _QuantLib.Euribor11M_swigregister
Euribor11M_swigregister(Euribor11M)

class Euribor1Y(Euribor):
    __swig_setmethods__ = {}
    for _s in [Euribor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor1Y, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor1Y, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor1Y(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor1Y
    __del__ = lambda self: None
Euribor1Y_swigregister = _QuantLib.Euribor1Y_swigregister
Euribor1Y_swigregister(Euribor1Y)

class Euribor365_SW(Euribor365):
    __swig_setmethods__ = {}
    for _s in [Euribor365]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor365_SW, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor365]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor365_SW, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor365_SW(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor365_SW
    __del__ = lambda self: None
Euribor365_SW_swigregister = _QuantLib.Euribor365_SW_swigregister
Euribor365_SW_swigregister(Euribor365_SW)

class Euribor365_2W(Euribor365):
    __swig_setmethods__ = {}
    for _s in [Euribor365]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor365_2W, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor365]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor365_2W, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor365_2W(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor365_2W
    __del__ = lambda self: None
Euribor365_2W_swigregister = _QuantLib.Euribor365_2W_swigregister
Euribor365_2W_swigregister(Euribor365_2W)

class Euribor365_3W(Euribor365):
    __swig_setmethods__ = {}
    for _s in [Euribor365]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor365_3W, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor365]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor365_3W, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor365_3W(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor365_3W
    __del__ = lambda self: None
Euribor365_3W_swigregister = _QuantLib.Euribor365_3W_swigregister
Euribor365_3W_swigregister(Euribor365_3W)

class Euribor365_1M(Euribor365):
    __swig_setmethods__ = {}
    for _s in [Euribor365]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor365_1M, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor365]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor365_1M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor365_1M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor365_1M
    __del__ = lambda self: None
Euribor365_1M_swigregister = _QuantLib.Euribor365_1M_swigregister
Euribor365_1M_swigregister(Euribor365_1M)

class Euribor365_2M(Euribor365):
    __swig_setmethods__ = {}
    for _s in [Euribor365]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor365_2M, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor365]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor365_2M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor365_2M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor365_2M
    __del__ = lambda self: None
Euribor365_2M_swigregister = _QuantLib.Euribor365_2M_swigregister
Euribor365_2M_swigregister(Euribor365_2M)

class Euribor365_3M(Euribor365):
    __swig_setmethods__ = {}
    for _s in [Euribor365]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor365_3M, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor365]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor365_3M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor365_3M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor365_3M
    __del__ = lambda self: None
Euribor365_3M_swigregister = _QuantLib.Euribor365_3M_swigregister
Euribor365_3M_swigregister(Euribor365_3M)

class Euribor365_4M(Euribor365):
    __swig_setmethods__ = {}
    for _s in [Euribor365]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor365_4M, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor365]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor365_4M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor365_4M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor365_4M
    __del__ = lambda self: None
Euribor365_4M_swigregister = _QuantLib.Euribor365_4M_swigregister
Euribor365_4M_swigregister(Euribor365_4M)

class Euribor365_5M(Euribor365):
    __swig_setmethods__ = {}
    for _s in [Euribor365]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor365_5M, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor365]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor365_5M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor365_5M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor365_5M
    __del__ = lambda self: None
Euribor365_5M_swigregister = _QuantLib.Euribor365_5M_swigregister
Euribor365_5M_swigregister(Euribor365_5M)

class Euribor365_6M(Euribor365):
    __swig_setmethods__ = {}
    for _s in [Euribor365]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor365_6M, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor365]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor365_6M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor365_6M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor365_6M
    __del__ = lambda self: None
Euribor365_6M_swigregister = _QuantLib.Euribor365_6M_swigregister
Euribor365_6M_swigregister(Euribor365_6M)

class Euribor365_7M(Euribor365):
    __swig_setmethods__ = {}
    for _s in [Euribor365]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor365_7M, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor365]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor365_7M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor365_7M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor365_7M
    __del__ = lambda self: None
Euribor365_7M_swigregister = _QuantLib.Euribor365_7M_swigregister
Euribor365_7M_swigregister(Euribor365_7M)

class Euribor365_8M(Euribor365):
    __swig_setmethods__ = {}
    for _s in [Euribor365]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor365_8M, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor365]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor365_8M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor365_8M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor365_8M
    __del__ = lambda self: None
Euribor365_8M_swigregister = _QuantLib.Euribor365_8M_swigregister
Euribor365_8M_swigregister(Euribor365_8M)

class Euribor365_9M(Euribor365):
    __swig_setmethods__ = {}
    for _s in [Euribor365]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor365_9M, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor365]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor365_9M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor365_9M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor365_9M
    __del__ = lambda self: None
Euribor365_9M_swigregister = _QuantLib.Euribor365_9M_swigregister
Euribor365_9M_swigregister(Euribor365_9M)

class Euribor365_10M(Euribor365):
    __swig_setmethods__ = {}
    for _s in [Euribor365]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor365_10M, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor365]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor365_10M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor365_10M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor365_10M
    __del__ = lambda self: None
Euribor365_10M_swigregister = _QuantLib.Euribor365_10M_swigregister
Euribor365_10M_swigregister(Euribor365_10M)

class Euribor365_11M(Euribor365):
    __swig_setmethods__ = {}
    for _s in [Euribor365]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor365_11M, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor365]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor365_11M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor365_11M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor365_11M
    __del__ = lambda self: None
Euribor365_11M_swigregister = _QuantLib.Euribor365_11M_swigregister
Euribor365_11M_swigregister(Euribor365_11M)

class Euribor365_1Y(Euribor365):
    __swig_setmethods__ = {}
    for _s in [Euribor365]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euribor365_1Y, name, value)
    __swig_getmethods__ = {}
    for _s in [Euribor365]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euribor365_1Y, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Euribor365_1Y(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Euribor365_1Y
    __del__ = lambda self: None
Euribor365_1Y_swigregister = _QuantLib.Euribor365_1Y_swigregister
Euribor365_1Y_swigregister(Euribor365_1Y)

class EURLiborSW(EURLibor):
    __swig_setmethods__ = {}
    for _s in [EURLibor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EURLiborSW, name, value)
    __swig_getmethods__ = {}
    for _s in [EURLibor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EURLiborSW, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_EURLiborSW(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EURLiborSW
    __del__ = lambda self: None
EURLiborSW_swigregister = _QuantLib.EURLiborSW_swigregister
EURLiborSW_swigregister(EURLiborSW)

class EURLibor2W(EURLibor):
    __swig_setmethods__ = {}
    for _s in [EURLibor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EURLibor2W, name, value)
    __swig_getmethods__ = {}
    for _s in [EURLibor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EURLibor2W, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_EURLibor2W(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EURLibor2W
    __del__ = lambda self: None
EURLibor2W_swigregister = _QuantLib.EURLibor2W_swigregister
EURLibor2W_swigregister(EURLibor2W)

class EURLibor1M(EURLibor):
    __swig_setmethods__ = {}
    for _s in [EURLibor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EURLibor1M, name, value)
    __swig_getmethods__ = {}
    for _s in [EURLibor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EURLibor1M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_EURLibor1M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EURLibor1M
    __del__ = lambda self: None
EURLibor1M_swigregister = _QuantLib.EURLibor1M_swigregister
EURLibor1M_swigregister(EURLibor1M)

class EURLibor2M(EURLibor):
    __swig_setmethods__ = {}
    for _s in [EURLibor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EURLibor2M, name, value)
    __swig_getmethods__ = {}
    for _s in [EURLibor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EURLibor2M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_EURLibor2M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EURLibor2M
    __del__ = lambda self: None
EURLibor2M_swigregister = _QuantLib.EURLibor2M_swigregister
EURLibor2M_swigregister(EURLibor2M)

class EURLibor3M(EURLibor):
    __swig_setmethods__ = {}
    for _s in [EURLibor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EURLibor3M, name, value)
    __swig_getmethods__ = {}
    for _s in [EURLibor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EURLibor3M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_EURLibor3M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EURLibor3M
    __del__ = lambda self: None
EURLibor3M_swigregister = _QuantLib.EURLibor3M_swigregister
EURLibor3M_swigregister(EURLibor3M)

class EURLibor4M(EURLibor):
    __swig_setmethods__ = {}
    for _s in [EURLibor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EURLibor4M, name, value)
    __swig_getmethods__ = {}
    for _s in [EURLibor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EURLibor4M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_EURLibor4M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EURLibor4M
    __del__ = lambda self: None
EURLibor4M_swigregister = _QuantLib.EURLibor4M_swigregister
EURLibor4M_swigregister(EURLibor4M)

class EURLibor5M(EURLibor):
    __swig_setmethods__ = {}
    for _s in [EURLibor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EURLibor5M, name, value)
    __swig_getmethods__ = {}
    for _s in [EURLibor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EURLibor5M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_EURLibor5M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EURLibor5M
    __del__ = lambda self: None
EURLibor5M_swigregister = _QuantLib.EURLibor5M_swigregister
EURLibor5M_swigregister(EURLibor5M)

class EURLibor6M(EURLibor):
    __swig_setmethods__ = {}
    for _s in [EURLibor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EURLibor6M, name, value)
    __swig_getmethods__ = {}
    for _s in [EURLibor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EURLibor6M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_EURLibor6M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EURLibor6M
    __del__ = lambda self: None
EURLibor6M_swigregister = _QuantLib.EURLibor6M_swigregister
EURLibor6M_swigregister(EURLibor6M)

class EURLibor7M(EURLibor):
    __swig_setmethods__ = {}
    for _s in [EURLibor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EURLibor7M, name, value)
    __swig_getmethods__ = {}
    for _s in [EURLibor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EURLibor7M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_EURLibor7M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EURLibor7M
    __del__ = lambda self: None
EURLibor7M_swigregister = _QuantLib.EURLibor7M_swigregister
EURLibor7M_swigregister(EURLibor7M)

class EURLibor8M(EURLibor):
    __swig_setmethods__ = {}
    for _s in [EURLibor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EURLibor8M, name, value)
    __swig_getmethods__ = {}
    for _s in [EURLibor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EURLibor8M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_EURLibor8M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EURLibor8M
    __del__ = lambda self: None
EURLibor8M_swigregister = _QuantLib.EURLibor8M_swigregister
EURLibor8M_swigregister(EURLibor8M)

class EURLibor9M(EURLibor):
    __swig_setmethods__ = {}
    for _s in [EURLibor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EURLibor9M, name, value)
    __swig_getmethods__ = {}
    for _s in [EURLibor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EURLibor9M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_EURLibor9M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EURLibor9M
    __del__ = lambda self: None
EURLibor9M_swigregister = _QuantLib.EURLibor9M_swigregister
EURLibor9M_swigregister(EURLibor9M)

class EURLibor10M(EURLibor):
    __swig_setmethods__ = {}
    for _s in [EURLibor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EURLibor10M, name, value)
    __swig_getmethods__ = {}
    for _s in [EURLibor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EURLibor10M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_EURLibor10M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EURLibor10M
    __del__ = lambda self: None
EURLibor10M_swigregister = _QuantLib.EURLibor10M_swigregister
EURLibor10M_swigregister(EURLibor10M)

class EURLibor11M(EURLibor):
    __swig_setmethods__ = {}
    for _s in [EURLibor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EURLibor11M, name, value)
    __swig_getmethods__ = {}
    for _s in [EURLibor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EURLibor11M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_EURLibor11M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EURLibor11M
    __del__ = lambda self: None
EURLibor11M_swigregister = _QuantLib.EURLibor11M_swigregister
EURLibor11M_swigregister(EURLibor11M)

class EURLibor1Y(EURLibor):
    __swig_setmethods__ = {}
    for _s in [EURLibor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EURLibor1Y, name, value)
    __swig_getmethods__ = {}
    for _s in [EURLibor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EURLibor1Y, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_EURLibor1Y(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EURLibor1Y
    __del__ = lambda self: None
EURLibor1Y_swigregister = _QuantLib.EURLibor1Y_swigregister
EURLibor1Y_swigregister(EURLibor1Y)

class BiborSW(Bibor):
    __swig_setmethods__ = {}
    for _s in [Bibor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiborSW, name, value)
    __swig_getmethods__ = {}
    for _s in [Bibor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BiborSW, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_BiborSW(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BiborSW
    __del__ = lambda self: None
BiborSW_swigregister = _QuantLib.BiborSW_swigregister
BiborSW_swigregister(BiborSW)

class Bibor1M(Bibor):
    __swig_setmethods__ = {}
    for _s in [Bibor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bibor1M, name, value)
    __swig_getmethods__ = {}
    for _s in [Bibor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bibor1M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Bibor1M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Bibor1M
    __del__ = lambda self: None
Bibor1M_swigregister = _QuantLib.Bibor1M_swigregister
Bibor1M_swigregister(Bibor1M)

class Bibor2M(Bibor):
    __swig_setmethods__ = {}
    for _s in [Bibor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bibor2M, name, value)
    __swig_getmethods__ = {}
    for _s in [Bibor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bibor2M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Bibor2M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Bibor2M
    __del__ = lambda self: None
Bibor2M_swigregister = _QuantLib.Bibor2M_swigregister
Bibor2M_swigregister(Bibor2M)

class Bibor3M(Bibor):
    __swig_setmethods__ = {}
    for _s in [Bibor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bibor3M, name, value)
    __swig_getmethods__ = {}
    for _s in [Bibor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bibor3M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Bibor3M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Bibor3M
    __del__ = lambda self: None
Bibor3M_swigregister = _QuantLib.Bibor3M_swigregister
Bibor3M_swigregister(Bibor3M)

class Bibor6M(Bibor):
    __swig_setmethods__ = {}
    for _s in [Bibor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bibor6M, name, value)
    __swig_getmethods__ = {}
    for _s in [Bibor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bibor6M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Bibor6M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Bibor6M
    __del__ = lambda self: None
Bibor6M_swigregister = _QuantLib.Bibor6M_swigregister
Bibor6M_swigregister(Bibor6M)

class Bibor9M(Bibor):
    __swig_setmethods__ = {}
    for _s in [Bibor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bibor9M, name, value)
    __swig_getmethods__ = {}
    for _s in [Bibor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bibor9M, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Bibor9M(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Bibor9M
    __del__ = lambda self: None
Bibor9M_swigregister = _QuantLib.Bibor9M_swigregister
Bibor9M_swigregister(Bibor9M)

class Bibor1Y(Bibor):
    __swig_setmethods__ = {}
    for _s in [Bibor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bibor1Y, name, value)
    __swig_getmethods__ = {}
    for _s in [Bibor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bibor1Y, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Bibor1Y(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Bibor1Y
    __del__ = lambda self: None
Bibor1Y_swigregister = _QuantLib.Bibor1Y_swigregister
Bibor1Y_swigregister(Bibor1Y)

class Aonia(OvernightIndex):
    __swig_setmethods__ = {}
    for _s in [OvernightIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Aonia, name, value)
    __swig_getmethods__ = {}
    for _s in [OvernightIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Aonia, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Aonia(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Aonia
    __del__ = lambda self: None
Aonia_swigregister = _QuantLib.Aonia_swigregister
Aonia_swigregister(Aonia)

class Eonia(OvernightIndex):
    __swig_setmethods__ = {}
    for _s in [OvernightIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Eonia, name, value)
    __swig_getmethods__ = {}
    for _s in [OvernightIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Eonia, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Eonia(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Eonia
    __del__ = lambda self: None
Eonia_swigregister = _QuantLib.Eonia_swigregister
Eonia_swigregister(Eonia)

class Sonia(OvernightIndex):
    __swig_setmethods__ = {}
    for _s in [OvernightIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sonia, name, value)
    __swig_getmethods__ = {}
    for _s in [OvernightIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sonia, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Sonia(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Sonia
    __del__ = lambda self: None
Sonia_swigregister = _QuantLib.Sonia_swigregister
Sonia_swigregister(Sonia)

class FedFunds(OvernightIndex):
    __swig_setmethods__ = {}
    for _s in [OvernightIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FedFunds, name, value)
    __swig_getmethods__ = {}
    for _s in [OvernightIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FedFunds, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FedFunds(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FedFunds
    __del__ = lambda self: None
FedFunds_swigregister = _QuantLib.FedFunds_swigregister
FedFunds_swigregister(FedFunds)

class Nzocr(OvernightIndex):
    __swig_setmethods__ = {}
    for _s in [OvernightIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nzocr, name, value)
    __swig_getmethods__ = {}
    for _s in [OvernightIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Nzocr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Nzocr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Nzocr
    __del__ = lambda self: None
Nzocr_swigregister = _QuantLib.Nzocr_swigregister
Nzocr_swigregister(Nzocr)

class Sofr(OvernightIndex):
    __swig_setmethods__ = {}
    for _s in [OvernightIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sofr, name, value)
    __swig_getmethods__ = {}
    for _s in [OvernightIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sofr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Sofr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Sofr
    __del__ = lambda self: None
Sofr_swigregister = _QuantLib.Sofr_swigregister
Sofr_swigregister(Sofr)

class EuriborSwapIsdaFixA(SwapIndex):
    __swig_setmethods__ = {}
    for _s in [SwapIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EuriborSwapIsdaFixA, name, value)
    __swig_getmethods__ = {}
    for _s in [SwapIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EuriborSwapIsdaFixA, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_EuriborSwapIsdaFixA(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EuriborSwapIsdaFixA
    __del__ = lambda self: None
EuriborSwapIsdaFixA_swigregister = _QuantLib.EuriborSwapIsdaFixA_swigregister
EuriborSwapIsdaFixA_swigregister(EuriborSwapIsdaFixA)

class EuriborSwapIsdaFixB(SwapIndex):
    __swig_setmethods__ = {}
    for _s in [SwapIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EuriborSwapIsdaFixB, name, value)
    __swig_getmethods__ = {}
    for _s in [SwapIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EuriborSwapIsdaFixB, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_EuriborSwapIsdaFixB(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EuriborSwapIsdaFixB
    __del__ = lambda self: None
EuriborSwapIsdaFixB_swigregister = _QuantLib.EuriborSwapIsdaFixB_swigregister
EuriborSwapIsdaFixB_swigregister(EuriborSwapIsdaFixB)

class EuriborSwapIfrFix(SwapIndex):
    __swig_setmethods__ = {}
    for _s in [SwapIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EuriborSwapIfrFix, name, value)
    __swig_getmethods__ = {}
    for _s in [SwapIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EuriborSwapIfrFix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_EuriborSwapIfrFix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EuriborSwapIfrFix
    __del__ = lambda self: None
EuriborSwapIfrFix_swigregister = _QuantLib.EuriborSwapIfrFix_swigregister
EuriborSwapIfrFix_swigregister(EuriborSwapIfrFix)

class EurLiborSwapIsdaFixA(SwapIndex):
    __swig_setmethods__ = {}
    for _s in [SwapIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EurLiborSwapIsdaFixA, name, value)
    __swig_getmethods__ = {}
    for _s in [SwapIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EurLiborSwapIsdaFixA, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_EurLiborSwapIsdaFixA(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EurLiborSwapIsdaFixA
    __del__ = lambda self: None
EurLiborSwapIsdaFixA_swigregister = _QuantLib.EurLiborSwapIsdaFixA_swigregister
EurLiborSwapIsdaFixA_swigregister(EurLiborSwapIsdaFixA)

class EurLiborSwapIsdaFixB(SwapIndex):
    __swig_setmethods__ = {}
    for _s in [SwapIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EurLiborSwapIsdaFixB, name, value)
    __swig_getmethods__ = {}
    for _s in [SwapIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EurLiborSwapIsdaFixB, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_EurLiborSwapIsdaFixB(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EurLiborSwapIsdaFixB
    __del__ = lambda self: None
EurLiborSwapIsdaFixB_swigregister = _QuantLib.EurLiborSwapIsdaFixB_swigregister
EurLiborSwapIsdaFixB_swigregister(EurLiborSwapIsdaFixB)

class EurLiborSwapIfrFix(SwapIndex):
    __swig_setmethods__ = {}
    for _s in [SwapIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EurLiborSwapIfrFix, name, value)
    __swig_getmethods__ = {}
    for _s in [SwapIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EurLiborSwapIfrFix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_EurLiborSwapIfrFix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EurLiborSwapIfrFix
    __del__ = lambda self: None
EurLiborSwapIfrFix_swigregister = _QuantLib.EurLiborSwapIfrFix_swigregister
EurLiborSwapIfrFix_swigregister(EurLiborSwapIfrFix)

class ChfLiborSwapIsdaFix(SwapIndex):
    __swig_setmethods__ = {}
    for _s in [SwapIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChfLiborSwapIsdaFix, name, value)
    __swig_getmethods__ = {}
    for _s in [SwapIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChfLiborSwapIsdaFix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ChfLiborSwapIsdaFix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ChfLiborSwapIsdaFix
    __del__ = lambda self: None
ChfLiborSwapIsdaFix_swigregister = _QuantLib.ChfLiborSwapIsdaFix_swigregister
ChfLiborSwapIsdaFix_swigregister(ChfLiborSwapIsdaFix)

class GbpLiborSwapIsdaFix(SwapIndex):
    __swig_setmethods__ = {}
    for _s in [SwapIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GbpLiborSwapIsdaFix, name, value)
    __swig_getmethods__ = {}
    for _s in [SwapIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GbpLiborSwapIsdaFix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_GbpLiborSwapIsdaFix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_GbpLiborSwapIsdaFix
    __del__ = lambda self: None
GbpLiborSwapIsdaFix_swigregister = _QuantLib.GbpLiborSwapIsdaFix_swigregister
GbpLiborSwapIsdaFix_swigregister(GbpLiborSwapIsdaFix)

class JpyLiborSwapIsdaFixAm(SwapIndex):
    __swig_setmethods__ = {}
    for _s in [SwapIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JpyLiborSwapIsdaFixAm, name, value)
    __swig_getmethods__ = {}
    for _s in [SwapIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JpyLiborSwapIsdaFixAm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_JpyLiborSwapIsdaFixAm(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_JpyLiborSwapIsdaFixAm
    __del__ = lambda self: None
JpyLiborSwapIsdaFixAm_swigregister = _QuantLib.JpyLiborSwapIsdaFixAm_swigregister
JpyLiborSwapIsdaFixAm_swigregister(JpyLiborSwapIsdaFixAm)

class JpyLiborSwapIsdaFixPm(SwapIndex):
    __swig_setmethods__ = {}
    for _s in [SwapIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JpyLiborSwapIsdaFixPm, name, value)
    __swig_getmethods__ = {}
    for _s in [SwapIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JpyLiborSwapIsdaFixPm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_JpyLiborSwapIsdaFixPm(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_JpyLiborSwapIsdaFixPm
    __del__ = lambda self: None
JpyLiborSwapIsdaFixPm_swigregister = _QuantLib.JpyLiborSwapIsdaFixPm_swigregister
JpyLiborSwapIsdaFixPm_swigregister(JpyLiborSwapIsdaFixPm)

class UsdLiborSwapIsdaFixAm(SwapIndex):
    __swig_setmethods__ = {}
    for _s in [SwapIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UsdLiborSwapIsdaFixAm, name, value)
    __swig_getmethods__ = {}
    for _s in [SwapIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UsdLiborSwapIsdaFixAm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_UsdLiborSwapIsdaFixAm(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_UsdLiborSwapIsdaFixAm
    __del__ = lambda self: None
UsdLiborSwapIsdaFixAm_swigregister = _QuantLib.UsdLiborSwapIsdaFixAm_swigregister
UsdLiborSwapIsdaFixAm_swigregister(UsdLiborSwapIsdaFixAm)

class UsdLiborSwapIsdaFixPm(SwapIndex):
    __swig_setmethods__ = {}
    for _s in [SwapIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UsdLiborSwapIsdaFixPm, name, value)
    __swig_getmethods__ = {}
    for _s in [SwapIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UsdLiborSwapIsdaFixPm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_UsdLiborSwapIsdaFixPm(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_UsdLiborSwapIsdaFixPm
    __del__ = lambda self: None
UsdLiborSwapIsdaFixPm_swigregister = _QuantLib.UsdLiborSwapIsdaFixPm_swigregister
UsdLiborSwapIsdaFixPm_swigregister(UsdLiborSwapIsdaFixPm)

class Region(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Region, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Region, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def name(self):
        return _QuantLib.Region_name(self)

    def code(self):
        return _QuantLib.Region_code(self)
    __swig_destroy__ = _QuantLib.delete_Region
    __del__ = lambda self: None
Region_swigregister = _QuantLib.Region_swigregister
Region_swigregister(Region)

class CustomRegion(Region):
    __swig_setmethods__ = {}
    for _s in [Region]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustomRegion, name, value)
    __swig_getmethods__ = {}
    for _s in [Region]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CustomRegion, name)
    __repr__ = _swig_repr

    def __init__(self, name, code):
        this = _QuantLib.new_CustomRegion(name, code)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CustomRegion
    __del__ = lambda self: None
CustomRegion_swigregister = _QuantLib.CustomRegion_swigregister
CustomRegion_swigregister(CustomRegion)

class InflationIndex(Index):
    __swig_setmethods__ = {}
    for _s in [Index]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InflationIndex, name, value)
    __swig_getmethods__ = {}
    for _s in [Index]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InflationIndex, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def familyName(self):
        return _QuantLib.InflationIndex_familyName(self)

    def region(self):
        return _QuantLib.InflationIndex_region(self)

    def revised(self):
        return _QuantLib.InflationIndex_revised(self)

    def interpolated(self):
        return _QuantLib.InflationIndex_interpolated(self)

    def frequency(self):
        return _QuantLib.InflationIndex_frequency(self)

    def availabilityLag(self):
        return _QuantLib.InflationIndex_availabilityLag(self)

    def currency(self):
        return _QuantLib.InflationIndex_currency(self)
    __swig_destroy__ = _QuantLib.delete_InflationIndex
    __del__ = lambda self: None
InflationIndex_swigregister = _QuantLib.InflationIndex_swigregister
InflationIndex_swigregister(InflationIndex)

class ZeroInflationIndex(InflationIndex):
    __swig_setmethods__ = {}
    for _s in [InflationIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZeroInflationIndex, name, value)
    __swig_getmethods__ = {}
    for _s in [InflationIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZeroInflationIndex, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ZeroInflationIndex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def zeroInflationTermStructure(self):
        return _QuantLib.ZeroInflationIndex_zeroInflationTermStructure(self)

    def clone(self, h):
        return _QuantLib.ZeroInflationIndex_clone(self, h)
    __swig_destroy__ = _QuantLib.delete_ZeroInflationIndex
    __del__ = lambda self: None
ZeroInflationIndex_swigregister = _QuantLib.ZeroInflationIndex_swigregister
ZeroInflationIndex_swigregister(ZeroInflationIndex)

class YoYInflationIndex(InflationIndex):
    __swig_setmethods__ = {}
    for _s in [InflationIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YoYInflationIndex, name, value)
    __swig_getmethods__ = {}
    for _s in [InflationIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YoYInflationIndex, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_YoYInflationIndex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ratio(self):
        return _QuantLib.YoYInflationIndex_ratio(self)

    def yoyInflationTermStructure(self):
        return _QuantLib.YoYInflationIndex_yoyInflationTermStructure(self)

    def clone(self, h):
        return _QuantLib.YoYInflationIndex_clone(self, h)
    __swig_destroy__ = _QuantLib.delete_YoYInflationIndex
    __del__ = lambda self: None
YoYInflationIndex_swigregister = _QuantLib.YoYInflationIndex_swigregister
YoYInflationIndex_swigregister(YoYInflationIndex)

class EUHICP(ZeroInflationIndex):
    __swig_setmethods__ = {}
    for _s in [ZeroInflationIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EUHICP, name, value)
    __swig_getmethods__ = {}
    for _s in [ZeroInflationIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EUHICP, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_EUHICP(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EUHICP
    __del__ = lambda self: None
EUHICP_swigregister = _QuantLib.EUHICP_swigregister
EUHICP_swigregister(EUHICP)

class EUHICPXT(ZeroInflationIndex):
    __swig_setmethods__ = {}
    for _s in [ZeroInflationIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EUHICPXT, name, value)
    __swig_getmethods__ = {}
    for _s in [ZeroInflationIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EUHICPXT, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_EUHICPXT(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EUHICPXT
    __del__ = lambda self: None
EUHICPXT_swigregister = _QuantLib.EUHICPXT_swigregister
EUHICPXT_swigregister(EUHICPXT)

class FRHICP(ZeroInflationIndex):
    __swig_setmethods__ = {}
    for _s in [ZeroInflationIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FRHICP, name, value)
    __swig_getmethods__ = {}
    for _s in [ZeroInflationIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FRHICP, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FRHICP(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FRHICP
    __del__ = lambda self: None
FRHICP_swigregister = _QuantLib.FRHICP_swigregister
FRHICP_swigregister(FRHICP)

class UKRPI(ZeroInflationIndex):
    __swig_setmethods__ = {}
    for _s in [ZeroInflationIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UKRPI, name, value)
    __swig_getmethods__ = {}
    for _s in [ZeroInflationIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UKRPI, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_UKRPI(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_UKRPI
    __del__ = lambda self: None
UKRPI_swigregister = _QuantLib.UKRPI_swigregister
UKRPI_swigregister(UKRPI)

class USCPI(ZeroInflationIndex):
    __swig_setmethods__ = {}
    for _s in [ZeroInflationIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, USCPI, name, value)
    __swig_getmethods__ = {}
    for _s in [ZeroInflationIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, USCPI, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_USCPI(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_USCPI
    __del__ = lambda self: None
USCPI_swigregister = _QuantLib.USCPI_swigregister
USCPI_swigregister(USCPI)

class ZACPI(ZeroInflationIndex):
    __swig_setmethods__ = {}
    for _s in [ZeroInflationIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZACPI, name, value)
    __swig_getmethods__ = {}
    for _s in [ZeroInflationIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZACPI, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ZACPI(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ZACPI
    __del__ = lambda self: None
ZACPI_swigregister = _QuantLib.ZACPI_swigregister
ZACPI_swigregister(ZACPI)

class YYEUHICP(YoYInflationIndex):
    __swig_setmethods__ = {}
    for _s in [YoYInflationIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YYEUHICP, name, value)
    __swig_getmethods__ = {}
    for _s in [YoYInflationIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YYEUHICP, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_YYEUHICP(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_YYEUHICP
    __del__ = lambda self: None
YYEUHICP_swigregister = _QuantLib.YYEUHICP_swigregister
YYEUHICP_swigregister(YYEUHICP)

class YYEUHICPXT(YoYInflationIndex):
    __swig_setmethods__ = {}
    for _s in [YoYInflationIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YYEUHICPXT, name, value)
    __swig_getmethods__ = {}
    for _s in [YoYInflationIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YYEUHICPXT, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_YYEUHICPXT(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_YYEUHICPXT
    __del__ = lambda self: None
YYEUHICPXT_swigregister = _QuantLib.YYEUHICPXT_swigregister
YYEUHICPXT_swigregister(YYEUHICPXT)

class YYEUHICPr(YoYInflationIndex):
    __swig_setmethods__ = {}
    for _s in [YoYInflationIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YYEUHICPr, name, value)
    __swig_getmethods__ = {}
    for _s in [YoYInflationIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YYEUHICPr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_YYEUHICPr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_YYEUHICPr
    __del__ = lambda self: None
YYEUHICPr_swigregister = _QuantLib.YYEUHICPr_swigregister
YYEUHICPr_swigregister(YYEUHICPr)

class YYFRHICP(YoYInflationIndex):
    __swig_setmethods__ = {}
    for _s in [YoYInflationIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YYFRHICP, name, value)
    __swig_getmethods__ = {}
    for _s in [YoYInflationIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YYFRHICP, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_YYFRHICP(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_YYFRHICP
    __del__ = lambda self: None
YYFRHICP_swigregister = _QuantLib.YYFRHICP_swigregister
YYFRHICP_swigregister(YYFRHICP)

class YYFRHICPr(YoYInflationIndex):
    __swig_setmethods__ = {}
    for _s in [YoYInflationIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YYFRHICPr, name, value)
    __swig_getmethods__ = {}
    for _s in [YoYInflationIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YYFRHICPr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_YYFRHICPr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_YYFRHICPr
    __del__ = lambda self: None
YYFRHICPr_swigregister = _QuantLib.YYFRHICPr_swigregister
YYFRHICPr_swigregister(YYFRHICPr)

class YYUKRPI(YoYInflationIndex):
    __swig_setmethods__ = {}
    for _s in [YoYInflationIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YYUKRPI, name, value)
    __swig_getmethods__ = {}
    for _s in [YoYInflationIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YYUKRPI, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_YYUKRPI(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_YYUKRPI
    __del__ = lambda self: None
YYUKRPI_swigregister = _QuantLib.YYUKRPI_swigregister
YYUKRPI_swigregister(YYUKRPI)

class YYUKRPIr(YoYInflationIndex):
    __swig_setmethods__ = {}
    for _s in [YoYInflationIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YYUKRPIr, name, value)
    __swig_getmethods__ = {}
    for _s in [YoYInflationIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YYUKRPIr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_YYUKRPIr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_YYUKRPIr
    __del__ = lambda self: None
YYUKRPIr_swigregister = _QuantLib.YYUKRPIr_swigregister
YYUKRPIr_swigregister(YYUKRPIr)

class YYUSCPI(YoYInflationIndex):
    __swig_setmethods__ = {}
    for _s in [YoYInflationIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YYUSCPI, name, value)
    __swig_getmethods__ = {}
    for _s in [YoYInflationIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YYUSCPI, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_YYUSCPI(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_YYUSCPI
    __del__ = lambda self: None
YYUSCPI_swigregister = _QuantLib.YYUSCPI_swigregister
YYUSCPI_swigregister(YYUSCPI)

class YYUSCPIr(YoYInflationIndex):
    __swig_setmethods__ = {}
    for _s in [YoYInflationIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YYUSCPIr, name, value)
    __swig_getmethods__ = {}
    for _s in [YoYInflationIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YYUSCPIr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_YYUSCPIr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_YYUSCPIr
    __del__ = lambda self: None
YYUSCPIr_swigregister = _QuantLib.YYUSCPIr_swigregister
YYUSCPIr_swigregister(YYUSCPIr)

class YYZACPI(YoYInflationIndex):
    __swig_setmethods__ = {}
    for _s in [YoYInflationIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YYZACPI, name, value)
    __swig_getmethods__ = {}
    for _s in [YoYInflationIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YYZACPI, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_YYZACPI(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_YYZACPI
    __del__ = lambda self: None
YYZACPI_swigregister = _QuantLib.YYZACPI_swigregister
YYZACPI_swigregister(YYZACPI)

class YYZACPIr(YoYInflationIndex):
    __swig_setmethods__ = {}
    for _s in [YoYInflationIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YYZACPIr, name, value)
    __swig_getmethods__ = {}
    for _s in [YoYInflationIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YYZACPIr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_YYZACPIr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_YYZACPIr
    __del__ = lambda self: None
YYZACPIr_swigregister = _QuantLib.YYZACPIr_swigregister
YYZACPIr_swigregister(YYZACPIr)

class AUCPI(ZeroInflationIndex):
    __swig_setmethods__ = {}
    for _s in [ZeroInflationIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AUCPI, name, value)
    __swig_getmethods__ = {}
    for _s in [ZeroInflationIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AUCPI, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_AUCPI(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AUCPI
    __del__ = lambda self: None
AUCPI_swigregister = _QuantLib.AUCPI_swigregister
AUCPI_swigregister(AUCPI)

class OvernightIndexedSwapIndex(SwapIndex):
    __swig_setmethods__ = {}
    for _s in [SwapIndex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OvernightIndexedSwapIndex, name, value)
    __swig_getmethods__ = {}
    for _s in [SwapIndex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OvernightIndexedSwapIndex, name)
    __repr__ = _swig_repr

    def __init__(self, familyName, tenor, settlementDays, currency, overnightIndex, telescopicValueDates=False):
        this = _QuantLib.new_OvernightIndexedSwapIndex(familyName, tenor, settlementDays, currency, overnightIndex, telescopicValueDates)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def overnightIndex(self):
        return _QuantLib.OvernightIndexedSwapIndex_overnightIndex(self)

    def underlyingSwap(self, fixingDate):
        return _QuantLib.OvernightIndexedSwapIndex_underlyingSwap(self, fixingDate)
    __swig_destroy__ = _QuantLib.delete_OvernightIndexedSwapIndex
    __del__ = lambda self: None
OvernightIndexedSwapIndex_swigregister = _QuantLib.OvernightIndexedSwapIndex_swigregister
OvernightIndexedSwapIndex_swigregister(OvernightIndexedSwapIndex)


def as_overnight_swap_index(index):
    return _QuantLib.as_overnight_swap_index(index)
as_overnight_swap_index = _QuantLib.as_overnight_swap_index
class Seasonality(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Seasonality, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Seasonality, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def correctZeroRate(self, d, r, iTS):
        return _QuantLib.Seasonality_correctZeroRate(self, d, r, iTS)

    def correctYoYRate(self, d, r, iTS):
        return _QuantLib.Seasonality_correctYoYRate(self, d, r, iTS)

    def isConsistent(self, iTS):
        return _QuantLib.Seasonality_isConsistent(self, iTS)
    __swig_destroy__ = _QuantLib.delete_Seasonality
    __del__ = lambda self: None
Seasonality_swigregister = _QuantLib.Seasonality_swigregister
Seasonality_swigregister(Seasonality)

class MultiplicativePriceSeasonality(Seasonality):
    __swig_setmethods__ = {}
    for _s in [Seasonality]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiplicativePriceSeasonality, name, value)
    __swig_getmethods__ = {}
    for _s in [Seasonality]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiplicativePriceSeasonality, name)
    __repr__ = _swig_repr

    def __init__(self, seasonalityBaseDate, frequency, seasonalityFactors):
        this = _QuantLib.new_MultiplicativePriceSeasonality(seasonalityBaseDate, frequency, seasonalityFactors)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MultiplicativePriceSeasonality
    __del__ = lambda self: None
MultiplicativePriceSeasonality_swigregister = _QuantLib.MultiplicativePriceSeasonality_swigregister
MultiplicativePriceSeasonality_swigregister(MultiplicativePriceSeasonality)

class KerkhofSeasonality(Seasonality):
    __swig_setmethods__ = {}
    for _s in [Seasonality]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KerkhofSeasonality, name, value)
    __swig_getmethods__ = {}
    for _s in [Seasonality]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KerkhofSeasonality, name)
    __repr__ = _swig_repr

    def __init__(self, seasonalityBaseDate, seasonalityFactors):
        this = _QuantLib.new_KerkhofSeasonality(seasonalityBaseDate, seasonalityFactors)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_KerkhofSeasonality
    __del__ = lambda self: None
KerkhofSeasonality_swigregister = _QuantLib.KerkhofSeasonality_swigregister
KerkhofSeasonality_swigregister(KerkhofSeasonality)

class YoYOptionletStripper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, YoYOptionletStripper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, YoYOptionletStripper, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def initialize(self, surf, pricer, slope):
        return _QuantLib.YoYOptionletStripper_initialize(self, surf, pricer, slope)

    def maxStrike(self):
        return _QuantLib.YoYOptionletStripper_maxStrike(self)

    def strikes(self):
        return _QuantLib.YoYOptionletStripper_strikes(self)

    def slice(self, d):
        return _QuantLib.YoYOptionletStripper_slice(self, d)
    __swig_destroy__ = _QuantLib.delete_YoYOptionletStripper
    __del__ = lambda self: None
YoYOptionletStripper_swigregister = _QuantLib.YoYOptionletStripper_swigregister
YoYOptionletStripper_swigregister(YoYOptionletStripper)

class InterpolatedYoYInflationOptionletStripper(YoYOptionletStripper):
    __swig_setmethods__ = {}
    for _s in [YoYOptionletStripper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterpolatedYoYInflationOptionletStripper, name, value)
    __swig_getmethods__ = {}
    for _s in [YoYOptionletStripper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterpolatedYoYInflationOptionletStripper, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_InterpolatedYoYInflationOptionletStripper()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_InterpolatedYoYInflationOptionletStripper
    __del__ = lambda self: None
InterpolatedYoYInflationOptionletStripper_swigregister = _QuantLib.InterpolatedYoYInflationOptionletStripper_swigregister
InterpolatedYoYInflationOptionletStripper_swigregister(InterpolatedYoYInflationOptionletStripper)

class Bond(Instrument):
    __swig_setmethods__ = {}
    for _s in [Instrument]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bond, name, value)
    __swig_getmethods__ = {}
    for _s in [Instrument]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bond, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Bond(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nextCouponRate(self, *args):
        return _QuantLib.Bond_nextCouponRate(self, *args)

    def previousCouponRate(self, *args):
        return _QuantLib.Bond_previousCouponRate(self, *args)

    def settlementDays(self):
        return _QuantLib.Bond_settlementDays(self)

    def settlementDate(self, *args):
        return _QuantLib.Bond_settlementDate(self, *args)

    def startDate(self):
        return _QuantLib.Bond_startDate(self)

    def maturityDate(self):
        return _QuantLib.Bond_maturityDate(self)

    def issueDate(self):
        return _QuantLib.Bond_issueDate(self)

    def cashflows(self):
        return _QuantLib.Bond_cashflows(self)

    def redemptions(self):
        return _QuantLib.Bond_redemptions(self)

    def redemption(self):
        return _QuantLib.Bond_redemption(self)

    def calendar(self):
        return _QuantLib.Bond_calendar(self)

    def notionals(self):
        return _QuantLib.Bond_notionals(self)

    def notional(self, *args):
        return _QuantLib.Bond_notional(self, *args)

    def cleanPrice(self, *args):
        return _QuantLib.Bond_cleanPrice(self, *args)

    def dirtyPrice(self, *args):
        return _QuantLib.Bond_dirtyPrice(self, *args)

    def bondYield(self, *args):
        return _QuantLib.Bond_bondYield(self, *args)

    def accruedAmount(self, *args):
        return _QuantLib.Bond_accruedAmount(self, *args)

    def settlementValue(self, *args):
        return _QuantLib.Bond_settlementValue(self, *args)
    __swig_destroy__ = _QuantLib.delete_Bond
    __del__ = lambda self: None
Bond_swigregister = _QuantLib.Bond_swigregister
Bond_swigregister(Bond)


def cleanPriceFromZSpread(*args):
    return _QuantLib.cleanPriceFromZSpread(*args)
cleanPriceFromZSpread = _QuantLib.cleanPriceFromZSpread
class CapFloor(Instrument):
    __swig_setmethods__ = {}
    for _s in [Instrument]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CapFloor, name, value)
    __swig_getmethods__ = {}
    for _s in [Instrument]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CapFloor, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def impliedVolatility(self, price, disc, guess, accuracy=1.0e-4, maxEvaluations=100, minVol=1.0e-7, maxVol=4.0, type=ShiftedLognormal, displacement=0.0):
        return _QuantLib.CapFloor_impliedVolatility(self, price, disc, guess, accuracy, maxEvaluations, minVol, maxVol, type, displacement)
    Cap = _QuantLib.CapFloor_Cap
    Floor = _QuantLib.CapFloor_Floor
    Collar = _QuantLib.CapFloor_Collar

    def floatingLeg(self):
        return _QuantLib.CapFloor_floatingLeg(self)

    def capRates(self):
        return _QuantLib.CapFloor_capRates(self)

    def floorRates(self):
        return _QuantLib.CapFloor_floorRates(self)

    def startDate(self):
        return _QuantLib.CapFloor_startDate(self)

    def maturityDate(self):
        return _QuantLib.CapFloor_maturityDate(self)

    def type(self):
        return _QuantLib.CapFloor_type(self)

    def atmRate(self, discountCurve):
        return _QuantLib.CapFloor_atmRate(self, discountCurve)

    def vega(self):
        return _QuantLib.CapFloor_vega(self)

    def optionletsPrice(self):
        return _QuantLib.CapFloor_optionletsPrice(self)

    def optionletsVega(self):
        return _QuantLib.CapFloor_optionletsVega(self)

    def optionletsDelta(self):
        return _QuantLib.CapFloor_optionletsDelta(self)

    def optionletsDiscountFactor(self):
        return _QuantLib.CapFloor_optionletsDiscountFactor(self)

    def optionletsAtmForward(self):
        return _QuantLib.CapFloor_optionletsAtmForward(self)

    def optionletsStdDev(self):
        return _QuantLib.CapFloor_optionletsStdDev(self)
    __swig_destroy__ = _QuantLib.delete_CapFloor
    __del__ = lambda self: None
CapFloor_swigregister = _QuantLib.CapFloor_swigregister
CapFloor_swigregister(CapFloor)

class Forward(Instrument):
    __swig_setmethods__ = {}
    for _s in [Instrument]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Forward, name, value)
    __swig_getmethods__ = {}
    for _s in [Instrument]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Forward, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def settlementDate(self):
        return _QuantLib.Forward_settlementDate(self)

    def isExpired(self):
        return _QuantLib.Forward_isExpired(self)

    def calendar(self):
        return _QuantLib.Forward_calendar(self)

    def businessDayConvention(self):
        return _QuantLib.Forward_businessDayConvention(self)

    def dayCounter(self):
        return _QuantLib.Forward_dayCounter(self)

    def discountCurve(self):
        return _QuantLib.Forward_discountCurve(self)

    def incomeDiscountCurve(self):
        return _QuantLib.Forward_incomeDiscountCurve(self)

    def spotValue(self):
        return _QuantLib.Forward_spotValue(self)

    def spotIncome(self, incomeDiscountCurve):
        return _QuantLib.Forward_spotIncome(self, incomeDiscountCurve)

    def forwardValue(self):
        return _QuantLib.Forward_forwardValue(self)

    def impliedYield(self, underlyingSpotValue, forwardValue, settlementDate, compoundingConvention, dayCounter):
        return _QuantLib.Forward_impliedYield(self, underlyingSpotValue, forwardValue, settlementDate, compoundingConvention, dayCounter)
    __swig_destroy__ = _QuantLib.delete_Forward
    __del__ = lambda self: None
Forward_swigregister = _QuantLib.Forward_swigregister
Forward_swigregister(Forward)

class Option(Instrument):
    __swig_setmethods__ = {}
    for _s in [Instrument]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Option, name, value)
    __swig_getmethods__ = {}
    for _s in [Instrument]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Option, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Put = _QuantLib.Option_Put
    Call = _QuantLib.Option_Call

    def payoff(self):
        return _QuantLib.Option_payoff(self)

    def exercise(self):
        return _QuantLib.Option_exercise(self)
    __swig_destroy__ = _QuantLib.delete_Option
    __del__ = lambda self: None
Option_swigregister = _QuantLib.Option_swigregister
Option_swigregister(Option)

class Swap(Instrument):
    __swig_setmethods__ = {}
    for _s in [Instrument]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Swap, name, value)
    __swig_getmethods__ = {}
    for _s in [Instrument]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Swap, name)
    __repr__ = _swig_repr

    def __init__(self, firstLeg, secondLeg):
        this = _QuantLib.new_Swap(firstLeg, secondLeg)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def numberOfLegs(self):
        return _QuantLib.Swap_numberOfLegs(self)

    def startDate(self):
        return _QuantLib.Swap_startDate(self)

    def maturityDate(self):
        return _QuantLib.Swap_maturityDate(self)

    def leg(self, i):
        return _QuantLib.Swap_leg(self, i)

    def legNPV(self, j):
        return _QuantLib.Swap_legNPV(self, j)

    def legBPS(self, k):
        return _QuantLib.Swap_legBPS(self, k)

    def startDiscounts(self, j):
        return _QuantLib.Swap_startDiscounts(self, j)

    def endDiscounts(self, j):
        return _QuantLib.Swap_endDiscounts(self, j)

    def npvDateDiscount(self):
        return _QuantLib.Swap_npvDateDiscount(self)

    def payer(self, j):
        return _QuantLib.Swap_payer(self, j)
    __swig_destroy__ = _QuantLib.delete_Swap
    __del__ = lambda self: None
Swap_swigregister = _QuantLib.Swap_swigregister
Swap_swigregister(Swap)

class YoYInflationCapFloor(Instrument):
    __swig_setmethods__ = {}
    for _s in [Instrument]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YoYInflationCapFloor, name, value)
    __swig_getmethods__ = {}
    for _s in [Instrument]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YoYInflationCapFloor, name)
    __repr__ = _swig_repr
    Cap = _QuantLib.YoYInflationCapFloor_Cap
    Floor = _QuantLib.YoYInflationCapFloor_Floor
    Collar = _QuantLib.YoYInflationCapFloor_Collar

    def __init__(self, type, yoyLeg, strikes):
        this = _QuantLib.new_YoYInflationCapFloor(type, yoyLeg, strikes)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def impliedVolatility(self, price, curve, guess, accuracy=1.0e-4, maxEvaluations=100, minVol=1.0e-7, maxVol=4.0):
        return _QuantLib.YoYInflationCapFloor_impliedVolatility(self, price, curve, guess, accuracy, maxEvaluations, minVol, maxVol)

    def optionletPrices(self):
        return _QuantLib.YoYInflationCapFloor_optionletPrices(self)
    __swig_destroy__ = _QuantLib.delete_YoYInflationCapFloor
    __del__ = lambda self: None
YoYInflationCapFloor_swigregister = _QuantLib.YoYInflationCapFloor_swigregister
YoYInflationCapFloor_swigregister(YoYInflationCapFloor)

class AmortizingFixedRateBond(Bond):
    __swig_setmethods__ = {}
    for _s in [Bond]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AmortizingFixedRateBond, name, value)
    __swig_getmethods__ = {}
    for _s in [Bond]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AmortizingFixedRateBond, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_AmortizingFixedRateBond(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def frequency(self):
        return _QuantLib.AmortizingFixedRateBond_frequency(self)

    def dayCounter(self):
        return _QuantLib.AmortizingFixedRateBond_dayCounter(self)
    __swig_destroy__ = _QuantLib.delete_AmortizingFixedRateBond
    __del__ = lambda self: None
AmortizingFixedRateBond_swigregister = _QuantLib.AmortizingFixedRateBond_swigregister
AmortizingFixedRateBond_swigregister(AmortizingFixedRateBond)

class AmortizingFloatingRateBond(Bond):
    __swig_setmethods__ = {}
    for _s in [Bond]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AmortizingFloatingRateBond, name, value)
    __swig_getmethods__ = {}
    for _s in [Bond]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AmortizingFloatingRateBond, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_AmortizingFloatingRateBond(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AmortizingFloatingRateBond
    __del__ = lambda self: None
AmortizingFloatingRateBond_swigregister = _QuantLib.AmortizingFloatingRateBond_swigregister
AmortizingFloatingRateBond_swigregister(AmortizingFloatingRateBond)

class CPIBond(Bond):
    __swig_setmethods__ = {}
    for _s in [Bond]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPIBond, name, value)
    __swig_getmethods__ = {}
    for _s in [Bond]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPIBond, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_CPIBond(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CPIBond
    __del__ = lambda self: None
CPIBond_swigregister = _QuantLib.CPIBond_swigregister
CPIBond_swigregister(CPIBond)

class CmsRateBond(Bond):
    __swig_setmethods__ = {}
    for _s in [Bond]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmsRateBond, name, value)
    __swig_getmethods__ = {}
    for _s in [Bond]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CmsRateBond, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_CmsRateBond(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CmsRateBond
    __del__ = lambda self: None
CmsRateBond_swigregister = _QuantLib.CmsRateBond_swigregister
CmsRateBond_swigregister(CmsRateBond)

class ZeroCouponBond(Bond):
    __swig_setmethods__ = {}
    for _s in [Bond]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZeroCouponBond, name, value)
    __swig_getmethods__ = {}
    for _s in [Bond]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZeroCouponBond, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_ZeroCouponBond(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ZeroCouponBond
    __del__ = lambda self: None
ZeroCouponBond_swigregister = _QuantLib.ZeroCouponBond_swigregister
ZeroCouponBond_swigregister(ZeroCouponBond)

class CallableBond(Bond):
    __swig_setmethods__ = {}
    for _s in [Bond]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallableBond, name, value)
    __swig_getmethods__ = {}
    for _s in [Bond]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CallableBond, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def callability(self):
        return _QuantLib.CallableBond_callability(self)

    def impliedVolatility(self, targetValue, discountCurve, accuracy, maxEvaluations, minVol, maxVol):
        return _QuantLib.CallableBond_impliedVolatility(self, targetValue, discountCurve, accuracy, maxEvaluations, minVol, maxVol)

    def OAS(self, *args):
        return _QuantLib.CallableBond_OAS(self, *args)

    def cleanPriceOAS(self, *args):
        return _QuantLib.CallableBond_cleanPriceOAS(self, *args)

    def effectiveDuration(self, oas, engineTS, dayCounter, compounding, frequency, bump=2e-4):
        return _QuantLib.CallableBond_effectiveDuration(self, oas, engineTS, dayCounter, compounding, frequency, bump)

    def effectiveConvexity(self, oas, engineTS, dayCounter, compounding, frequency, bump=2e-4):
        return _QuantLib.CallableBond_effectiveConvexity(self, oas, engineTS, dayCounter, compounding, frequency, bump)
    __swig_destroy__ = _QuantLib.delete_CallableBond
    __del__ = lambda self: None
CallableBond_swigregister = _QuantLib.CallableBond_swigregister
CallableBond_swigregister(CallableBond)

class FixedRateBond(Bond):
    __swig_setmethods__ = {}
    for _s in [Bond]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FixedRateBond, name, value)
    __swig_getmethods__ = {}
    for _s in [Bond]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FixedRateBond, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FixedRateBond(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        from_rates = staticmethod(_QuantLib.FixedRateBond_from_rates)
    else:
        from_rates = _QuantLib.FixedRateBond_from_rates
    if _newclass:
        from_interest_rates = staticmethod(_QuantLib.FixedRateBond_from_interest_rates)
    else:
        from_interest_rates = _QuantLib.FixedRateBond_from_interest_rates
    if _newclass:
        from_date_info = staticmethod(_QuantLib.FixedRateBond_from_date_info)
    else:
        from_date_info = _QuantLib.FixedRateBond_from_date_info

    def frequency(self):
        return _QuantLib.FixedRateBond_frequency(self)

    def dayCounter(self):
        return _QuantLib.FixedRateBond_dayCounter(self)
    __swig_destroy__ = _QuantLib.delete_FixedRateBond
    __del__ = lambda self: None
FixedRateBond_swigregister = _QuantLib.FixedRateBond_swigregister
FixedRateBond_swigregister(FixedRateBond)

def FixedRateBond_from_rates(*args, **kwargs):
    return _QuantLib.FixedRateBond_from_rates(*args, **kwargs)
FixedRateBond_from_rates = _QuantLib.FixedRateBond_from_rates

def FixedRateBond_from_interest_rates(*args, **kwargs):
    return _QuantLib.FixedRateBond_from_interest_rates(*args, **kwargs)
FixedRateBond_from_interest_rates = _QuantLib.FixedRateBond_from_interest_rates

def FixedRateBond_from_date_info(*args, **kwargs):
    return _QuantLib.FixedRateBond_from_date_info(*args, **kwargs)
FixedRateBond_from_date_info = _QuantLib.FixedRateBond_from_date_info

class FloatingRateBond(Bond):
    __swig_setmethods__ = {}
    for _s in [Bond]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatingRateBond, name, value)
    __swig_getmethods__ = {}
    for _s in [Bond]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatingRateBond, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_FloatingRateBond(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FloatingRateBond
    __del__ = lambda self: None
FloatingRateBond_swigregister = _QuantLib.FloatingRateBond_swigregister
FloatingRateBond_swigregister(FloatingRateBond)

class CallableFixedRateBond(CallableBond):
    __swig_setmethods__ = {}
    for _s in [CallableBond]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallableFixedRateBond, name, value)
    __swig_getmethods__ = {}
    for _s in [CallableBond]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CallableFixedRateBond, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_CallableFixedRateBond(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CallableFixedRateBond
    __del__ = lambda self: None
CallableFixedRateBond_swigregister = _QuantLib.CallableFixedRateBond_swigregister
CallableFixedRateBond_swigregister(CallableFixedRateBond)

class CallableZeroCouponBond(CallableBond):
    __swig_setmethods__ = {}
    for _s in [CallableBond]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallableZeroCouponBond, name, value)
    __swig_getmethods__ = {}
    for _s in [CallableBond]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CallableZeroCouponBond, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_CallableZeroCouponBond(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CallableZeroCouponBond
    __del__ = lambda self: None
CallableZeroCouponBond_swigregister = _QuantLib.CallableZeroCouponBond_swigregister
CallableZeroCouponBond_swigregister(CallableZeroCouponBond)

class ConvertibleFixedCouponBond(Bond):
    __swig_setmethods__ = {}
    for _s in [Bond]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertibleFixedCouponBond, name, value)
    __swig_getmethods__ = {}
    for _s in [Bond]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertibleFixedCouponBond, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ConvertibleFixedCouponBond(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ConvertibleFixedCouponBond
    __del__ = lambda self: None
ConvertibleFixedCouponBond_swigregister = _QuantLib.ConvertibleFixedCouponBond_swigregister
ConvertibleFixedCouponBond_swigregister(ConvertibleFixedCouponBond)

class ConvertibleFloatingRateBond(Bond):
    __swig_setmethods__ = {}
    for _s in [Bond]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertibleFloatingRateBond, name, value)
    __swig_getmethods__ = {}
    for _s in [Bond]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertibleFloatingRateBond, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ConvertibleFloatingRateBond(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ConvertibleFloatingRateBond
    __del__ = lambda self: None
ConvertibleFloatingRateBond_swigregister = _QuantLib.ConvertibleFloatingRateBond_swigregister
ConvertibleFloatingRateBond_swigregister(ConvertibleFloatingRateBond)

class ConvertibleZeroCouponBond(Bond):
    __swig_setmethods__ = {}
    for _s in [Bond]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertibleZeroCouponBond, name, value)
    __swig_getmethods__ = {}
    for _s in [Bond]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertibleZeroCouponBond, name)
    __repr__ = _swig_repr

    def __init__(self, exercise, conversionRatio, dividends, callability, creditSpread, issueDate, settlementDays, dayCounter, schedule, redemption=100.0):
        this = _QuantLib.new_ConvertibleZeroCouponBond(exercise, conversionRatio, dividends, callability, creditSpread, issueDate, settlementDays, dayCounter, schedule, redemption)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ConvertibleZeroCouponBond
    __del__ = lambda self: None
ConvertibleZeroCouponBond_swigregister = _QuantLib.ConvertibleZeroCouponBond_swigregister
ConvertibleZeroCouponBond_swigregister(ConvertibleZeroCouponBond)

class Cap(CapFloor):
    __swig_setmethods__ = {}
    for _s in [CapFloor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cap, name, value)
    __swig_getmethods__ = {}
    for _s in [CapFloor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cap, name)
    __repr__ = _swig_repr

    def __init__(self, leg, capRates):
        this = _QuantLib.new_Cap(leg, capRates)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Cap
    __del__ = lambda self: None
Cap_swigregister = _QuantLib.Cap_swigregister
Cap_swigregister(Cap)

class Floor(CapFloor):
    __swig_setmethods__ = {}
    for _s in [CapFloor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Floor, name, value)
    __swig_getmethods__ = {}
    for _s in [CapFloor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Floor, name)
    __repr__ = _swig_repr

    def __init__(self, leg, floorRates):
        this = _QuantLib.new_Floor(leg, floorRates)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Floor
    __del__ = lambda self: None
Floor_swigregister = _QuantLib.Floor_swigregister
Floor_swigregister(Floor)

class Collar(CapFloor):
    __swig_setmethods__ = {}
    for _s in [CapFloor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Collar, name, value)
    __swig_getmethods__ = {}
    for _s in [CapFloor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Collar, name)
    __repr__ = _swig_repr

    def __init__(self, leg, capRates, floorRates):
        this = _QuantLib.new_Collar(leg, capRates, floorRates)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Collar
    __del__ = lambda self: None
Collar_swigregister = _QuantLib.Collar_swigregister
Collar_swigregister(Collar)

class FixedRateBondForward(Forward):
    __swig_setmethods__ = {}
    for _s in [Forward]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FixedRateBondForward, name, value)
    __swig_getmethods__ = {}
    for _s in [Forward]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FixedRateBondForward, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FixedRateBondForward(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def forwardPrice(self):
        return _QuantLib.FixedRateBondForward_forwardPrice(self)

    def cleanForwardPrice(self):
        return _QuantLib.FixedRateBondForward_cleanForwardPrice(self)
    __swig_destroy__ = _QuantLib.delete_FixedRateBondForward
    __del__ = lambda self: None
FixedRateBondForward_swigregister = _QuantLib.FixedRateBondForward_swigregister
FixedRateBondForward_swigregister(FixedRateBondForward)

class ForwardRateAgreement(Forward):
    __swig_setmethods__ = {}
    for _s in [Forward]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForwardRateAgreement, name, value)
    __swig_getmethods__ = {}
    for _s in [Forward]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForwardRateAgreement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ForwardRateAgreement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def fixingDate(self):
        return _QuantLib.ForwardRateAgreement_fixingDate(self)

    def spotIncome(self, discount):
        return _QuantLib.ForwardRateAgreement_spotIncome(self, discount)

    def spotValue(self):
        return _QuantLib.ForwardRateAgreement_spotValue(self)

    def forwardRate(self):
        return _QuantLib.ForwardRateAgreement_forwardRate(self)
    __swig_destroy__ = _QuantLib.delete_ForwardRateAgreement
    __del__ = lambda self: None
ForwardRateAgreement_swigregister = _QuantLib.ForwardRateAgreement_swigregister
ForwardRateAgreement_swigregister(ForwardRateAgreement)

class OvernightIndexFuture(Forward):
    __swig_setmethods__ = {}
    for _s in [Forward]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OvernightIndexFuture, name, value)
    __swig_getmethods__ = {}
    for _s in [Forward]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OvernightIndexFuture, name)
    __repr__ = _swig_repr
    Averaging = _QuantLib.OvernightIndexFuture_Averaging
    Compounding = _QuantLib.OvernightIndexFuture_Compounding

    def __init__(self, *args):
        this = _QuantLib.new_OvernightIndexFuture(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def convexityAdjustment(self):
        return _QuantLib.OvernightIndexFuture_convexityAdjustment(self)
    __swig_destroy__ = _QuantLib.delete_OvernightIndexFuture
    __del__ = lambda self: None
OvernightIndexFuture_swigregister = _QuantLib.OvernightIndexFuture_swigregister
OvernightIndexFuture_swigregister(OvernightIndexFuture)

class MultiAssetOption(Option):
    __swig_setmethods__ = {}
    for _s in [Option]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiAssetOption, name, value)
    __swig_getmethods__ = {}
    for _s in [Option]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiAssetOption, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def delta(self):
        return _QuantLib.MultiAssetOption_delta(self)

    def gamma(self):
        return _QuantLib.MultiAssetOption_gamma(self)

    def theta(self):
        return _QuantLib.MultiAssetOption_theta(self)

    def vega(self):
        return _QuantLib.MultiAssetOption_vega(self)

    def rho(self):
        return _QuantLib.MultiAssetOption_rho(self)

    def dividendRho(self):
        return _QuantLib.MultiAssetOption_dividendRho(self)
    __swig_destroy__ = _QuantLib.delete_MultiAssetOption
    __del__ = lambda self: None
MultiAssetOption_swigregister = _QuantLib.MultiAssetOption_swigregister
MultiAssetOption_swigregister(MultiAssetOption)

class OneAssetOption(Option):
    __swig_setmethods__ = {}
    for _s in [Option]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OneAssetOption, name, value)
    __swig_getmethods__ = {}
    for _s in [Option]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OneAssetOption, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isExpired(self):
        return _QuantLib.OneAssetOption_isExpired(self)

    def delta(self):
        return _QuantLib.OneAssetOption_delta(self)

    def deltaForward(self):
        return _QuantLib.OneAssetOption_deltaForward(self)

    def elasticity(self):
        return _QuantLib.OneAssetOption_elasticity(self)

    def gamma(self):
        return _QuantLib.OneAssetOption_gamma(self)

    def theta(self):
        return _QuantLib.OneAssetOption_theta(self)

    def thetaPerDay(self):
        return _QuantLib.OneAssetOption_thetaPerDay(self)

    def vega(self):
        return _QuantLib.OneAssetOption_vega(self)

    def rho(self):
        return _QuantLib.OneAssetOption_rho(self)

    def dividendRho(self):
        return _QuantLib.OneAssetOption_dividendRho(self)

    def strikeSensitivity(self):
        return _QuantLib.OneAssetOption_strikeSensitivity(self)

    def itmCashProbability(self):
        return _QuantLib.OneAssetOption_itmCashProbability(self)
    __swig_destroy__ = _QuantLib.delete_OneAssetOption
    __del__ = lambda self: None
OneAssetOption_swigregister = _QuantLib.OneAssetOption_swigregister
OneAssetOption_swigregister(OneAssetOption)

class BasketOption(MultiAssetOption):
    __swig_setmethods__ = {}
    for _s in [MultiAssetOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasketOption, name, value)
    __swig_getmethods__ = {}
    for _s in [MultiAssetOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BasketOption, name)
    __repr__ = _swig_repr

    def __init__(self, payoff, exercise):
        this = _QuantLib.new_BasketOption(payoff, exercise)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BasketOption
    __del__ = lambda self: None
BasketOption_swigregister = _QuantLib.BasketOption_swigregister
BasketOption_swigregister(BasketOption)

class EverestOption(MultiAssetOption):
    __swig_setmethods__ = {}
    for _s in [MultiAssetOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EverestOption, name, value)
    __swig_getmethods__ = {}
    for _s in [MultiAssetOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EverestOption, name)
    __repr__ = _swig_repr

    def __init__(self, notional, guarantee, exercise):
        this = _QuantLib.new_EverestOption(notional, guarantee, exercise)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EverestOption
    __del__ = lambda self: None
EverestOption_swigregister = _QuantLib.EverestOption_swigregister
EverestOption_swigregister(EverestOption)

class HimalayaOption(MultiAssetOption):
    __swig_setmethods__ = {}
    for _s in [MultiAssetOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HimalayaOption, name, value)
    __swig_getmethods__ = {}
    for _s in [MultiAssetOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HimalayaOption, name)
    __repr__ = _swig_repr

    def __init__(self, fixingDates, strike):
        this = _QuantLib.new_HimalayaOption(fixingDates, strike)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_HimalayaOption
    __del__ = lambda self: None
HimalayaOption_swigregister = _QuantLib.HimalayaOption_swigregister
HimalayaOption_swigregister(HimalayaOption)

class SpreadOption(MultiAssetOption):
    __swig_setmethods__ = {}
    for _s in [MultiAssetOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpreadOption, name, value)
    __swig_getmethods__ = {}
    for _s in [MultiAssetOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpreadOption, name)
    __repr__ = _swig_repr

    def __init__(self, payoff, exercise):
        this = _QuantLib.new_SpreadOption(payoff, exercise)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SpreadOption
    __del__ = lambda self: None
SpreadOption_swigregister = _QuantLib.SpreadOption_swigregister
SpreadOption_swigregister(SpreadOption)

class Average(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Average, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Average, name)
    __repr__ = _swig_repr
    Arithmetic = _QuantLib.Average_Arithmetic
    Geometric = _QuantLib.Average_Geometric

    def __init__(self):
        this = _QuantLib.new_Average()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Average
    __del__ = lambda self: None
Average_swigregister = _QuantLib.Average_swigregister
Average_swigregister(Average)

class Barrier(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Barrier, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Barrier, name)
    __repr__ = _swig_repr
    DownIn = _QuantLib.Barrier_DownIn
    UpIn = _QuantLib.Barrier_UpIn
    DownOut = _QuantLib.Barrier_DownOut
    UpOut = _QuantLib.Barrier_UpOut

    def __init__(self):
        this = _QuantLib.new_Barrier()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Barrier
    __del__ = lambda self: None
Barrier_swigregister = _QuantLib.Barrier_swigregister
Barrier_swigregister(Barrier)

class DoubleBarrier(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleBarrier, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleBarrier, name)
    __repr__ = _swig_repr
    KnockIn = _QuantLib.DoubleBarrier_KnockIn
    KnockOut = _QuantLib.DoubleBarrier_KnockOut
    KIKO = _QuantLib.DoubleBarrier_KIKO
    KOKI = _QuantLib.DoubleBarrier_KOKI

    def __init__(self):
        this = _QuantLib.new_DoubleBarrier()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_DoubleBarrier
    __del__ = lambda self: None
DoubleBarrier_swigregister = _QuantLib.DoubleBarrier_swigregister
DoubleBarrier_swigregister(DoubleBarrier)

class PartialBarrier(Barrier):
    __swig_setmethods__ = {}
    for _s in [Barrier]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PartialBarrier, name, value)
    __swig_getmethods__ = {}
    for _s in [Barrier]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PartialBarrier, name)
    __repr__ = _swig_repr
    Start = _QuantLib.PartialBarrier_Start
    End = _QuantLib.PartialBarrier_End
    EndB1 = _QuantLib.PartialBarrier_EndB1
    EndB2 = _QuantLib.PartialBarrier_EndB2

    def __init__(self):
        this = _QuantLib.new_PartialBarrier()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_PartialBarrier
    __del__ = lambda self: None
PartialBarrier_swigregister = _QuantLib.PartialBarrier_swigregister
PartialBarrier_swigregister(PartialBarrier)

class ContinuousAveragingAsianOption(OneAssetOption):
    __swig_setmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContinuousAveragingAsianOption, name, value)
    __swig_getmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContinuousAveragingAsianOption, name)
    __repr__ = _swig_repr

    def __init__(self, averageType, payoff, exercise):
        this = _QuantLib.new_ContinuousAveragingAsianOption(averageType, payoff, exercise)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ContinuousAveragingAsianOption
    __del__ = lambda self: None
ContinuousAveragingAsianOption_swigregister = _QuantLib.ContinuousAveragingAsianOption_swigregister
ContinuousAveragingAsianOption_swigregister(ContinuousAveragingAsianOption)

class CliquetOption(OneAssetOption):
    __swig_setmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CliquetOption, name, value)
    __swig_getmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CliquetOption, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, maturity, resetDates):
        this = _QuantLib.new_CliquetOption(arg2, maturity, resetDates)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CliquetOption
    __del__ = lambda self: None
CliquetOption_swigregister = _QuantLib.CliquetOption_swigregister
CliquetOption_swigregister(CliquetOption)

class ComplexChooserOption(OneAssetOption):
    __swig_setmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexChooserOption, name, value)
    __swig_getmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexChooserOption, name)
    __repr__ = _swig_repr

    def __init__(self, choosingDate, strikeCall, strikePut, exerciseCall, exercisePut):
        this = _QuantLib.new_ComplexChooserOption(choosingDate, strikeCall, strikePut, exerciseCall, exercisePut)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ComplexChooserOption
    __del__ = lambda self: None
ComplexChooserOption_swigregister = _QuantLib.ComplexChooserOption_swigregister
ComplexChooserOption_swigregister(ComplexChooserOption)

class CompoundOption(OneAssetOption):
    __swig_setmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompoundOption, name, value)
    __swig_getmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompoundOption, name)
    __repr__ = _swig_repr

    def __init__(self, motherPayoff, motherExercise, daughterPayoff, daughterExercise):
        this = _QuantLib.new_CompoundOption(motherPayoff, motherExercise, daughterPayoff, daughterExercise)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CompoundOption
    __del__ = lambda self: None
CompoundOption_swigregister = _QuantLib.CompoundOption_swigregister
CompoundOption_swigregister(CompoundOption)

class DiscreteAveragingAsianOption(OneAssetOption):
    __swig_setmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscreteAveragingAsianOption, name, value)
    __swig_getmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiscreteAveragingAsianOption, name)
    __repr__ = _swig_repr

    def __init__(self, averageType, runningAccumulator, pastFixings, fixingDates, payoff, exercise):
        this = _QuantLib.new_DiscreteAveragingAsianOption(averageType, runningAccumulator, pastFixings, fixingDates, payoff, exercise)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def timeGrid(self):
        return _QuantLib.DiscreteAveragingAsianOption_timeGrid(self)
    __swig_destroy__ = _QuantLib.delete_DiscreteAveragingAsianOption
    __del__ = lambda self: None
DiscreteAveragingAsianOption_swigregister = _QuantLib.DiscreteAveragingAsianOption_swigregister
DiscreteAveragingAsianOption_swigregister(DiscreteAveragingAsianOption)

class DividendVanillaOption(OneAssetOption):
    __swig_setmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DividendVanillaOption, name, value)
    __swig_getmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DividendVanillaOption, name)
    __repr__ = _swig_repr

    def __init__(self, payoff, exercise, dividendDates, dividends):
        this = _QuantLib.new_DividendVanillaOption(payoff, exercise, dividendDates, dividends)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def impliedVolatility(self, targetValue, process, accuracy=1.0e-4, maxEvaluations=100, minVol=1.0e-4, maxVol=4.0):
        return _QuantLib.DividendVanillaOption_impliedVolatility(self, targetValue, process, accuracy, maxEvaluations, minVol, maxVol)
    __swig_destroy__ = _QuantLib.delete_DividendVanillaOption
    __del__ = lambda self: None
DividendVanillaOption_swigregister = _QuantLib.DividendVanillaOption_swigregister
DividendVanillaOption_swigregister(DividendVanillaOption)

class QuantoVanillaOption(OneAssetOption):
    __swig_setmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuantoVanillaOption, name, value)
    __swig_getmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuantoVanillaOption, name)
    __repr__ = _swig_repr

    def __init__(self, payoff, exercise):
        this = _QuantLib.new_QuantoVanillaOption(payoff, exercise)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def qvega(self):
        return _QuantLib.QuantoVanillaOption_qvega(self)

    def qrho(self):
        return _QuantLib.QuantoVanillaOption_qrho(self)

    def qlambda(self):
        return _QuantLib.QuantoVanillaOption_qlambda(self)
    __swig_destroy__ = _QuantLib.delete_QuantoVanillaOption
    __del__ = lambda self: None
QuantoVanillaOption_swigregister = _QuantLib.QuantoVanillaOption_swigregister
QuantoVanillaOption_swigregister(QuantoVanillaOption)

class HolderExtensibleOption(OneAssetOption):
    __swig_setmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HolderExtensibleOption, name, value)
    __swig_getmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HolderExtensibleOption, name)
    __repr__ = _swig_repr

    def __init__(self, type, premium, secondExpiryDate, secondStrike, payoff, exercise):
        this = _QuantLib.new_HolderExtensibleOption(type, premium, secondExpiryDate, secondStrike, payoff, exercise)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_HolderExtensibleOption
    __del__ = lambda self: None
HolderExtensibleOption_swigregister = _QuantLib.HolderExtensibleOption_swigregister
HolderExtensibleOption_swigregister(HolderExtensibleOption)

class PartialTimeBarrierOption(OneAssetOption):
    __swig_setmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PartialTimeBarrierOption, name, value)
    __swig_getmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PartialTimeBarrierOption, name)
    __repr__ = _swig_repr

    def __init__(self, barrierType, barrierRange, barrier, rebate, coverEventDate, payoff, exercise):
        this = _QuantLib.new_PartialTimeBarrierOption(barrierType, barrierRange, barrier, rebate, coverEventDate, payoff, exercise)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_PartialTimeBarrierOption
    __del__ = lambda self: None
PartialTimeBarrierOption_swigregister = _QuantLib.PartialTimeBarrierOption_swigregister
PartialTimeBarrierOption_swigregister(PartialTimeBarrierOption)

class SimpleChooserOption(OneAssetOption):
    __swig_setmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleChooserOption, name, value)
    __swig_getmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleChooserOption, name)
    __repr__ = _swig_repr

    def __init__(self, choosingDate, strike, exercise):
        this = _QuantLib.new_SimpleChooserOption(choosingDate, strike, exercise)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SimpleChooserOption
    __del__ = lambda self: None
SimpleChooserOption_swigregister = _QuantLib.SimpleChooserOption_swigregister
SimpleChooserOption_swigregister(SimpleChooserOption)

class VanillaSwingOption(OneAssetOption):
    __swig_setmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VanillaSwingOption, name, value)
    __swig_getmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VanillaSwingOption, name)
    __repr__ = _swig_repr

    def __init__(self, payoff, ex, minExerciseRights, maxExerciseRights):
        this = _QuantLib.new_VanillaSwingOption(payoff, ex, minExerciseRights, maxExerciseRights)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isExpired(self):
        return _QuantLib.VanillaSwingOption_isExpired(self)
    __swig_destroy__ = _QuantLib.delete_VanillaSwingOption
    __del__ = lambda self: None
VanillaSwingOption_swigregister = _QuantLib.VanillaSwingOption_swigregister
VanillaSwingOption_swigregister(VanillaSwingOption)

class VanillaStorageOption(OneAssetOption):
    __swig_setmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VanillaStorageOption, name, value)
    __swig_getmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VanillaStorageOption, name)
    __repr__ = _swig_repr

    def __init__(self, ex, capacity, load, changeRate):
        this = _QuantLib.new_VanillaStorageOption(ex, capacity, load, changeRate)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isExpired(self):
        return _QuantLib.VanillaStorageOption_isExpired(self)
    __swig_destroy__ = _QuantLib.delete_VanillaStorageOption
    __del__ = lambda self: None
VanillaStorageOption_swigregister = _QuantLib.VanillaStorageOption_swigregister
VanillaStorageOption_swigregister(VanillaStorageOption)

class VanillaOption(OneAssetOption):
    __swig_setmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VanillaOption, name, value)
    __swig_getmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VanillaOption, name)
    __repr__ = _swig_repr

    def __init__(self, payoff, exercise):
        this = _QuantLib.new_VanillaOption(payoff, exercise)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def impliedVolatility(self, targetValue, process, accuracy=1.0e-4, maxEvaluations=100, minVol=1.0e-4, maxVol=4.0):
        return _QuantLib.VanillaOption_impliedVolatility(self, targetValue, process, accuracy, maxEvaluations, minVol, maxVol)

    def priceCurve(self):
        return _QuantLib.VanillaOption_priceCurve(self)
    __swig_destroy__ = _QuantLib.delete_VanillaOption
    __del__ = lambda self: None
VanillaOption_swigregister = _QuantLib.VanillaOption_swigregister
VanillaOption_swigregister(VanillaOption)

class WriterExtensibleOption(OneAssetOption):
    __swig_setmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WriterExtensibleOption, name, value)
    __swig_getmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WriterExtensibleOption, name)
    __repr__ = _swig_repr

    def __init__(self, payoff1, exercise1, payoff2, exercise2):
        this = _QuantLib.new_WriterExtensibleOption(payoff1, exercise1, payoff2, exercise2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def payoff2(self):
        return _QuantLib.WriterExtensibleOption_payoff2(self)

    def exercise2(self):
        return _QuantLib.WriterExtensibleOption_exercise2(self)

    def isExpired(self):
        return _QuantLib.WriterExtensibleOption_isExpired(self)
    __swig_destroy__ = _QuantLib.delete_WriterExtensibleOption
    __del__ = lambda self: None
WriterExtensibleOption_swigregister = _QuantLib.WriterExtensibleOption_swigregister
WriterExtensibleOption_swigregister(WriterExtensibleOption)

class ContinuousFloatingLookbackOption(OneAssetOption):
    __swig_setmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContinuousFloatingLookbackOption, name, value)
    __swig_getmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContinuousFloatingLookbackOption, name)
    __repr__ = _swig_repr

    def __init__(self, currentMinmax, payoff, exercise):
        this = _QuantLib.new_ContinuousFloatingLookbackOption(currentMinmax, payoff, exercise)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ContinuousFloatingLookbackOption
    __del__ = lambda self: None
ContinuousFloatingLookbackOption_swigregister = _QuantLib.ContinuousFloatingLookbackOption_swigregister
ContinuousFloatingLookbackOption_swigregister(ContinuousFloatingLookbackOption)

class BarrierOption(OneAssetOption):
    __swig_setmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BarrierOption, name, value)
    __swig_getmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BarrierOption, name)
    __repr__ = _swig_repr

    def __init__(self, barrierType, barrier, rebate, payoff, exercise):
        this = _QuantLib.new_BarrierOption(barrierType, barrier, rebate, payoff, exercise)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def impliedVolatility(self, targetValue, process, accuracy=1.0e-4, maxEvaluations=100, minVol=1.0e-4, maxVol=4.0):
        return _QuantLib.BarrierOption_impliedVolatility(self, targetValue, process, accuracy, maxEvaluations, minVol, maxVol)
    __swig_destroy__ = _QuantLib.delete_BarrierOption
    __del__ = lambda self: None
BarrierOption_swigregister = _QuantLib.BarrierOption_swigregister
BarrierOption_swigregister(BarrierOption)

class ContinuousFixedLookbackOption(OneAssetOption):
    __swig_setmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContinuousFixedLookbackOption, name, value)
    __swig_getmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContinuousFixedLookbackOption, name)
    __repr__ = _swig_repr

    def __init__(self, currentMinmax, payoff, exercise):
        this = _QuantLib.new_ContinuousFixedLookbackOption(currentMinmax, payoff, exercise)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ContinuousFixedLookbackOption
    __del__ = lambda self: None
ContinuousFixedLookbackOption_swigregister = _QuantLib.ContinuousFixedLookbackOption_swigregister
ContinuousFixedLookbackOption_swigregister(ContinuousFixedLookbackOption)

class DoubleBarrierOption(OneAssetOption):
    __swig_setmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleBarrierOption, name, value)
    __swig_getmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleBarrierOption, name)
    __repr__ = _swig_repr

    def __init__(self, barrierType, barrier_lo, barrier_hi, rebate, payoff, exercise):
        this = _QuantLib.new_DoubleBarrierOption(barrierType, barrier_lo, barrier_hi, rebate, payoff, exercise)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def impliedVolatility(self, price, process, accuracy=1.0e-4, maxEvaluations=100, minVol=1.0e-7, maxVol=4.0):
        return _QuantLib.DoubleBarrierOption_impliedVolatility(self, price, process, accuracy, maxEvaluations, minVol, maxVol)
    __swig_destroy__ = _QuantLib.delete_DoubleBarrierOption
    __del__ = lambda self: None
DoubleBarrierOption_swigregister = _QuantLib.DoubleBarrierOption_swigregister
DoubleBarrierOption_swigregister(DoubleBarrierOption)

class ForwardVanillaOption(OneAssetOption):
    __swig_setmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForwardVanillaOption, name, value)
    __swig_getmethods__ = {}
    for _s in [OneAssetOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForwardVanillaOption, name)
    __repr__ = _swig_repr

    def __init__(self, moneyness, resetDate, payoff, exercise):
        this = _QuantLib.new_ForwardVanillaOption(moneyness, resetDate, payoff, exercise)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ForwardVanillaOption
    __del__ = lambda self: None
ForwardVanillaOption_swigregister = _QuantLib.ForwardVanillaOption_swigregister
ForwardVanillaOption_swigregister(ForwardVanillaOption)

class EuropeanOption(VanillaOption):
    __swig_setmethods__ = {}
    for _s in [VanillaOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EuropeanOption, name, value)
    __swig_getmethods__ = {}
    for _s in [VanillaOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EuropeanOption, name)
    __repr__ = _swig_repr

    def __init__(self, payoff, exercise):
        this = _QuantLib.new_EuropeanOption(payoff, exercise)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_EuropeanOption
    __del__ = lambda self: None
EuropeanOption_swigregister = _QuantLib.EuropeanOption_swigregister
EuropeanOption_swigregister(EuropeanOption)

class ContinuousPartialFloatingLookbackOption(ContinuousFloatingLookbackOption):
    __swig_setmethods__ = {}
    for _s in [ContinuousFloatingLookbackOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContinuousPartialFloatingLookbackOption, name, value)
    __swig_getmethods__ = {}
    for _s in [ContinuousFloatingLookbackOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContinuousPartialFloatingLookbackOption, name)
    __repr__ = _swig_repr

    def __init__(self, currentMinmax, arg3, lookbackPeriodEnd, payoff, exercise):
        this = _QuantLib.new_ContinuousPartialFloatingLookbackOption(currentMinmax, arg3, lookbackPeriodEnd, payoff, exercise)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ContinuousPartialFloatingLookbackOption
    __del__ = lambda self: None
ContinuousPartialFloatingLookbackOption_swigregister = _QuantLib.ContinuousPartialFloatingLookbackOption_swigregister
ContinuousPartialFloatingLookbackOption_swigregister(ContinuousPartialFloatingLookbackOption)

class DividendBarrierOption(BarrierOption):
    __swig_setmethods__ = {}
    for _s in [BarrierOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DividendBarrierOption, name, value)
    __swig_getmethods__ = {}
    for _s in [BarrierOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DividendBarrierOption, name)
    __repr__ = _swig_repr

    def __init__(self, barrierType, barrier, rebate, payoff, exercise, dividendDates, dividends):
        this = _QuantLib.new_DividendBarrierOption(barrierType, barrier, rebate, payoff, exercise, dividendDates, dividends)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_DividendBarrierOption
    __del__ = lambda self: None
DividendBarrierOption_swigregister = _QuantLib.DividendBarrierOption_swigregister
DividendBarrierOption_swigregister(DividendBarrierOption)

class QuantoBarrierOption(BarrierOption):
    __swig_setmethods__ = {}
    for _s in [BarrierOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuantoBarrierOption, name, value)
    __swig_getmethods__ = {}
    for _s in [BarrierOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuantoBarrierOption, name)
    __repr__ = _swig_repr

    def __init__(self, barrierType, barrier, rebate, payoff, exercise):
        this = _QuantLib.new_QuantoBarrierOption(barrierType, barrier, rebate, payoff, exercise)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def qvega(self):
        return _QuantLib.QuantoBarrierOption_qvega(self)

    def qrho(self):
        return _QuantLib.QuantoBarrierOption_qrho(self)

    def qlambda(self):
        return _QuantLib.QuantoBarrierOption_qlambda(self)
    __swig_destroy__ = _QuantLib.delete_QuantoBarrierOption
    __del__ = lambda self: None
QuantoBarrierOption_swigregister = _QuantLib.QuantoBarrierOption_swigregister
QuantoBarrierOption_swigregister(QuantoBarrierOption)

class ContinuousPartialFixedLookbackOption(ContinuousFixedLookbackOption):
    __swig_setmethods__ = {}
    for _s in [ContinuousFixedLookbackOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContinuousPartialFixedLookbackOption, name, value)
    __swig_getmethods__ = {}
    for _s in [ContinuousFixedLookbackOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContinuousPartialFixedLookbackOption, name)
    __repr__ = _swig_repr

    def __init__(self, lookbackPeriodStart, payoff, exercise):
        this = _QuantLib.new_ContinuousPartialFixedLookbackOption(lookbackPeriodStart, payoff, exercise)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ContinuousPartialFixedLookbackOption
    __del__ = lambda self: None
ContinuousPartialFixedLookbackOption_swigregister = _QuantLib.ContinuousPartialFixedLookbackOption_swigregister
ContinuousPartialFixedLookbackOption_swigregister(ContinuousPartialFixedLookbackOption)

class QuantoDoubleBarrierOption(DoubleBarrierOption):
    __swig_setmethods__ = {}
    for _s in [DoubleBarrierOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuantoDoubleBarrierOption, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleBarrierOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuantoDoubleBarrierOption, name)
    __repr__ = _swig_repr

    def __init__(self, barrierType, barrier_lo, barrier_hi, rebate, payoff, exercise):
        this = _QuantLib.new_QuantoDoubleBarrierOption(barrierType, barrier_lo, barrier_hi, rebate, payoff, exercise)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def qvega(self):
        return _QuantLib.QuantoDoubleBarrierOption_qvega(self)

    def qrho(self):
        return _QuantLib.QuantoDoubleBarrierOption_qrho(self)

    def qlambda(self):
        return _QuantLib.QuantoDoubleBarrierOption_qlambda(self)
    __swig_destroy__ = _QuantLib.delete_QuantoDoubleBarrierOption
    __del__ = lambda self: None
QuantoDoubleBarrierOption_swigregister = _QuantLib.QuantoDoubleBarrierOption_swigregister
QuantoDoubleBarrierOption_swigregister(QuantoDoubleBarrierOption)

class QuantoForwardVanillaOption(ForwardVanillaOption):
    __swig_setmethods__ = {}
    for _s in [ForwardVanillaOption]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuantoForwardVanillaOption, name, value)
    __swig_getmethods__ = {}
    for _s in [ForwardVanillaOption]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuantoForwardVanillaOption, name)
    __repr__ = _swig_repr

    def __init__(self, moneyness, resetDate, payoff, exercise):
        this = _QuantLib.new_QuantoForwardVanillaOption(moneyness, resetDate, payoff, exercise)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_QuantoForwardVanillaOption
    __del__ = lambda self: None
QuantoForwardVanillaOption_swigregister = _QuantLib.QuantoForwardVanillaOption_swigregister
QuantoForwardVanillaOption_swigregister(QuantoForwardVanillaOption)

class CdsOption(Option):
    __swig_setmethods__ = {}
    for _s in [Option]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CdsOption, name, value)
    __swig_getmethods__ = {}
    for _s in [Option]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CdsOption, name)
    __repr__ = _swig_repr

    def __init__(self, swap, exercise, knocksOut=True):
        this = _QuantLib.new_CdsOption(swap, exercise, knocksOut)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def atmRate(self):
        return _QuantLib.CdsOption_atmRate(self)

    def riskyAnnuity(self):
        return _QuantLib.CdsOption_riskyAnnuity(self)

    def impliedVolatility(self, price, termStructure, arg4, recoveryRate, accuracy=1.e-4, maxEvaluations=100, minVol=1.0e-7, maxVol=4.0):
        return _QuantLib.CdsOption_impliedVolatility(self, price, termStructure, arg4, recoveryRate, accuracy, maxEvaluations, minVol, maxVol)
    __swig_destroy__ = _QuantLib.delete_CdsOption
    __del__ = lambda self: None
CdsOption_swigregister = _QuantLib.CdsOption_swigregister
CdsOption_swigregister(CdsOption)


class BasketGeneratingEngine(object):
    class CalibrationBasketType(object):
        Naive = 'Naive'
        MaturityStrikeByDeltaGamma = 'MaturityStrikeByDeltaGamma'

class Claim(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Claim, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Claim, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def amount(self, defaultDate, notional, recoveryRate):
        return _QuantLib.Claim_amount(self, defaultDate, notional, recoveryRate)
    __swig_destroy__ = _QuantLib.delete_Claim
    __del__ = lambda self: None
Claim_swigregister = _QuantLib.Claim_swigregister
Claim_swigregister(Claim)

class FaceValueClaim(Claim):
    __swig_setmethods__ = {}
    for _s in [Claim]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FaceValueClaim, name, value)
    __swig_getmethods__ = {}
    for _s in [Claim]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FaceValueClaim, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_FaceValueClaim()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FaceValueClaim
    __del__ = lambda self: None
FaceValueClaim_swigregister = _QuantLib.FaceValueClaim_swigregister
FaceValueClaim_swigregister(FaceValueClaim)

class FaceValueAccrualClaim(Claim):
    __swig_setmethods__ = {}
    for _s in [Claim]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FaceValueAccrualClaim, name, value)
    __swig_getmethods__ = {}
    for _s in [Claim]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FaceValueAccrualClaim, name)
    __repr__ = _swig_repr

    def __init__(self, bond):
        this = _QuantLib.new_FaceValueAccrualClaim(bond)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FaceValueAccrualClaim
    __del__ = lambda self: None
FaceValueAccrualClaim_swigregister = _QuantLib.FaceValueAccrualClaim_swigregister
FaceValueAccrualClaim_swigregister(FaceValueAccrualClaim)

class CompositeInstrument(Instrument):
    __swig_setmethods__ = {}
    for _s in [Instrument]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeInstrument, name, value)
    __swig_getmethods__ = {}
    for _s in [Instrument]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeInstrument, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_CompositeInstrument()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def add(self, instrument, multiplier=1.0):
        return _QuantLib.CompositeInstrument_add(self, instrument, multiplier)

    def subtract(self, instrument, multiplier=1.0):
        return _QuantLib.CompositeInstrument_subtract(self, instrument, multiplier)
    __swig_destroy__ = _QuantLib.delete_CompositeInstrument
    __del__ = lambda self: None
CompositeInstrument_swigregister = _QuantLib.CompositeInstrument_swigregister
CompositeInstrument_swigregister(CompositeInstrument)

class CreditDefaultSwap(Instrument):
    __swig_setmethods__ = {}
    for _s in [Instrument]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreditDefaultSwap, name, value)
    __swig_getmethods__ = {}
    for _s in [Instrument]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CreditDefaultSwap, name)
    __repr__ = _swig_repr
    Midpoint = _QuantLib.CreditDefaultSwap_Midpoint
    ISDA = _QuantLib.CreditDefaultSwap_ISDA

    def __init__(self, *args):
        this = _QuantLib.new_CreditDefaultSwap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def side(self):
        return _QuantLib.CreditDefaultSwap_side(self)

    def notional(self):
        return _QuantLib.CreditDefaultSwap_notional(self)

    def runningSpread(self):
        return _QuantLib.CreditDefaultSwap_runningSpread(self)

    def upfront(self):
        return _QuantLib.CreditDefaultSwap_upfront(self)

    def settlesAccrual(self):
        return _QuantLib.CreditDefaultSwap_settlesAccrual(self)

    def paysAtDefaultTime(self):
        return _QuantLib.CreditDefaultSwap_paysAtDefaultTime(self)

    def fairSpread(self):
        return _QuantLib.CreditDefaultSwap_fairSpread(self)

    def fairUpfront(self):
        return _QuantLib.CreditDefaultSwap_fairUpfront(self)

    def couponLegBPS(self):
        return _QuantLib.CreditDefaultSwap_couponLegBPS(self)

    def couponLegNPV(self):
        return _QuantLib.CreditDefaultSwap_couponLegNPV(self)

    def defaultLegNPV(self):
        return _QuantLib.CreditDefaultSwap_defaultLegNPV(self)

    def upfrontBPS(self):
        return _QuantLib.CreditDefaultSwap_upfrontBPS(self)

    def upfrontNPV(self):
        return _QuantLib.CreditDefaultSwap_upfrontNPV(self)

    def impliedHazardRate(self, *args):
        return _QuantLib.CreditDefaultSwap_impliedHazardRate(self, *args)

    def conventionalSpread(self, conventionalRecovery, discountCurve, dayCounter):
        return _QuantLib.CreditDefaultSwap_conventionalSpread(self, conventionalRecovery, discountCurve, dayCounter)

    def coupons(self):
        return _QuantLib.CreditDefaultSwap_coupons(self)
    __swig_destroy__ = _QuantLib.delete_CreditDefaultSwap
    __del__ = lambda self: None
CreditDefaultSwap_swigregister = _QuantLib.CreditDefaultSwap_swigregister
CreditDefaultSwap_swigregister(CreditDefaultSwap)

class Stock(Instrument):
    __swig_setmethods__ = {}
    for _s in [Instrument]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stock, name, value)
    __swig_getmethods__ = {}
    for _s in [Instrument]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Stock, name)
    __repr__ = _swig_repr

    def __init__(self, quote):
        this = _QuantLib.new_Stock(quote)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Stock
    __del__ = lambda self: None
Stock_swigregister = _QuantLib.Stock_swigregister
Stock_swigregister(Stock)

class FloatFloatSwaption(Instrument):
    __swig_setmethods__ = {}
    for _s in [Instrument]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatFloatSwaption, name, value)
    __swig_getmethods__ = {}
    for _s in [Instrument]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatFloatSwaption, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FloatFloatSwaption(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isExpired(self):
        return _QuantLib.FloatFloatSwaption_isExpired(self)

    def settlementType(self):
        return _QuantLib.FloatFloatSwaption_settlementType(self)

    def settlementMethod(self):
        return _QuantLib.FloatFloatSwaption_settlementMethod(self)

    def type(self):
        return _QuantLib.FloatFloatSwaption_type(self)

    def underlyingSwap(self):
        return _QuantLib.FloatFloatSwaption_underlyingSwap(self)

    def calibrationBasket(self, swapIndex, swaptionVolatility, typeStr):
        return _QuantLib.FloatFloatSwaption_calibrationBasket(self, swapIndex, swaptionVolatility, typeStr)

    def underlyingValue(self):
        return _QuantLib.FloatFloatSwaption_underlyingValue(self)

    def probabilities(self):
        return _QuantLib.FloatFloatSwaption_probabilities(self)
    __swig_destroy__ = _QuantLib.delete_FloatFloatSwaption
    __del__ = lambda self: None
FloatFloatSwaption_swigregister = _QuantLib.FloatFloatSwaption_swigregister
FloatFloatSwaption_swigregister(FloatFloatSwaption)

class NonstandardSwaption(Instrument):
    __swig_setmethods__ = {}
    for _s in [Instrument]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NonstandardSwaption, name, value)
    __swig_getmethods__ = {}
    for _s in [Instrument]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NonstandardSwaption, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_NonstandardSwaption(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def underlyingSwap(self):
        return _QuantLib.NonstandardSwaption_underlyingSwap(self)

    def calibrationBasket(self, swapIndex, swaptionVolatility, typeStr):
        return _QuantLib.NonstandardSwaption_calibrationBasket(self, swapIndex, swaptionVolatility, typeStr)

    def probabilities(self):
        return _QuantLib.NonstandardSwaption_probabilities(self)
    __swig_destroy__ = _QuantLib.delete_NonstandardSwaption
    __del__ = lambda self: None
NonstandardSwaption_swigregister = _QuantLib.NonstandardSwaption_swigregister
NonstandardSwaption_swigregister(NonstandardSwaption)

class Swaption(Option):
    __swig_setmethods__ = {}
    for _s in [Option]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Swaption, name, value)
    __swig_getmethods__ = {}
    for _s in [Option]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Swaption, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Swaption(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def settlementType(self):
        return _QuantLib.Swaption_settlementType(self)

    def settlementMethod(self):
        return _QuantLib.Swaption_settlementMethod(self)

    def type(self):
        return _QuantLib.Swaption_type(self)

    def underlyingSwap(self):
        return _QuantLib.Swaption_underlyingSwap(self)

    def impliedVolatility(self, price, discountCurve, guess, accuracy=1.0e-4, maxEvaluations=100, minVol=1.0e-7, maxVol=4.0, type=ShiftedLognormal, displacement=0.0):
        return _QuantLib.Swaption_impliedVolatility(self, price, discountCurve, guess, accuracy, maxEvaluations, minVol, maxVol, type, displacement)

    def vega(self):
        return _QuantLib.Swaption_vega(self)

    def delta(self):
        return _QuantLib.Swaption_delta(self)

    def annuity(self):
        return _QuantLib.Swaption_annuity(self)
    __swig_destroy__ = _QuantLib.delete_Swaption
    __del__ = lambda self: None
Swaption_swigregister = _QuantLib.Swaption_swigregister
Swaption_swigregister(Swaption)

class ArithmeticAverageOIS(Swap):
    __swig_setmethods__ = {}
    for _s in [Swap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArithmeticAverageOIS, name, value)
    __swig_getmethods__ = {}
    for _s in [Swap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArithmeticAverageOIS, name)
    __repr__ = _swig_repr
    Receiver = _QuantLib.ArithmeticAverageOIS_Receiver
    Payer = _QuantLib.ArithmeticAverageOIS_Payer

    def __init__(self, *args):
        this = _QuantLib.new_ArithmeticAverageOIS(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def type(self):
        return _QuantLib.ArithmeticAverageOIS_type(self)

    def nominal(self):
        return _QuantLib.ArithmeticAverageOIS_nominal(self)

    def nominals(self):
        return _QuantLib.ArithmeticAverageOIS_nominals(self)

    def fixedLegPaymentFrequency(self):
        return _QuantLib.ArithmeticAverageOIS_fixedLegPaymentFrequency(self)

    def overnightLegPaymentFrequency(self):
        return _QuantLib.ArithmeticAverageOIS_overnightLegPaymentFrequency(self)

    def fixedRate(self):
        return _QuantLib.ArithmeticAverageOIS_fixedRate(self)

    def fixedDayCount(self):
        return _QuantLib.ArithmeticAverageOIS_fixedDayCount(self)

    def overnightIndex(self):
        return _QuantLib.ArithmeticAverageOIS_overnightIndex(self)

    def spread(self):
        return _QuantLib.ArithmeticAverageOIS_spread(self)

    def fixedLeg(self):
        return _QuantLib.ArithmeticAverageOIS_fixedLeg(self)

    def overnightLeg(self):
        return _QuantLib.ArithmeticAverageOIS_overnightLeg(self)

    def fixedLegBPS(self):
        return _QuantLib.ArithmeticAverageOIS_fixedLegBPS(self)

    def fixedLegNPV(self):
        return _QuantLib.ArithmeticAverageOIS_fixedLegNPV(self)

    def fairRate(self):
        return _QuantLib.ArithmeticAverageOIS_fairRate(self)

    def overnightLegBPS(self):
        return _QuantLib.ArithmeticAverageOIS_overnightLegBPS(self)

    def overnightLegNPV(self):
        return _QuantLib.ArithmeticAverageOIS_overnightLegNPV(self)

    def fairSpread(self):
        return _QuantLib.ArithmeticAverageOIS_fairSpread(self)
    __swig_destroy__ = _QuantLib.delete_ArithmeticAverageOIS
    __del__ = lambda self: None
ArithmeticAverageOIS_swigregister = _QuantLib.ArithmeticAverageOIS_swigregister
ArithmeticAverageOIS_swigregister(ArithmeticAverageOIS)

class BMASwap(Swap):
    __swig_setmethods__ = {}
    for _s in [Swap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BMASwap, name, value)
    __swig_getmethods__ = {}
    for _s in [Swap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BMASwap, name)
    __repr__ = _swig_repr
    Receiver = _QuantLib.BMASwap_Receiver
    Payer = _QuantLib.BMASwap_Payer

    def __init__(self, type, nominal, liborSchedule, liborFraction, liborSpread, liborIndex, liborDayCount, bmaSchedule, bmaIndex, bmaDayCount):
        this = _QuantLib.new_BMASwap(type, nominal, liborSchedule, liborFraction, liborSpread, liborIndex, liborDayCount, bmaSchedule, bmaIndex, bmaDayCount)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def liborFraction(self):
        return _QuantLib.BMASwap_liborFraction(self)

    def liborSpread(self):
        return _QuantLib.BMASwap_liborSpread(self)

    def nominal(self):
        return _QuantLib.BMASwap_nominal(self)

    def type(self):
        return _QuantLib.BMASwap_type(self)

    def bmaLeg(self):
        return _QuantLib.BMASwap_bmaLeg(self)

    def liborLeg(self):
        return _QuantLib.BMASwap_liborLeg(self)

    def liborLegBPS(self):
        return _QuantLib.BMASwap_liborLegBPS(self)

    def liborLegNPV(self):
        return _QuantLib.BMASwap_liborLegNPV(self)

    def fairLiborFraction(self):
        return _QuantLib.BMASwap_fairLiborFraction(self)

    def fairLiborSpread(self):
        return _QuantLib.BMASwap_fairLiborSpread(self)

    def bmaLegBPS(self):
        return _QuantLib.BMASwap_bmaLegBPS(self)

    def bmaLegNPV(self):
        return _QuantLib.BMASwap_bmaLegNPV(self)
    __swig_destroy__ = _QuantLib.delete_BMASwap
    __del__ = lambda self: None
BMASwap_swigregister = _QuantLib.BMASwap_swigregister
BMASwap_swigregister(BMASwap)

class AssetSwap(Swap):
    __swig_setmethods__ = {}
    for _s in [Swap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AssetSwap, name, value)
    __swig_getmethods__ = {}
    for _s in [Swap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AssetSwap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_AssetSwap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def fairSpread(self):
        return _QuantLib.AssetSwap_fairSpread(self)

    def floatingLegBPS(self):
        return _QuantLib.AssetSwap_floatingLegBPS(self)

    def floatingLegNPV(self):
        return _QuantLib.AssetSwap_floatingLegNPV(self)

    def fairCleanPrice(self):
        return _QuantLib.AssetSwap_fairCleanPrice(self)

    def fairNonParRepayment(self):
        return _QuantLib.AssetSwap_fairNonParRepayment(self)

    def parSwap(self):
        return _QuantLib.AssetSwap_parSwap(self)

    def spread(self):
        return _QuantLib.AssetSwap_spread(self)

    def cleanPrice(self):
        return _QuantLib.AssetSwap_cleanPrice(self)

    def nonParRepayment(self):
        return _QuantLib.AssetSwap_nonParRepayment(self)

    def bond(self):
        return _QuantLib.AssetSwap_bond(self)

    def payBondCoupon(self):
        return _QuantLib.AssetSwap_payBondCoupon(self)

    def bondLeg(self):
        return _QuantLib.AssetSwap_bondLeg(self)

    def floatingLeg(self):
        return _QuantLib.AssetSwap_floatingLeg(self)
    __swig_destroy__ = _QuantLib.delete_AssetSwap
    __del__ = lambda self: None
AssetSwap_swigregister = _QuantLib.AssetSwap_swigregister
AssetSwap_swigregister(AssetSwap)

class CPISwap(Swap):
    __swig_setmethods__ = {}
    for _s in [Swap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPISwap, name, value)
    __swig_getmethods__ = {}
    for _s in [Swap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPISwap, name)
    __repr__ = _swig_repr
    Receiver = _QuantLib.CPISwap_Receiver
    Payer = _QuantLib.CPISwap_Payer

    def __init__(self, *args):
        this = _QuantLib.new_CPISwap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def floatLegNPV(self):
        return _QuantLib.CPISwap_floatLegNPV(self)

    def fairSpread(self):
        return _QuantLib.CPISwap_fairSpread(self)

    def fixedLegNPV(self):
        return _QuantLib.CPISwap_fixedLegNPV(self)

    def fairRate(self):
        return _QuantLib.CPISwap_fairRate(self)

    def type(self):
        return _QuantLib.CPISwap_type(self)

    def nominal(self):
        return _QuantLib.CPISwap_nominal(self)

    def subtractInflationNominal(self):
        return _QuantLib.CPISwap_subtractInflationNominal(self)

    def spread(self):
        return _QuantLib.CPISwap_spread(self)

    def floatDayCount(self):
        return _QuantLib.CPISwap_floatDayCount(self)

    def floatSchedule(self):
        return _QuantLib.CPISwap_floatSchedule(self)

    def floatPaymentRoll(self):
        return _QuantLib.CPISwap_floatPaymentRoll(self)

    def fixingDays(self):
        return _QuantLib.CPISwap_fixingDays(self)

    def floatIndex(self):
        return _QuantLib.CPISwap_floatIndex(self)

    def fixedRate(self):
        return _QuantLib.CPISwap_fixedRate(self)

    def baseCPI(self):
        return _QuantLib.CPISwap_baseCPI(self)

    def fixedDayCount(self):
        return _QuantLib.CPISwap_fixedDayCount(self)

    def fixedSchedule(self):
        return _QuantLib.CPISwap_fixedSchedule(self)

    def fixedPaymentRoll(self):
        return _QuantLib.CPISwap_fixedPaymentRoll(self)

    def observationLag(self):
        return _QuantLib.CPISwap_observationLag(self)

    def fixedIndex(self):
        return _QuantLib.CPISwap_fixedIndex(self)

    def observationInterpolation(self):
        return _QuantLib.CPISwap_observationInterpolation(self)

    def inflationNominal(self):
        return _QuantLib.CPISwap_inflationNominal(self)

    def cpiLeg(self):
        return _QuantLib.CPISwap_cpiLeg(self)

    def floatLeg(self):
        return _QuantLib.CPISwap_floatLeg(self)
    __swig_destroy__ = _QuantLib.delete_CPISwap
    __del__ = lambda self: None
CPISwap_swigregister = _QuantLib.CPISwap_swigregister
CPISwap_swigregister(CPISwap)

class FloatFloatSwap(Swap):
    __swig_setmethods__ = {}
    for _s in [Swap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatFloatSwap, name, value)
    __swig_getmethods__ = {}
    for _s in [Swap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatFloatSwap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FloatFloatSwap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def type(self):
        return _QuantLib.FloatFloatSwap_type(self)

    def nominal1(self):
        return _QuantLib.FloatFloatSwap_nominal1(self)

    def nominal2(self):
        return _QuantLib.FloatFloatSwap_nominal2(self)

    def schedule1(self):
        return _QuantLib.FloatFloatSwap_schedule1(self)

    def schedule2(self):
        return _QuantLib.FloatFloatSwap_schedule2(self)

    def index1(self):
        return _QuantLib.FloatFloatSwap_index1(self)

    def index2(self):
        return _QuantLib.FloatFloatSwap_index2(self)

    def spread1(self):
        return _QuantLib.FloatFloatSwap_spread1(self)

    def spread2(self):
        return _QuantLib.FloatFloatSwap_spread2(self)

    def gearing1(self):
        return _QuantLib.FloatFloatSwap_gearing1(self)

    def gearing2(self):
        return _QuantLib.FloatFloatSwap_gearing2(self)

    def cappedRate1(self):
        return _QuantLib.FloatFloatSwap_cappedRate1(self)

    def flooredRate1(self):
        return _QuantLib.FloatFloatSwap_flooredRate1(self)

    def cappedRate2(self):
        return _QuantLib.FloatFloatSwap_cappedRate2(self)

    def flooredRate2(self):
        return _QuantLib.FloatFloatSwap_flooredRate2(self)

    def dayCount1(self):
        return _QuantLib.FloatFloatSwap_dayCount1(self)

    def dayCount2(self):
        return _QuantLib.FloatFloatSwap_dayCount2(self)

    def paymentConvention1(self):
        return _QuantLib.FloatFloatSwap_paymentConvention1(self)

    def paymentConvention2(self):
        return _QuantLib.FloatFloatSwap_paymentConvention2(self)

    def leg1(self):
        return _QuantLib.FloatFloatSwap_leg1(self)

    def leg2(self):
        return _QuantLib.FloatFloatSwap_leg2(self)
    __swig_destroy__ = _QuantLib.delete_FloatFloatSwap
    __del__ = lambda self: None
FloatFloatSwap_swigregister = _QuantLib.FloatFloatSwap_swigregister
FloatFloatSwap_swigregister(FloatFloatSwap)

class IrregularSwap(Swap):
    __swig_setmethods__ = {}
    for _s in [Swap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IrregularSwap, name, value)
    __swig_getmethods__ = {}
    for _s in [Swap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IrregularSwap, name)
    __repr__ = _swig_repr
    Receiver = _QuantLib.IrregularSwap_Receiver
    Payer = _QuantLib.IrregularSwap_Payer

    def __init__(self, type, fixLeg, floatLeg):
        this = _QuantLib.new_IrregularSwap(type, fixLeg, floatLeg)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def type(self):
        return _QuantLib.IrregularSwap_type(self)

    def fixedLeg(self):
        return _QuantLib.IrregularSwap_fixedLeg(self)

    def floatingLeg(self):
        return _QuantLib.IrregularSwap_floatingLeg(self)

    def fixedLegBPS(self):
        return _QuantLib.IrregularSwap_fixedLegBPS(self)

    def fixedLegNPV(self):
        return _QuantLib.IrregularSwap_fixedLegNPV(self)

    def fairRate(self):
        return _QuantLib.IrregularSwap_fairRate(self)

    def floatingLegBPS(self):
        return _QuantLib.IrregularSwap_floatingLegBPS(self)

    def floatingLegNPV(self):
        return _QuantLib.IrregularSwap_floatingLegNPV(self)

    def fairSpread(self):
        return _QuantLib.IrregularSwap_fairSpread(self)
    __swig_destroy__ = _QuantLib.delete_IrregularSwap
    __del__ = lambda self: None
IrregularSwap_swigregister = _QuantLib.IrregularSwap_swigregister
IrregularSwap_swigregister(IrregularSwap)

class OvernightIndexedSwap(Swap):
    __swig_setmethods__ = {}
    for _s in [Swap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OvernightIndexedSwap, name, value)
    __swig_getmethods__ = {}
    for _s in [Swap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OvernightIndexedSwap, name)
    __repr__ = _swig_repr
    Receiver = _QuantLib.OvernightIndexedSwap_Receiver
    Payer = _QuantLib.OvernightIndexedSwap_Payer

    def __init__(self, *args):
        this = _QuantLib.new_OvernightIndexedSwap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def type(self):
        return _QuantLib.OvernightIndexedSwap_type(self)

    def nominal(self):
        return _QuantLib.OvernightIndexedSwap_nominal(self)

    def nominals(self):
        return _QuantLib.OvernightIndexedSwap_nominals(self)

    def paymentFrequency(self):
        return _QuantLib.OvernightIndexedSwap_paymentFrequency(self)

    def fixedRate(self):
        return _QuantLib.OvernightIndexedSwap_fixedRate(self)

    def fixedDayCount(self):
        return _QuantLib.OvernightIndexedSwap_fixedDayCount(self)

    def overnightIndex(self):
        return _QuantLib.OvernightIndexedSwap_overnightIndex(self)

    def spread(self):
        return _QuantLib.OvernightIndexedSwap_spread(self)

    def fixedLeg(self):
        return _QuantLib.OvernightIndexedSwap_fixedLeg(self)

    def overnightLeg(self):
        return _QuantLib.OvernightIndexedSwap_overnightLeg(self)

    def fixedLegBPS(self):
        return _QuantLib.OvernightIndexedSwap_fixedLegBPS(self)

    def fixedLegNPV(self):
        return _QuantLib.OvernightIndexedSwap_fixedLegNPV(self)

    def fairRate(self):
        return _QuantLib.OvernightIndexedSwap_fairRate(self)

    def overnightLegBPS(self):
        return _QuantLib.OvernightIndexedSwap_overnightLegBPS(self)

    def overnightLegNPV(self):
        return _QuantLib.OvernightIndexedSwap_overnightLegNPV(self)

    def fairSpread(self):
        return _QuantLib.OvernightIndexedSwap_fairSpread(self)
    __swig_destroy__ = _QuantLib.delete_OvernightIndexedSwap
    __del__ = lambda self: None
OvernightIndexedSwap_swigregister = _QuantLib.OvernightIndexedSwap_swigregister
OvernightIndexedSwap_swigregister(OvernightIndexedSwap)

class VanillaSwap(Swap):
    __swig_setmethods__ = {}
    for _s in [Swap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VanillaSwap, name, value)
    __swig_getmethods__ = {}
    for _s in [Swap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VanillaSwap, name)
    __repr__ = _swig_repr
    Receiver = _QuantLib.VanillaSwap_Receiver
    Payer = _QuantLib.VanillaSwap_Payer

    def __init__(self, type, nominal, fixedSchedule, fixedRate, fixedDayCount, floatSchedule, index, spread, floatingDayCount):
        this = _QuantLib.new_VanillaSwap(type, nominal, fixedSchedule, fixedRate, fixedDayCount, floatSchedule, index, spread, floatingDayCount)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def type(self):
        return _QuantLib.VanillaSwap_type(self)

    def nominal(self):
        return _QuantLib.VanillaSwap_nominal(self)

    def fixedSchedule(self):
        return _QuantLib.VanillaSwap_fixedSchedule(self)

    def fixedRate(self):
        return _QuantLib.VanillaSwap_fixedRate(self)

    def fixedDayCount(self):
        return _QuantLib.VanillaSwap_fixedDayCount(self)

    def floatingSchedule(self):
        return _QuantLib.VanillaSwap_floatingSchedule(self)

    def iborIndex(self):
        return _QuantLib.VanillaSwap_iborIndex(self)

    def spread(self):
        return _QuantLib.VanillaSwap_spread(self)

    def floatingDayCount(self):
        return _QuantLib.VanillaSwap_floatingDayCount(self)

    def paymentConvention(self):
        return _QuantLib.VanillaSwap_paymentConvention(self)

    def fixedLeg(self):
        return _QuantLib.VanillaSwap_fixedLeg(self)

    def floatingLeg(self):
        return _QuantLib.VanillaSwap_floatingLeg(self)

    def fixedLegBPS(self):
        return _QuantLib.VanillaSwap_fixedLegBPS(self)

    def fixedLegNPV(self):
        return _QuantLib.VanillaSwap_fixedLegNPV(self)

    def fairRate(self):
        return _QuantLib.VanillaSwap_fairRate(self)

    def floatingLegBPS(self):
        return _QuantLib.VanillaSwap_floatingLegBPS(self)

    def floatingLegNPV(self):
        return _QuantLib.VanillaSwap_floatingLegNPV(self)

    def fairSpread(self):
        return _QuantLib.VanillaSwap_fairSpread(self)
    __swig_destroy__ = _QuantLib.delete_VanillaSwap
    __del__ = lambda self: None
VanillaSwap_swigregister = _QuantLib.VanillaSwap_swigregister
VanillaSwap_swigregister(VanillaSwap)

class NonstandardSwap(Swap):
    __swig_setmethods__ = {}
    for _s in [Swap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NonstandardSwap, name, value)
    __swig_getmethods__ = {}
    for _s in [Swap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NonstandardSwap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_NonstandardSwap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def type(self):
        return _QuantLib.NonstandardSwap_type(self)

    def fixedNominal(self):
        return _QuantLib.NonstandardSwap_fixedNominal(self)

    def floatingNominal(self):
        return _QuantLib.NonstandardSwap_floatingNominal(self)

    def fixedSchedule(self):
        return _QuantLib.NonstandardSwap_fixedSchedule(self)

    def fixedRate(self):
        return _QuantLib.NonstandardSwap_fixedRate(self)

    def fixedDayCount(self):
        return _QuantLib.NonstandardSwap_fixedDayCount(self)

    def floatingSchedule(self):
        return _QuantLib.NonstandardSwap_floatingSchedule(self)

    def iborIndex(self):
        return _QuantLib.NonstandardSwap_iborIndex(self)

    def spread(self):
        return _QuantLib.NonstandardSwap_spread(self)

    def gearing(self):
        return _QuantLib.NonstandardSwap_gearing(self)

    def spreads(self):
        return _QuantLib.NonstandardSwap_spreads(self)

    def gearings(self):
        return _QuantLib.NonstandardSwap_gearings(self)

    def floatingDayCount(self):
        return _QuantLib.NonstandardSwap_floatingDayCount(self)

    def paymentConvention(self):
        return _QuantLib.NonstandardSwap_paymentConvention(self)

    def fixedLeg(self):
        return _QuantLib.NonstandardSwap_fixedLeg(self)

    def floatingLeg(self):
        return _QuantLib.NonstandardSwap_floatingLeg(self)
    __swig_destroy__ = _QuantLib.delete_NonstandardSwap
    __del__ = lambda self: None
NonstandardSwap_swigregister = _QuantLib.NonstandardSwap_swigregister
NonstandardSwap_swigregister(NonstandardSwap)

class YearOnYearInflationSwap(Swap):
    __swig_setmethods__ = {}
    for _s in [Swap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YearOnYearInflationSwap, name, value)
    __swig_getmethods__ = {}
    for _s in [Swap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YearOnYearInflationSwap, name)
    __repr__ = _swig_repr
    Receiver = _QuantLib.YearOnYearInflationSwap_Receiver
    Payer = _QuantLib.YearOnYearInflationSwap_Payer

    def __init__(self, type, nominal, fixedSchedule, fixedRate, fixedDayCounter, yoySchedule, index, lag, spread, yoyDayCounter, paymentCalendar, paymentConvention=Following):
        this = _QuantLib.new_YearOnYearInflationSwap(type, nominal, fixedSchedule, fixedRate, fixedDayCounter, yoySchedule, index, lag, spread, yoyDayCounter, paymentCalendar, paymentConvention)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def fixedLegNPV(self):
        return _QuantLib.YearOnYearInflationSwap_fixedLegNPV(self)

    def fairRate(self):
        return _QuantLib.YearOnYearInflationSwap_fairRate(self)

    def yoyLegNPV(self):
        return _QuantLib.YearOnYearInflationSwap_yoyLegNPV(self)

    def fairSpread(self):
        return _QuantLib.YearOnYearInflationSwap_fairSpread(self)

    def type(self):
        return _QuantLib.YearOnYearInflationSwap_type(self)

    def nominal(self):
        return _QuantLib.YearOnYearInflationSwap_nominal(self)

    def fixedSchedule(self):
        return _QuantLib.YearOnYearInflationSwap_fixedSchedule(self)

    def fixedRate(self):
        return _QuantLib.YearOnYearInflationSwap_fixedRate(self)

    def fixedDayCount(self):
        return _QuantLib.YearOnYearInflationSwap_fixedDayCount(self)

    def yoySchedule(self):
        return _QuantLib.YearOnYearInflationSwap_yoySchedule(self)

    def yoyInflationIndex(self):
        return _QuantLib.YearOnYearInflationSwap_yoyInflationIndex(self)

    def observationLag(self):
        return _QuantLib.YearOnYearInflationSwap_observationLag(self)

    def spread(self):
        return _QuantLib.YearOnYearInflationSwap_spread(self)

    def yoyDayCount(self):
        return _QuantLib.YearOnYearInflationSwap_yoyDayCount(self)

    def paymentCalendar(self):
        return _QuantLib.YearOnYearInflationSwap_paymentCalendar(self)

    def paymentConvention(self):
        return _QuantLib.YearOnYearInflationSwap_paymentConvention(self)

    def fixedLeg(self):
        return _QuantLib.YearOnYearInflationSwap_fixedLeg(self)

    def yoyLeg(self):
        return _QuantLib.YearOnYearInflationSwap_yoyLeg(self)
    __swig_destroy__ = _QuantLib.delete_YearOnYearInflationSwap
    __del__ = lambda self: None
YearOnYearInflationSwap_swigregister = _QuantLib.YearOnYearInflationSwap_swigregister
YearOnYearInflationSwap_swigregister(YearOnYearInflationSwap)

class ZeroCouponInflationSwap(Swap):
    __swig_setmethods__ = {}
    for _s in [Swap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZeroCouponInflationSwap, name, value)
    __swig_getmethods__ = {}
    for _s in [Swap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZeroCouponInflationSwap, name)
    __repr__ = _swig_repr
    Receiver = _QuantLib.ZeroCouponInflationSwap_Receiver
    Payer = _QuantLib.ZeroCouponInflationSwap_Payer

    def __init__(self, *args):
        this = _QuantLib.new_ZeroCouponInflationSwap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def type(self):
        return _QuantLib.ZeroCouponInflationSwap_type(self)

    def nominal(self):
        return _QuantLib.ZeroCouponInflationSwap_nominal(self)

    def startDate(self):
        return _QuantLib.ZeroCouponInflationSwap_startDate(self)

    def maturityDate(self):
        return _QuantLib.ZeroCouponInflationSwap_maturityDate(self)

    def fixedCalendar(self):
        return _QuantLib.ZeroCouponInflationSwap_fixedCalendar(self)

    def fixedConvention(self):
        return _QuantLib.ZeroCouponInflationSwap_fixedConvention(self)

    def dayCounter(self):
        return _QuantLib.ZeroCouponInflationSwap_dayCounter(self)

    def fixedRate(self):
        return _QuantLib.ZeroCouponInflationSwap_fixedRate(self)

    def inflationIndex(self):
        return _QuantLib.ZeroCouponInflationSwap_inflationIndex(self)

    def observationLag(self):
        return _QuantLib.ZeroCouponInflationSwap_observationLag(self)

    def adjustObservationDates(self):
        return _QuantLib.ZeroCouponInflationSwap_adjustObservationDates(self)

    def inflationCalendar(self):
        return _QuantLib.ZeroCouponInflationSwap_inflationCalendar(self)

    def inflationConvention(self):
        return _QuantLib.ZeroCouponInflationSwap_inflationConvention(self)

    def fixedLeg(self):
        return _QuantLib.ZeroCouponInflationSwap_fixedLeg(self)

    def inflationLeg(self):
        return _QuantLib.ZeroCouponInflationSwap_inflationLeg(self)

    def fixedLegNPV(self):
        return _QuantLib.ZeroCouponInflationSwap_fixedLegNPV(self)

    def inflationLegNPV(self):
        return _QuantLib.ZeroCouponInflationSwap_inflationLegNPV(self)

    def fairRate(self):
        return _QuantLib.ZeroCouponInflationSwap_fairRate(self)
    __swig_destroy__ = _QuantLib.delete_ZeroCouponInflationSwap
    __del__ = lambda self: None
ZeroCouponInflationSwap_swigregister = _QuantLib.ZeroCouponInflationSwap_swigregister
ZeroCouponInflationSwap_swigregister(ZeroCouponInflationSwap)

class _MakeOIS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _MakeOIS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _MakeOIS, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new__MakeOIS(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def makeOIS(self):
        return _QuantLib._MakeOIS_makeOIS(self)

    def receiveFixed(self, flag=True):
        return _QuantLib._MakeOIS_receiveFixed(self, flag)

    def withType(self, type):
        return _QuantLib._MakeOIS_withType(self, type)

    def withNominal(self, n):
        return _QuantLib._MakeOIS_withNominal(self, n)

    def withSettlementDays(self, settlementDays):
        return _QuantLib._MakeOIS_withSettlementDays(self, settlementDays)

    def withEffectiveDate(self, arg2):
        return _QuantLib._MakeOIS_withEffectiveDate(self, arg2)

    def withTerminationDate(self, arg2):
        return _QuantLib._MakeOIS_withTerminationDate(self, arg2)

    def withRule(self, r):
        return _QuantLib._MakeOIS_withRule(self, r)

    def withPaymentFrequency(self, f):
        return _QuantLib._MakeOIS_withPaymentFrequency(self, f)

    def withPaymentAdjustment(self, convention):
        return _QuantLib._MakeOIS_withPaymentAdjustment(self, convention)

    def withPaymentLag(self, lag):
        return _QuantLib._MakeOIS_withPaymentLag(self, lag)

    def withPaymentCalendar(self, cal):
        return _QuantLib._MakeOIS_withPaymentCalendar(self, cal)

    def withEndOfMonth(self, flag=True):
        return _QuantLib._MakeOIS_withEndOfMonth(self, flag)

    def withFixedLegDayCount(self, dc):
        return _QuantLib._MakeOIS_withFixedLegDayCount(self, dc)

    def withOvernightLegSpread(self, sp):
        return _QuantLib._MakeOIS_withOvernightLegSpread(self, sp)

    def withDiscountingTermStructure(self, discountingTermStructure):
        return _QuantLib._MakeOIS_withDiscountingTermStructure(self, discountingTermStructure)

    def withTelescopicValueDates(self, telescopicValueDates):
        return _QuantLib._MakeOIS_withTelescopicValueDates(self, telescopicValueDates)

    def withPricingEngine(self, engine):
        return _QuantLib._MakeOIS_withPricingEngine(self, engine)
    __swig_destroy__ = _QuantLib.delete__MakeOIS
    __del__ = lambda self: None
_MakeOIS_swigregister = _QuantLib._MakeOIS_swigregister
_MakeOIS_swigregister(_MakeOIS)


def MakeOIS(
        swapTenor,
        overnightIndex,
        fixedRate=None,
        fwdStart=Period(0, Days),
        receiveFixed=True,
        swapType=OvernightIndexedSwap.Payer,
        nominal=1.0,
        settlementDays=2,
        effectiveDate=None,
        terminationDate=None,
        dateGenerationRule=DateGeneration.Backward,
        paymentFrequency=Annual,
        paymentAdjustmentConvention=Following,
        paymentLag=0,
        paymentCalendar=None,
        endOfMonth=True,
        fixedLegDayCount=None,
        overnightLegSpread=0.0,
        discountingTermStructure=None,
        telescopicValueDates=False,
        pricingEngine=None):
    mv = _MakeOIS(
        swapTenor, overnightIndex, fixedRate, fwdStart)

    if not receiveFixed:
        mv.receiveFixed(receiveFixed)
    if swapType != OvernightIndexedSwap.Payer:
        mv.withType(swapType)
    if nominal != 1.0:
        mv.withNominal(nominal)
    if settlementDays != 2:
        mv.withSettlementDays(settlementDays)
    if effectiveDate is not None:
        mv.withEffectiveDate(effectiveDate)
    if terminationDate is not None:
        mv.withTerminationDate(terminationDate)
    if dateGenerationRule != DateGeneration.Backward:
        mv.withRule(dateGenerationRule)
    if paymentFrequency != Annual:
        mv.withPaymentFrequency(paymentFrequency)
    if paymentAdjustmentConvention != Following:
        mv.withPaymentAdjustment(paymentAdjustmentConvention)
    if paymentLag != 0:
        mv.withPaymentLag(paymentLag)
    if paymentCalendar is not None:
        mv.withPaymentCalendar(paymentCalendar)
    if not endOfMonth:
        mv.withEndOfMonth(endOfMonth)
    if fixedLegDayCount is not None:
        mv.withFixedLegDayCount(fixedLegDayCount)
    else:
        mv.withFixedLegDayCount(overnightIndex.dayCounter())
    if overnightLegSpread != 0.0:
        mv.withOvernightLegSpread(overnightLegSpread)
    if discountingTermStructure is not None:
        mv.withDiscountingTermStructure(discountingTermStructure)
    if telescopicValueDates:
        mv.withTelescopicValueDates(telescopicValueDates)
    if pricingEngine is not None:
        mv.withPricingEngine(pricingEngine)

    return mv.makeOIS()

class _MakeVanillaSwap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _MakeVanillaSwap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _MakeVanillaSwap, name)
    __repr__ = _swig_repr

    def __init__(self, swapTenor, index, fixedRate, forwardStart):
        this = _QuantLib.new__MakeVanillaSwap(swapTenor, index, fixedRate, forwardStart)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def makeVanillaSwap(self):
        return _QuantLib._MakeVanillaSwap_makeVanillaSwap(self)

    def receiveFixed(self, flag=True):
        return _QuantLib._MakeVanillaSwap_receiveFixed(self, flag)

    def withType(self, type):
        return _QuantLib._MakeVanillaSwap_withType(self, type)

    def withNominal(self, n):
        return _QuantLib._MakeVanillaSwap_withNominal(self, n)

    def withSettlementDays(self, settlementDays):
        return _QuantLib._MakeVanillaSwap_withSettlementDays(self, settlementDays)

    def withEffectiveDate(self, arg2):
        return _QuantLib._MakeVanillaSwap_withEffectiveDate(self, arg2)

    def withTerminationDate(self, arg2):
        return _QuantLib._MakeVanillaSwap_withTerminationDate(self, arg2)

    def withRule(self, r):
        return _QuantLib._MakeVanillaSwap_withRule(self, r)

    def withFixedLegTenor(self, t):
        return _QuantLib._MakeVanillaSwap_withFixedLegTenor(self, t)

    def withFixedLegCalendar(self, cal):
        return _QuantLib._MakeVanillaSwap_withFixedLegCalendar(self, cal)

    def withFixedLegConvention(self, bdc):
        return _QuantLib._MakeVanillaSwap_withFixedLegConvention(self, bdc)

    def withFixedLegTerminationDateConvention(self, bdc):
        return _QuantLib._MakeVanillaSwap_withFixedLegTerminationDateConvention(self, bdc)

    def withFixedLegRule(self, r):
        return _QuantLib._MakeVanillaSwap_withFixedLegRule(self, r)

    def withFixedLegEndOfMonth(self, flag=True):
        return _QuantLib._MakeVanillaSwap_withFixedLegEndOfMonth(self, flag)

    def withFixedLegFirstDate(self, d):
        return _QuantLib._MakeVanillaSwap_withFixedLegFirstDate(self, d)

    def withFixedLegNextToLastDate(self, d):
        return _QuantLib._MakeVanillaSwap_withFixedLegNextToLastDate(self, d)

    def withFixedLegDayCount(self, dc):
        return _QuantLib._MakeVanillaSwap_withFixedLegDayCount(self, dc)

    def withFloatingLegTenor(self, t):
        return _QuantLib._MakeVanillaSwap_withFloatingLegTenor(self, t)

    def withFloatingLegCalendar(self, cal):
        return _QuantLib._MakeVanillaSwap_withFloatingLegCalendar(self, cal)

    def withFloatingLegConvention(self, bdc):
        return _QuantLib._MakeVanillaSwap_withFloatingLegConvention(self, bdc)

    def withFloatingLegTerminationDateConvention(self, bdc):
        return _QuantLib._MakeVanillaSwap_withFloatingLegTerminationDateConvention(self, bdc)

    def withFloatingLegRule(self, r):
        return _QuantLib._MakeVanillaSwap_withFloatingLegRule(self, r)

    def withFloatingLegEndOfMonth(self, flag=True):
        return _QuantLib._MakeVanillaSwap_withFloatingLegEndOfMonth(self, flag)

    def withFloatingLegFirstDate(self, d):
        return _QuantLib._MakeVanillaSwap_withFloatingLegFirstDate(self, d)

    def withFloatingLegNextToLastDate(self, d):
        return _QuantLib._MakeVanillaSwap_withFloatingLegNextToLastDate(self, d)

    def withFloatingLegDayCount(self, dc):
        return _QuantLib._MakeVanillaSwap_withFloatingLegDayCount(self, dc)

    def withFloatingLegSpread(self, sp):
        return _QuantLib._MakeVanillaSwap_withFloatingLegSpread(self, sp)

    def withDiscountingTermStructure(self, discountCurve):
        return _QuantLib._MakeVanillaSwap_withDiscountingTermStructure(self, discountCurve)

    def withPricingEngine(self, engine):
        return _QuantLib._MakeVanillaSwap_withPricingEngine(self, engine)
    __swig_destroy__ = _QuantLib.delete__MakeVanillaSwap
    __del__ = lambda self: None
_MakeVanillaSwap_swigregister = _QuantLib._MakeVanillaSwap_swigregister
_MakeVanillaSwap_swigregister(_MakeVanillaSwap)


def MakeVanillaSwap(
        swapTenor, iborIndex, fixedRate, forwardStart,
        receiveFixed=None, swapType=None, Nominal=None, settlementDays=None,
        effectiveDate=None, terminationDate=None, dateGenerationRule=None,
        fixedLegTenor=None, fixedLegCalendar=None, fixedLegConvention=None,
        fixedLegDayCount=None, floatingLegTenor=None, floatingLegCalendar=None,
        floatingLegConvention=None, floatingLegDayCount=None, floatingLegSpread=None,
        discountingTermStructure=None, pricingEngine=None,
        fixedLegTerminationDateConvention=None,  fixedLegDateGenRule=None,
        fixedLegEndOfMonth=None, fixedLegFirstDate=None, fixedLegNextToLastDate=None,
        floatingLegTerminationDateConvention=None,  floatingLegDateGenRule=None,
        floatingLegEndOfMonth=None, floatingLegFirstDate=None, floatingLegNextToLastDate=None):
    mv = _MakeVanillaSwap(swapTenor, iborIndex, fixedRate, forwardStart)
    if receiveFixed is not None:
        mv.receiveFixed(receiveFixed)
    if swapType is not None:
        mv.withType(swapType)
    if Nominal is not None:
        mv.withNominal(Nominal)
    if settlementDays is not None:
        mv.withSettlementDays(settlementDays)
    if effectiveDate is not None:
        mv.withEffectiveDate(effectiveDate)
    if terminationDate is not None:
        mv.withTerminationDate(terminationDate)
    if dateGenerationRule is not None:
        mv.withRule(dateGenerationRule)
    if fixedLegTenor is not None:
        mv.withFixedLegTenor(fixedLegTenor)
    if fixedLegCalendar is not None:
        mv.withFixedLegCalendar(fixedLegCalendar)
    if fixedLegConvention is not None:
        mv.withFixedLegConvention(fixedLegConvention)
    if fixedLegDayCount is not None:
        mv.withFixedLegDayCount(fixedLegDayCount)
    if floatingLegTenor is not None:
        mv.withFloatingLegTenor(floatingLegTenor)
    if floatingLegCalendar is not None:
        mv.withFloatingLegCalendar(floatingLegCalendar)
    if floatingLegConvention is not None:
        mv.withFloatingLegConvention(floatingLegConvention)
    if floatingLegDayCount is not None:
        mv.withFloatingLegDayCount(floatingLegDayCount)
    if floatingLegSpread is not None:
        mv.withFloatingLegSpread(floatingLegSpread)
    if discountingTermStructure is not None:
        mv.withDiscountingTermStructure(discountingTermStructure)
    if pricingEngine is not None:
        mv.withPricingEngine(pricingEngine)
    if fixedLegTerminationDateConvention is not None:
        mv.withFixedLegTerminationDateConvention(fixedLegTerminationDateConvention)
    if fixedLegDateGenRule is not None:
        mv.withFixedLegRule(fixedLegDateGenRule)
    if fixedLegEndOfMonth is not None:
        mv.withFixedLegEndOfMonth(fixedLegEndOfMonth)
    if fixedLegFirstDate is not None:
        mv.withFixedLegFirstDate(fixedLegFirstDate)
    if fixedLegNextToLastDate is not None:
        mv.withFixedLegNextToLastDate(fixedLegNextToLastDate)
    if floatingLegTerminationDateConvention is not None:
        mv.withFloatingLegTerminationDateConvention(floatingLegTerminationDateConvention)
    if floatingLegDateGenRule is not None:
        mv.withFloatingLegRule(floatingLegDateGenRule)
    if floatingLegEndOfMonth is not None:
        mv.withFloatingLegEndOfMonth(floatingLegEndOfMonth)
    if floatingLegFirstDate is not None:
        mv.withFloatingLegFirstDate(floatingLegFirstDate)
    if floatingLegNextToLastDate is not None:
        mv.withFloatingLegNextToLastDate(floatingLegNextToLastDate)
    return mv.makeVanillaSwap()

class YoYInflationCap(YoYInflationCapFloor):
    __swig_setmethods__ = {}
    for _s in [YoYInflationCapFloor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YoYInflationCap, name, value)
    __swig_getmethods__ = {}
    for _s in [YoYInflationCapFloor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YoYInflationCap, name)
    __repr__ = _swig_repr

    def __init__(self, leg, capRates):
        this = _QuantLib.new_YoYInflationCap(leg, capRates)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_YoYInflationCap
    __del__ = lambda self: None
YoYInflationCap_swigregister = _QuantLib.YoYInflationCap_swigregister
YoYInflationCap_swigregister(YoYInflationCap)

class YoYInflationFloor(YoYInflationCapFloor):
    __swig_setmethods__ = {}
    for _s in [YoYInflationCapFloor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YoYInflationFloor, name, value)
    __swig_getmethods__ = {}
    for _s in [YoYInflationCapFloor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YoYInflationFloor, name)
    __repr__ = _swig_repr

    def __init__(self, leg, floorRates):
        this = _QuantLib.new_YoYInflationFloor(leg, floorRates)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_YoYInflationFloor
    __del__ = lambda self: None
YoYInflationFloor_swigregister = _QuantLib.YoYInflationFloor_swigregister
YoYInflationFloor_swigregister(YoYInflationFloor)

class YoYInflationCollar(YoYInflationCapFloor):
    __swig_setmethods__ = {}
    for _s in [YoYInflationCapFloor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YoYInflationCollar, name, value)
    __swig_getmethods__ = {}
    for _s in [YoYInflationCapFloor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YoYInflationCollar, name)
    __repr__ = _swig_repr

    def __init__(self, leg, capRates, floorRates):
        this = _QuantLib.new_YoYInflationCollar(leg, capRates, floorRates)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_YoYInflationCollar
    __del__ = lambda self: None
YoYInflationCollar_swigregister = _QuantLib.YoYInflationCollar_swigregister
YoYInflationCollar_swigregister(YoYInflationCollar)

class SegmentIntegral(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SegmentIntegral, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SegmentIntegral, name)
    __repr__ = _swig_repr

    def __init__(self, intervals):
        this = _QuantLib.new_SegmentIntegral(intervals)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, pyFunction, a, b):
        return _QuantLib.SegmentIntegral___call__(self, pyFunction, a, b)
    __swig_destroy__ = _QuantLib.delete_SegmentIntegral
    __del__ = lambda self: None
SegmentIntegral_swigregister = _QuantLib.SegmentIntegral_swigregister
SegmentIntegral_swigregister(SegmentIntegral)

class TrapezoidIntegralDefault(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrapezoidIntegralDefault, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TrapezoidIntegralDefault, name)
    __repr__ = _swig_repr

    def __init__(self, accuracy, maxIterations):
        this = _QuantLib.new_TrapezoidIntegralDefault(accuracy, maxIterations)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, pyFunction, a, b):
        return _QuantLib.TrapezoidIntegralDefault___call__(self, pyFunction, a, b)
    __swig_destroy__ = _QuantLib.delete_TrapezoidIntegralDefault
    __del__ = lambda self: None
TrapezoidIntegralDefault_swigregister = _QuantLib.TrapezoidIntegralDefault_swigregister
TrapezoidIntegralDefault_swigregister(TrapezoidIntegralDefault)

class TrapezoidIntegralMidPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrapezoidIntegralMidPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TrapezoidIntegralMidPoint, name)
    __repr__ = _swig_repr

    def __init__(self, accuracy, maxIterations):
        this = _QuantLib.new_TrapezoidIntegralMidPoint(accuracy, maxIterations)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, pyFunction, a, b):
        return _QuantLib.TrapezoidIntegralMidPoint___call__(self, pyFunction, a, b)
    __swig_destroy__ = _QuantLib.delete_TrapezoidIntegralMidPoint
    __del__ = lambda self: None
TrapezoidIntegralMidPoint_swigregister = _QuantLib.TrapezoidIntegralMidPoint_swigregister
TrapezoidIntegralMidPoint_swigregister(TrapezoidIntegralMidPoint)

class SimpsonIntegral(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpsonIntegral, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimpsonIntegral, name)
    __repr__ = _swig_repr

    def __init__(self, accuracy, maxIterations):
        this = _QuantLib.new_SimpsonIntegral(accuracy, maxIterations)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, pyFunction, a, b):
        return _QuantLib.SimpsonIntegral___call__(self, pyFunction, a, b)
    __swig_destroy__ = _QuantLib.delete_SimpsonIntegral
    __del__ = lambda self: None
SimpsonIntegral_swigregister = _QuantLib.SimpsonIntegral_swigregister
SimpsonIntegral_swigregister(SimpsonIntegral)

class GaussKronrodAdaptive(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussKronrodAdaptive, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaussKronrodAdaptive, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_GaussKronrodAdaptive(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, pyFunction, a, b):
        return _QuantLib.GaussKronrodAdaptive___call__(self, pyFunction, a, b)
    __swig_destroy__ = _QuantLib.delete_GaussKronrodAdaptive
    __del__ = lambda self: None
GaussKronrodAdaptive_swigregister = _QuantLib.GaussKronrodAdaptive_swigregister
GaussKronrodAdaptive_swigregister(GaussKronrodAdaptive)

class GaussKronrodNonAdaptive(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussKronrodNonAdaptive, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaussKronrodNonAdaptive, name)
    __repr__ = _swig_repr

    def __init__(self, absoluteAccuracy, maxEvaluations, relativeAccuracy):
        this = _QuantLib.new_GaussKronrodNonAdaptive(absoluteAccuracy, maxEvaluations, relativeAccuracy)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, pyFunction, a, b):
        return _QuantLib.GaussKronrodNonAdaptive___call__(self, pyFunction, a, b)
    __swig_destroy__ = _QuantLib.delete_GaussKronrodNonAdaptive
    __del__ = lambda self: None
GaussKronrodNonAdaptive_swigregister = _QuantLib.GaussKronrodNonAdaptive_swigregister
GaussKronrodNonAdaptive_swigregister(GaussKronrodNonAdaptive)

class GaussLobattoIntegral(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussLobattoIntegral, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaussLobattoIntegral, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_GaussLobattoIntegral(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, pyFunction, a, b):
        return _QuantLib.GaussLobattoIntegral___call__(self, pyFunction, a, b)
    __swig_destroy__ = _QuantLib.delete_GaussLobattoIntegral
    __del__ = lambda self: None
GaussLobattoIntegral_swigregister = _QuantLib.GaussLobattoIntegral_swigregister
GaussLobattoIntegral_swigregister(GaussLobattoIntegral)

class GaussLaguerreIntegration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussLaguerreIntegration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaussLaguerreIntegration, name)
    __repr__ = _swig_repr

    def __init__(self, n, s=0.0):
        this = _QuantLib.new_GaussLaguerreIntegration(n, s)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, pyFunction):
        return _QuantLib.GaussLaguerreIntegration___call__(self, pyFunction)
    __swig_destroy__ = _QuantLib.delete_GaussLaguerreIntegration
    __del__ = lambda self: None
GaussLaguerreIntegration_swigregister = _QuantLib.GaussLaguerreIntegration_swigregister
GaussLaguerreIntegration_swigregister(GaussLaguerreIntegration)

class GaussHermiteIntegration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussHermiteIntegration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaussHermiteIntegration, name)
    __repr__ = _swig_repr

    def __init__(self, n, mu=0.0):
        this = _QuantLib.new_GaussHermiteIntegration(n, mu)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, pyFunction):
        return _QuantLib.GaussHermiteIntegration___call__(self, pyFunction)
    __swig_destroy__ = _QuantLib.delete_GaussHermiteIntegration
    __del__ = lambda self: None
GaussHermiteIntegration_swigregister = _QuantLib.GaussHermiteIntegration_swigregister
GaussHermiteIntegration_swigregister(GaussHermiteIntegration)

class GaussJacobiIntegration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussJacobiIntegration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaussJacobiIntegration, name)
    __repr__ = _swig_repr

    def __init__(self, n, alpha, beta):
        this = _QuantLib.new_GaussJacobiIntegration(n, alpha, beta)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, pyFunction):
        return _QuantLib.GaussJacobiIntegration___call__(self, pyFunction)
    __swig_destroy__ = _QuantLib.delete_GaussJacobiIntegration
    __del__ = lambda self: None
GaussJacobiIntegration_swigregister = _QuantLib.GaussJacobiIntegration_swigregister
GaussJacobiIntegration_swigregister(GaussJacobiIntegration)

class GaussHyperbolicIntegration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussHyperbolicIntegration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaussHyperbolicIntegration, name)
    __repr__ = _swig_repr

    def __init__(self, n):
        this = _QuantLib.new_GaussHyperbolicIntegration(n)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, pyFunction):
        return _QuantLib.GaussHyperbolicIntegration___call__(self, pyFunction)
    __swig_destroy__ = _QuantLib.delete_GaussHyperbolicIntegration
    __del__ = lambda self: None
GaussHyperbolicIntegration_swigregister = _QuantLib.GaussHyperbolicIntegration_swigregister
GaussHyperbolicIntegration_swigregister(GaussHyperbolicIntegration)

class GaussLegendreIntegration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussLegendreIntegration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaussLegendreIntegration, name)
    __repr__ = _swig_repr

    def __init__(self, n):
        this = _QuantLib.new_GaussLegendreIntegration(n)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, pyFunction):
        return _QuantLib.GaussLegendreIntegration___call__(self, pyFunction)
    __swig_destroy__ = _QuantLib.delete_GaussLegendreIntegration
    __del__ = lambda self: None
GaussLegendreIntegration_swigregister = _QuantLib.GaussLegendreIntegration_swigregister
GaussLegendreIntegration_swigregister(GaussLegendreIntegration)

class GaussChebyshevIntegration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussChebyshevIntegration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaussChebyshevIntegration, name)
    __repr__ = _swig_repr

    def __init__(self, n):
        this = _QuantLib.new_GaussChebyshevIntegration(n)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, pyFunction):
        return _QuantLib.GaussChebyshevIntegration___call__(self, pyFunction)
    __swig_destroy__ = _QuantLib.delete_GaussChebyshevIntegration
    __del__ = lambda self: None
GaussChebyshevIntegration_swigregister = _QuantLib.GaussChebyshevIntegration_swigregister
GaussChebyshevIntegration_swigregister(GaussChebyshevIntegration)

class GaussChebyshev2ndIntegration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussChebyshev2ndIntegration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaussChebyshev2ndIntegration, name)
    __repr__ = _swig_repr

    def __init__(self, n):
        this = _QuantLib.new_GaussChebyshev2ndIntegration(n)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, pyFunction):
        return _QuantLib.GaussChebyshev2ndIntegration___call__(self, pyFunction)
    __swig_destroy__ = _QuantLib.delete_GaussChebyshev2ndIntegration
    __del__ = lambda self: None
GaussChebyshev2ndIntegration_swigregister = _QuantLib.GaussChebyshev2ndIntegration_swigregister
GaussChebyshev2ndIntegration_swigregister(GaussChebyshev2ndIntegration)

class GaussGegenbauerIntegration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussGegenbauerIntegration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaussGegenbauerIntegration, name)
    __repr__ = _swig_repr

    def __init__(self, n, arg3):
        this = _QuantLib.new_GaussGegenbauerIntegration(n, arg3)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, pyFunction):
        return _QuantLib.GaussGegenbauerIntegration___call__(self, pyFunction)
    __swig_destroy__ = _QuantLib.delete_GaussGegenbauerIntegration
    __del__ = lambda self: None
GaussGegenbauerIntegration_swigregister = _QuantLib.GaussGegenbauerIntegration_swigregister
GaussGegenbauerIntegration_swigregister(GaussGegenbauerIntegration)

class InterestRate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterestRate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InterestRate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_InterestRate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def rate(self):
        return _QuantLib.InterestRate_rate(self)

    def dayCounter(self):
        return _QuantLib.InterestRate_dayCounter(self)

    def compounding(self):
        return _QuantLib.InterestRate_compounding(self)

    def frequency(self):
        return _QuantLib.InterestRate_frequency(self)

    def discountFactor(self, *args):
        return _QuantLib.InterestRate_discountFactor(self, *args)

    def compoundFactor(self, *args):
        return _QuantLib.InterestRate_compoundFactor(self, *args)
    if _newclass:
        impliedRate = staticmethod(_QuantLib.InterestRate_impliedRate)
    else:
        impliedRate = _QuantLib.InterestRate_impliedRate

    def equivalentRate(self, *args):
        return _QuantLib.InterestRate_equivalentRate(self, *args)

    def __str__(self):
        return _QuantLib.InterestRate___str__(self)
    __swig_destroy__ = _QuantLib.delete_InterestRate
    __del__ = lambda self: None
InterestRate_swigregister = _QuantLib.InterestRate_swigregister
InterestRate_swigregister(InterestRate)

def InterestRate_impliedRate(*args):
    return _QuantLib.InterestRate_impliedRate(*args)
InterestRate_impliedRate = _QuantLib.InterestRate_impliedRate

class InterestRateVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterestRateVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InterestRateVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.InterestRateVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.InterestRateVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.InterestRateVector___bool__(self)

    def __len__(self):
        return _QuantLib.InterestRateVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.InterestRateVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.InterestRateVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.InterestRateVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.InterestRateVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.InterestRateVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.InterestRateVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.InterestRateVector_pop(self)

    def append(self, x):
        return _QuantLib.InterestRateVector_append(self, x)

    def empty(self):
        return _QuantLib.InterestRateVector_empty(self)

    def size(self):
        return _QuantLib.InterestRateVector_size(self)

    def swap(self, v):
        return _QuantLib.InterestRateVector_swap(self, v)

    def begin(self):
        return _QuantLib.InterestRateVector_begin(self)

    def end(self):
        return _QuantLib.InterestRateVector_end(self)

    def rbegin(self):
        return _QuantLib.InterestRateVector_rbegin(self)

    def rend(self):
        return _QuantLib.InterestRateVector_rend(self)

    def clear(self):
        return _QuantLib.InterestRateVector_clear(self)

    def get_allocator(self):
        return _QuantLib.InterestRateVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.InterestRateVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.InterestRateVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_InterestRateVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.InterestRateVector_push_back(self, x)

    def front(self):
        return _QuantLib.InterestRateVector_front(self)

    def back(self):
        return _QuantLib.InterestRateVector_back(self)

    def assign(self, n, x):
        return _QuantLib.InterestRateVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.InterestRateVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.InterestRateVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.InterestRateVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.InterestRateVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_InterestRateVector
    __del__ = lambda self: None
InterestRateVector_swigregister = _QuantLib.InterestRateVector_swigregister
InterestRateVector_swigregister(InterestRateVector)

class BackwardFlatInterpolation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BackwardFlatInterpolation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BackwardFlatInterpolation, name)
    __repr__ = _swig_repr

    def __init__(self, x, y):
        this = _QuantLib.new_BackwardFlatInterpolation(x, y)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x, allowExtrapolation=False):
        return _QuantLib.BackwardFlatInterpolation___call__(self, x, allowExtrapolation)
    __swig_destroy__ = _QuantLib.delete_BackwardFlatInterpolation
    __del__ = lambda self: None
BackwardFlatInterpolation_swigregister = _QuantLib.BackwardFlatInterpolation_swigregister
BackwardFlatInterpolation_swigregister(BackwardFlatInterpolation)

class CubicNaturalSpline(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CubicNaturalSpline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CubicNaturalSpline, name)
    __repr__ = _swig_repr

    def __init__(self, x, y):
        this = _QuantLib.new_CubicNaturalSpline(x, y)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x, allowExtrapolation=False):
        return _QuantLib.CubicNaturalSpline___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        return _QuantLib.CubicNaturalSpline_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        return _QuantLib.CubicNaturalSpline_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        return _QuantLib.CubicNaturalSpline_primitive(self, x, extrapolate)
    __swig_destroy__ = _QuantLib.delete_CubicNaturalSpline
    __del__ = lambda self: None
CubicNaturalSpline_swigregister = _QuantLib.CubicNaturalSpline_swigregister
CubicNaturalSpline_swigregister(CubicNaturalSpline)

class ForwardFlatInterpolation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForwardFlatInterpolation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ForwardFlatInterpolation, name)
    __repr__ = _swig_repr

    def __init__(self, x, y):
        this = _QuantLib.new_ForwardFlatInterpolation(x, y)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x, allowExtrapolation=False):
        return _QuantLib.ForwardFlatInterpolation___call__(self, x, allowExtrapolation)
    __swig_destroy__ = _QuantLib.delete_ForwardFlatInterpolation
    __del__ = lambda self: None
ForwardFlatInterpolation_swigregister = _QuantLib.ForwardFlatInterpolation_swigregister
ForwardFlatInterpolation_swigregister(ForwardFlatInterpolation)

class FritschButlandCubic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FritschButlandCubic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FritschButlandCubic, name)
    __repr__ = _swig_repr

    def __init__(self, x, y):
        this = _QuantLib.new_FritschButlandCubic(x, y)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x, allowExtrapolation=False):
        return _QuantLib.FritschButlandCubic___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        return _QuantLib.FritschButlandCubic_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        return _QuantLib.FritschButlandCubic_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        return _QuantLib.FritschButlandCubic_primitive(self, x, extrapolate)
    __swig_destroy__ = _QuantLib.delete_FritschButlandCubic
    __del__ = lambda self: None
FritschButlandCubic_swigregister = _QuantLib.FritschButlandCubic_swigregister
FritschButlandCubic_swigregister(FritschButlandCubic)

class FritschButlandLogCubic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FritschButlandLogCubic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FritschButlandLogCubic, name)
    __repr__ = _swig_repr

    def __init__(self, x, y):
        this = _QuantLib.new_FritschButlandLogCubic(x, y)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x, allowExtrapolation=False):
        return _QuantLib.FritschButlandLogCubic___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        return _QuantLib.FritschButlandLogCubic_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        return _QuantLib.FritschButlandLogCubic_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        return _QuantLib.FritschButlandLogCubic_primitive(self, x, extrapolate)
    __swig_destroy__ = _QuantLib.delete_FritschButlandLogCubic
    __del__ = lambda self: None
FritschButlandLogCubic_swigregister = _QuantLib.FritschButlandLogCubic_swigregister
FritschButlandLogCubic_swigregister(FritschButlandLogCubic)

class KrugerCubic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KrugerCubic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KrugerCubic, name)
    __repr__ = _swig_repr

    def __init__(self, x, y):
        this = _QuantLib.new_KrugerCubic(x, y)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x, allowExtrapolation=False):
        return _QuantLib.KrugerCubic___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        return _QuantLib.KrugerCubic_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        return _QuantLib.KrugerCubic_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        return _QuantLib.KrugerCubic_primitive(self, x, extrapolate)
    __swig_destroy__ = _QuantLib.delete_KrugerCubic
    __del__ = lambda self: None
KrugerCubic_swigregister = _QuantLib.KrugerCubic_swigregister
KrugerCubic_swigregister(KrugerCubic)

class KrugerLogCubic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KrugerLogCubic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KrugerLogCubic, name)
    __repr__ = _swig_repr

    def __init__(self, x, y):
        this = _QuantLib.new_KrugerLogCubic(x, y)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x, allowExtrapolation=False):
        return _QuantLib.KrugerLogCubic___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        return _QuantLib.KrugerLogCubic_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        return _QuantLib.KrugerLogCubic_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        return _QuantLib.KrugerLogCubic_primitive(self, x, extrapolate)
    __swig_destroy__ = _QuantLib.delete_KrugerLogCubic
    __del__ = lambda self: None
KrugerLogCubic_swigregister = _QuantLib.KrugerLogCubic_swigregister
KrugerLogCubic_swigregister(KrugerLogCubic)

class LinearInterpolation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearInterpolation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LinearInterpolation, name)
    __repr__ = _swig_repr

    def __init__(self, x, y):
        this = _QuantLib.new_LinearInterpolation(x, y)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x, allowExtrapolation=False):
        return _QuantLib.LinearInterpolation___call__(self, x, allowExtrapolation)
    __swig_destroy__ = _QuantLib.delete_LinearInterpolation
    __del__ = lambda self: None
LinearInterpolation_swigregister = _QuantLib.LinearInterpolation_swigregister
LinearInterpolation_swigregister(LinearInterpolation)

class LogCubicNaturalSpline(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogCubicNaturalSpline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogCubicNaturalSpline, name)
    __repr__ = _swig_repr

    def __init__(self, x, y):
        this = _QuantLib.new_LogCubicNaturalSpline(x, y)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x, allowExtrapolation=False):
        return _QuantLib.LogCubicNaturalSpline___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        return _QuantLib.LogCubicNaturalSpline_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        return _QuantLib.LogCubicNaturalSpline_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        return _QuantLib.LogCubicNaturalSpline_primitive(self, x, extrapolate)
    __swig_destroy__ = _QuantLib.delete_LogCubicNaturalSpline
    __del__ = lambda self: None
LogCubicNaturalSpline_swigregister = _QuantLib.LogCubicNaturalSpline_swigregister
LogCubicNaturalSpline_swigregister(LogCubicNaturalSpline)

class LogLinearInterpolation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogLinearInterpolation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogLinearInterpolation, name)
    __repr__ = _swig_repr

    def __init__(self, x, y):
        this = _QuantLib.new_LogLinearInterpolation(x, y)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x, allowExtrapolation=False):
        return _QuantLib.LogLinearInterpolation___call__(self, x, allowExtrapolation)
    __swig_destroy__ = _QuantLib.delete_LogLinearInterpolation
    __del__ = lambda self: None
LogLinearInterpolation_swigregister = _QuantLib.LogLinearInterpolation_swigregister
LogLinearInterpolation_swigregister(LogLinearInterpolation)

class LogParabolic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogParabolic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogParabolic, name)
    __repr__ = _swig_repr

    def __init__(self, x, y):
        this = _QuantLib.new_LogParabolic(x, y)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x, allowExtrapolation=False):
        return _QuantLib.LogParabolic___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        return _QuantLib.LogParabolic_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        return _QuantLib.LogParabolic_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        return _QuantLib.LogParabolic_primitive(self, x, extrapolate)
    __swig_destroy__ = _QuantLib.delete_LogParabolic
    __del__ = lambda self: None
LogParabolic_swigregister = _QuantLib.LogParabolic_swigregister
LogParabolic_swigregister(LogParabolic)

class MonotonicCubicNaturalSpline(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonotonicCubicNaturalSpline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MonotonicCubicNaturalSpline, name)
    __repr__ = _swig_repr

    def __init__(self, x, y):
        this = _QuantLib.new_MonotonicCubicNaturalSpline(x, y)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x, allowExtrapolation=False):
        return _QuantLib.MonotonicCubicNaturalSpline___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        return _QuantLib.MonotonicCubicNaturalSpline_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        return _QuantLib.MonotonicCubicNaturalSpline_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        return _QuantLib.MonotonicCubicNaturalSpline_primitive(self, x, extrapolate)
    __swig_destroy__ = _QuantLib.delete_MonotonicCubicNaturalSpline
    __del__ = lambda self: None
MonotonicCubicNaturalSpline_swigregister = _QuantLib.MonotonicCubicNaturalSpline_swigregister
MonotonicCubicNaturalSpline_swigregister(MonotonicCubicNaturalSpline)

class MonotonicLogCubicNaturalSpline(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonotonicLogCubicNaturalSpline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MonotonicLogCubicNaturalSpline, name)
    __repr__ = _swig_repr

    def __init__(self, x, y):
        this = _QuantLib.new_MonotonicLogCubicNaturalSpline(x, y)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x, allowExtrapolation=False):
        return _QuantLib.MonotonicLogCubicNaturalSpline___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        return _QuantLib.MonotonicLogCubicNaturalSpline_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        return _QuantLib.MonotonicLogCubicNaturalSpline_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        return _QuantLib.MonotonicLogCubicNaturalSpline_primitive(self, x, extrapolate)
    __swig_destroy__ = _QuantLib.delete_MonotonicLogCubicNaturalSpline
    __del__ = lambda self: None
MonotonicLogCubicNaturalSpline_swigregister = _QuantLib.MonotonicLogCubicNaturalSpline_swigregister
MonotonicLogCubicNaturalSpline_swigregister(MonotonicLogCubicNaturalSpline)

class MonotonicLogParabolic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonotonicLogParabolic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MonotonicLogParabolic, name)
    __repr__ = _swig_repr

    def __init__(self, x, y):
        this = _QuantLib.new_MonotonicLogParabolic(x, y)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x, allowExtrapolation=False):
        return _QuantLib.MonotonicLogParabolic___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        return _QuantLib.MonotonicLogParabolic_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        return _QuantLib.MonotonicLogParabolic_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        return _QuantLib.MonotonicLogParabolic_primitive(self, x, extrapolate)
    __swig_destroy__ = _QuantLib.delete_MonotonicLogParabolic
    __del__ = lambda self: None
MonotonicLogParabolic_swigregister = _QuantLib.MonotonicLogParabolic_swigregister
MonotonicLogParabolic_swigregister(MonotonicLogParabolic)

class MonotonicParabolic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonotonicParabolic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MonotonicParabolic, name)
    __repr__ = _swig_repr

    def __init__(self, x, y):
        this = _QuantLib.new_MonotonicParabolic(x, y)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x, allowExtrapolation=False):
        return _QuantLib.MonotonicParabolic___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        return _QuantLib.MonotonicParabolic_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        return _QuantLib.MonotonicParabolic_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        return _QuantLib.MonotonicParabolic_primitive(self, x, extrapolate)
    __swig_destroy__ = _QuantLib.delete_MonotonicParabolic
    __del__ = lambda self: None
MonotonicParabolic_swigregister = _QuantLib.MonotonicParabolic_swigregister
MonotonicParabolic_swigregister(MonotonicParabolic)

class Parabolic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Parabolic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Parabolic, name)
    __repr__ = _swig_repr

    def __init__(self, x, y):
        this = _QuantLib.new_Parabolic(x, y)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x, allowExtrapolation=False):
        return _QuantLib.Parabolic___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        return _QuantLib.Parabolic_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        return _QuantLib.Parabolic_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        return _QuantLib.Parabolic_primitive(self, x, extrapolate)
    __swig_destroy__ = _QuantLib.delete_Parabolic
    __del__ = lambda self: None
Parabolic_swigregister = _QuantLib.Parabolic_swigregister
Parabolic_swigregister(Parabolic)

class BicubicSpline(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BicubicSpline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BicubicSpline, name)
    __repr__ = _swig_repr

    def __init__(self, x, y, m):
        this = _QuantLib.new_BicubicSpline(x, y, m)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x, y, allowExtrapolation=False):
        return _QuantLib.BicubicSpline___call__(self, x, y, allowExtrapolation)
    __swig_destroy__ = _QuantLib.delete_BicubicSpline
    __del__ = lambda self: None
BicubicSpline_swigregister = _QuantLib.BicubicSpline_swigregister
BicubicSpline_swigregister(BicubicSpline)

class BilinearInterpolation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BilinearInterpolation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BilinearInterpolation, name)
    __repr__ = _swig_repr

    def __init__(self, x, y, m):
        this = _QuantLib.new_BilinearInterpolation(x, y, m)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x, y, allowExtrapolation=False):
        return _QuantLib.BilinearInterpolation___call__(self, x, y, allowExtrapolation)
    __swig_destroy__ = _QuantLib.delete_BilinearInterpolation
    __del__ = lambda self: None
BilinearInterpolation_swigregister = _QuantLib.BilinearInterpolation_swigregister
BilinearInterpolation_swigregister(BilinearInterpolation)

class LinearFlat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearFlat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LinearFlat, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_LinearFlat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_LinearFlat
    __del__ = lambda self: None
LinearFlat_swigregister = _QuantLib.LinearFlat_swigregister
LinearFlat_swigregister(LinearFlat)

class BackwardFlat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BackwardFlat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BackwardFlat, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_BackwardFlat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BackwardFlat
    __del__ = lambda self: None
BackwardFlat_swigregister = _QuantLib.BackwardFlat_swigregister
BackwardFlat_swigregister(BackwardFlat)

class ConvexMonotone(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvexMonotone, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvexMonotone, name)
    __repr__ = _swig_repr

    def __init__(self, quadraticity=0.3, monotonicity=0.7, forcePositive=True):
        this = _QuantLib.new_ConvexMonotone(quadraticity, monotonicity, forcePositive)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ConvexMonotone
    __del__ = lambda self: None
ConvexMonotone_swigregister = _QuantLib.ConvexMonotone_swigregister
ConvexMonotone_swigregister(ConvexMonotone)

class Cubic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cubic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cubic, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_Cubic()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Cubic
    __del__ = lambda self: None
Cubic_swigregister = _QuantLib.Cubic_swigregister
Cubic_swigregister(Cubic)

class ForwardFlat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForwardFlat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ForwardFlat, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_ForwardFlat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ForwardFlat
    __del__ = lambda self: None
ForwardFlat_swigregister = _QuantLib.ForwardFlat_swigregister
ForwardFlat_swigregister(ForwardFlat)

class Linear(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Linear, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Linear, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_Linear()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Linear
    __del__ = lambda self: None
Linear_swigregister = _QuantLib.Linear_swigregister
Linear_swigregister(Linear)

class LogLinear(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogLinear, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogLinear, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_LogLinear()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_LogLinear
    __del__ = lambda self: None
LogLinear_swigregister = _QuantLib.LogLinear_swigregister
LogLinear_swigregister(LogLinear)

class DefaultLogCubic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultLogCubic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultLogCubic, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_DefaultLogCubic()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_DefaultLogCubic
    __del__ = lambda self: None
DefaultLogCubic_swigregister = _QuantLib.DefaultLogCubic_swigregister
DefaultLogCubic_swigregister(DefaultLogCubic)

class MonotonicLogCubic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonotonicLogCubic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MonotonicLogCubic, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_MonotonicLogCubic()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MonotonicLogCubic
    __del__ = lambda self: None
MonotonicLogCubic_swigregister = _QuantLib.MonotonicLogCubic_swigregister
MonotonicLogCubic_swigregister(MonotonicLogCubic)

class KrugerLog(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KrugerLog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KrugerLog, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_KrugerLog()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_KrugerLog
    __del__ = lambda self: None
KrugerLog_swigregister = _QuantLib.KrugerLog_swigregister
KrugerLog_swigregister(KrugerLog)

class Kruger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Kruger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Kruger, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_Kruger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Kruger
    __del__ = lambda self: None
Kruger_swigregister = _QuantLib.Kruger_swigregister
Kruger_swigregister(Kruger)

class MonotonicCubic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonotonicCubic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MonotonicCubic, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_MonotonicCubic()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MonotonicCubic
    __del__ = lambda self: None
MonotonicCubic_swigregister = _QuantLib.MonotonicCubic_swigregister
MonotonicCubic_swigregister(MonotonicCubic)

class SplineCubic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SplineCubic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SplineCubic, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_SplineCubic()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SplineCubic
    __del__ = lambda self: None
SplineCubic_swigregister = _QuantLib.SplineCubic_swigregister
SplineCubic_swigregister(SplineCubic)

class Bicubic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bicubic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bicubic, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_Bicubic()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Bicubic
    __del__ = lambda self: None
Bicubic_swigregister = _QuantLib.Bicubic_swigregister
Bicubic_swigregister(Bicubic)

class BackwardflatLinear(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BackwardflatLinear, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BackwardflatLinear, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_BackwardflatLinear()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BackwardflatLinear
    __del__ = lambda self: None
BackwardflatLinear_swigregister = _QuantLib.BackwardflatLinear_swigregister
BackwardflatLinear_swigregister(BackwardflatLinear)

class Bilinear(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bilinear, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bilinear, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_Bilinear()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Bilinear
    __del__ = lambda self: None
Bilinear_swigregister = _QuantLib.Bilinear_swigregister
Bilinear_swigregister(Bilinear)

class Polynomial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polynomial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Polynomial, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_Polynomial()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Polynomial
    __del__ = lambda self: None
Polynomial_swigregister = _QuantLib.Polynomial_swigregister
Polynomial_swigregister(Polynomial)

class SABRInterpolation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SABRInterpolation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SABRInterpolation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_SABRInterpolation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x, allowExtrapolation=False):
        return _QuantLib.SABRInterpolation___call__(self, x, allowExtrapolation)

    def alpha(self):
        return _QuantLib.SABRInterpolation_alpha(self)

    def beta(self):
        return _QuantLib.SABRInterpolation_beta(self)

    def rho(self):
        return _QuantLib.SABRInterpolation_rho(self)

    def nu(self):
        return _QuantLib.SABRInterpolation_nu(self)
    __swig_destroy__ = _QuantLib.delete_SABRInterpolation
    __del__ = lambda self: None
SABRInterpolation_swigregister = _QuantLib.SABRInterpolation_swigregister
SABRInterpolation_swigregister(SABRInterpolation)

class RichardsonExtrapolation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RichardsonExtrapolation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RichardsonExtrapolation, name)
    __repr__ = _swig_repr

    def __call__(self, *args):
        return _QuantLib.RichardsonExtrapolation___call__(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_RichardsonExtrapolation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_RichardsonExtrapolation
    __del__ = lambda self: None
RichardsonExtrapolation_swigregister = _QuantLib.RichardsonExtrapolation_swigregister
RichardsonExtrapolation_swigregister(RichardsonExtrapolation)

class ConvexMonotoneInterpolation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvexMonotoneInterpolation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvexMonotoneInterpolation, name)
    __repr__ = _swig_repr

    def __init__(self, x, y, quadraticity=0.3, monotonicity=0.7, forcePositive=True):
        this = _QuantLib.new_ConvexMonotoneInterpolation(x, y, quadraticity, monotonicity, forcePositive)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, x, allowExtrapolation=False):
        return _QuantLib.ConvexMonotoneInterpolation___call__(self, x, allowExtrapolation)
    __swig_destroy__ = _QuantLib.delete_ConvexMonotoneInterpolation
    __del__ = lambda self: None
ConvexMonotoneInterpolation_swigregister = _QuantLib.ConvexMonotoneInterpolation_swigregister
ConvexMonotoneInterpolation_swigregister(ConvexMonotoneInterpolation)

class Money(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Money, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Money, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Money(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def currency(self):
        return _QuantLib.Money_currency(self)

    def value(self):
        return _QuantLib.Money_value(self)

    def rounded(self):
        return _QuantLib.Money_rounded(self)

    def __pos__(self):
        return _QuantLib.Money___pos__(self)

    def __neg__(self):
        return _QuantLib.Money___neg__(self)

    def __add__(self, m):
        return _QuantLib.Money___add__(self, m)

    def __sub__(self, m):
        return _QuantLib.Money___sub__(self, m)

    def __mul__(self, x):
        return _QuantLib.Money___mul__(self, x)

    def __truediv__(self, *args):
        return _QuantLib.Money___truediv__(self, *args)
    __div__ = __truediv__



    def __rmul__(self, x):
        return _QuantLib.Money___rmul__(self, x)

    def __lt__(self, other):
        return _QuantLib.Money___lt__(self, other)

    def __gt__(self, other):
        return _QuantLib.Money___gt__(self, other)

    def __le__(self, other):
        return _QuantLib.Money___le__(self, other)

    def __ge__(self, other):
        return _QuantLib.Money___ge__(self, other)

    def __cmp__(self, other):
        return _QuantLib.Money___cmp__(self, other)

    def __str__(self):
        return _QuantLib.Money___str__(self)
    NoConversion = _QuantLib.Money_NoConversion
    BaseCurrencyConversion = _QuantLib.Money_BaseCurrencyConversion
    AutomatedConversion = _QuantLib.Money_AutomatedConversion
    if _newclass:
        setConversionType = staticmethod(_QuantLib.Money_setConversionType)
    else:
        setConversionType = _QuantLib.Money_setConversionType
    if _newclass:
        setBaseCurrency = staticmethod(_QuantLib.Money_setBaseCurrency)
    else:
        setBaseCurrency = _QuantLib.Money_setBaseCurrency
    __swig_destroy__ = _QuantLib.delete_Money
    __del__ = lambda self: None
Money_swigregister = _QuantLib.Money_swigregister
Money_swigregister(Money)

def Money_setConversionType(type):
    return _QuantLib.Money_setConversionType(type)
Money_setConversionType = _QuantLib.Money_setConversionType

def Money_setBaseCurrency(c):
    return _QuantLib.Money_setBaseCurrency(c)
Money_setBaseCurrency = _QuantLib.Money_setBaseCurrency


def getCovariance(volatilities, correlations):
    return _QuantLib.getCovariance(volatilities, correlations)
getCovariance = _QuantLib.getCovariance
class Path(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Path, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Path, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __len__(self):
        return _QuantLib.Path___len__(self)

    def value(self, i):
        return _QuantLib.Path_value(self, i)

    def front(self):
        return _QuantLib.Path_front(self)

    def back(self):
        return _QuantLib.Path_back(self)

    def time(self, i):
        return _QuantLib.Path_time(self, i)

    def __getitem__(self, i):
        return _QuantLib.Path___getitem__(self, i)
    __swig_destroy__ = _QuantLib.delete_Path
    __del__ = lambda self: None
Path_swigregister = _QuantLib.Path_swigregister
Path_swigregister(Path)

class SamplePath(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SamplePath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SamplePath, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self):
        return _QuantLib.SamplePath_value(self)

    def weight(self):
        return _QuantLib.SamplePath_weight(self)
    __swig_destroy__ = _QuantLib.delete_SamplePath
    __del__ = lambda self: None
SamplePath_swigregister = _QuantLib.SamplePath_swigregister
SamplePath_swigregister(SamplePath)

class GaussianPathGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianPathGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianPathGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_GaussianPathGenerator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def next(self):
        return _QuantLib.GaussianPathGenerator_next(self)

    def antithetic(self):
        return _QuantLib.GaussianPathGenerator_antithetic(self)

    def size(self):
        return _QuantLib.GaussianPathGenerator_size(self)

    def timeGrid(self):
        return _QuantLib.GaussianPathGenerator_timeGrid(self)
    __swig_destroy__ = _QuantLib.delete_GaussianPathGenerator
    __del__ = lambda self: None
GaussianPathGenerator_swigregister = _QuantLib.GaussianPathGenerator_swigregister
GaussianPathGenerator_swigregister(GaussianPathGenerator)

class GaussianSobolPathGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianSobolPathGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianSobolPathGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_GaussianSobolPathGenerator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def next(self):
        return _QuantLib.GaussianSobolPathGenerator_next(self)

    def antithetic(self):
        return _QuantLib.GaussianSobolPathGenerator_antithetic(self)

    def size(self):
        return _QuantLib.GaussianSobolPathGenerator_size(self)

    def timeGrid(self):
        return _QuantLib.GaussianSobolPathGenerator_timeGrid(self)
    __swig_destroy__ = _QuantLib.delete_GaussianSobolPathGenerator
    __del__ = lambda self: None
GaussianSobolPathGenerator_swigregister = _QuantLib.GaussianSobolPathGenerator_swigregister
GaussianSobolPathGenerator_swigregister(GaussianSobolPathGenerator)

class InvCumulativeMersenneTwisterPathGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvCumulativeMersenneTwisterPathGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InvCumulativeMersenneTwisterPathGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_InvCumulativeMersenneTwisterPathGenerator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def next(self):
        return _QuantLib.InvCumulativeMersenneTwisterPathGenerator_next(self)

    def antithetic(self):
        return _QuantLib.InvCumulativeMersenneTwisterPathGenerator_antithetic(self)

    def size(self):
        return _QuantLib.InvCumulativeMersenneTwisterPathGenerator_size(self)

    def timeGrid(self):
        return _QuantLib.InvCumulativeMersenneTwisterPathGenerator_timeGrid(self)
    __swig_destroy__ = _QuantLib.delete_InvCumulativeMersenneTwisterPathGenerator
    __del__ = lambda self: None
InvCumulativeMersenneTwisterPathGenerator_swigregister = _QuantLib.InvCumulativeMersenneTwisterPathGenerator_swigregister
InvCumulativeMersenneTwisterPathGenerator_swigregister(InvCumulativeMersenneTwisterPathGenerator)

class MultiPath(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiPath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MultiPath, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __len__(self):
        return _QuantLib.MultiPath___len__(self)

    def assetNumber(self):
        return _QuantLib.MultiPath_assetNumber(self)

    def at(self, j):
        return _QuantLib.MultiPath_at(self, j)

    def __getitem__(self, i):
        return _QuantLib.MultiPath___getitem__(self, i)
    __swig_destroy__ = _QuantLib.delete_MultiPath
    __del__ = lambda self: None
MultiPath_swigregister = _QuantLib.MultiPath_swigregister
MultiPath_swigregister(MultiPath)

class SampleMultiPath(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleMultiPath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SampleMultiPath, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self):
        return _QuantLib.SampleMultiPath_value(self)

    def weight(self):
        return _QuantLib.SampleMultiPath_weight(self)
    __swig_destroy__ = _QuantLib.delete_SampleMultiPath
    __del__ = lambda self: None
SampleMultiPath_swigregister = _QuantLib.SampleMultiPath_swigregister
SampleMultiPath_swigregister(SampleMultiPath)

class GaussianMultiPathGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianMultiPathGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianMultiPathGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_GaussianMultiPathGenerator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def next(self):
        return _QuantLib.GaussianMultiPathGenerator_next(self)

    def antithetic(self):
        return _QuantLib.GaussianMultiPathGenerator_antithetic(self)
    __swig_destroy__ = _QuantLib.delete_GaussianMultiPathGenerator
    __del__ = lambda self: None
GaussianMultiPathGenerator_swigregister = _QuantLib.GaussianMultiPathGenerator_swigregister
GaussianMultiPathGenerator_swigregister(GaussianMultiPathGenerator)

class GaussianSobolMultiPathGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianSobolMultiPathGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianSobolMultiPathGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_GaussianSobolMultiPathGenerator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def next(self):
        return _QuantLib.GaussianSobolMultiPathGenerator_next(self)

    def antithetic(self):
        return _QuantLib.GaussianSobolMultiPathGenerator_antithetic(self)
    __swig_destroy__ = _QuantLib.delete_GaussianSobolMultiPathGenerator
    __del__ = lambda self: None
GaussianSobolMultiPathGenerator_swigregister = _QuantLib.GaussianSobolMultiPathGenerator_swigregister
GaussianSobolMultiPathGenerator_swigregister(GaussianSobolMultiPathGenerator)

class BrownianBridge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrownianBridge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BrownianBridge, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_BrownianBridge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def size(self):
        return _QuantLib.BrownianBridge_size(self)

    def times(self):
        return _QuantLib.BrownianBridge_times(self)

    def leftWeight(self):
        return _QuantLib.BrownianBridge_leftWeight(self)

    def rightWeight(self):
        return _QuantLib.BrownianBridge_rightWeight(self)

    def stdDeviation(self):
        return _QuantLib.BrownianBridge_stdDeviation(self)

    def transform(self, input):
        return _QuantLib.BrownianBridge_transform(self, input)

    def bridgeIndex(self):
        return _QuantLib.BrownianBridge_bridgeIndex(self)

    def leftIndex(self):
        return _QuantLib.BrownianBridge_leftIndex(self)

    def rightIndex(self):
        return _QuantLib.BrownianBridge_rightIndex(self)
    __swig_destroy__ = _QuantLib.delete_BrownianBridge
    __del__ = lambda self: None
BrownianBridge_swigregister = _QuantLib.BrownianBridge_swigregister
BrownianBridge_swigregister(BrownianBridge)

class RungeKutta(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RungeKutta, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RungeKutta, name)
    __repr__ = _swig_repr

    def __init__(self, eps=1.0e-6, h1=1.0e-4, hmin=0.0):
        this = _QuantLib.new_RungeKutta(eps, h1, hmin)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, *args):
        return _QuantLib.RungeKutta___call__(self, *args)
    __swig_destroy__ = _QuantLib.delete_RungeKutta
    __del__ = lambda self: None
RungeKutta_swigregister = _QuantLib.RungeKutta_swigregister
RungeKutta_swigregister(RungeKutta)

class TridiagonalOperator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TridiagonalOperator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TridiagonalOperator, name)
    __repr__ = _swig_repr

    def __init__(self, low, mid, high):
        this = _QuantLib.new_TridiagonalOperator(low, mid, high)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def solveFor(self, rhs):
        return _QuantLib.TridiagonalOperator_solveFor(self, rhs)

    def applyTo(self, v):
        return _QuantLib.TridiagonalOperator_applyTo(self, v)

    def size(self):
        return _QuantLib.TridiagonalOperator_size(self)

    def setFirstRow(self, arg2, arg3):
        return _QuantLib.TridiagonalOperator_setFirstRow(self, arg2, arg3)

    def setMidRow(self, arg2, arg3, arg4, arg5):
        return _QuantLib.TridiagonalOperator_setMidRow(self, arg2, arg3, arg4, arg5)

    def setMidRows(self, arg2, arg3, arg4):
        return _QuantLib.TridiagonalOperator_setMidRows(self, arg2, arg3, arg4)

    def setLastRow(self, arg2, arg3):
        return _QuantLib.TridiagonalOperator_setLastRow(self, arg2, arg3)
    if _newclass:
        identity = staticmethod(_QuantLib.TridiagonalOperator_identity)
    else:
        identity = _QuantLib.TridiagonalOperator_identity

    def __add__(self, O):
        return _QuantLib.TridiagonalOperator___add__(self, O)

    def __sub__(self, O):
        return _QuantLib.TridiagonalOperator___sub__(self, O)

    def __mul__(self, a):
        return _QuantLib.TridiagonalOperator___mul__(self, a)

    def __div__(self, a):
        return _QuantLib.TridiagonalOperator___div__(self, a)

    def __iadd__(self, O):
        return _QuantLib.TridiagonalOperator___iadd__(self, O)

    def __isub__(self, O):
        return _QuantLib.TridiagonalOperator___isub__(self, O)

    def __imul__(self, a):
        return _QuantLib.TridiagonalOperator___imul__(self, a)

    def __rmul__(self, a):
        return _QuantLib.TridiagonalOperator___rmul__(self, a)

    def __idiv__(self, a):
        return _QuantLib.TridiagonalOperator___idiv__(self, a)
    __swig_destroy__ = _QuantLib.delete_TridiagonalOperator
    __del__ = lambda self: None
TridiagonalOperator_swigregister = _QuantLib.TridiagonalOperator_swigregister
TridiagonalOperator_swigregister(TridiagonalOperator)

def TridiagonalOperator_identity(size):
    return _QuantLib.TridiagonalOperator_identity(size)
TridiagonalOperator_identity = _QuantLib.TridiagonalOperator_identity

class DPlus(TridiagonalOperator):
    __swig_setmethods__ = {}
    for _s in [TridiagonalOperator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPlus, name, value)
    __swig_getmethods__ = {}
    for _s in [TridiagonalOperator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DPlus, name)
    __repr__ = _swig_repr

    def __init__(self, gridPoints, h):
        this = _QuantLib.new_DPlus(gridPoints, h)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_DPlus
    __del__ = lambda self: None
DPlus_swigregister = _QuantLib.DPlus_swigregister
DPlus_swigregister(DPlus)

class DPlusDMinus(TridiagonalOperator):
    __swig_setmethods__ = {}
    for _s in [TridiagonalOperator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPlusDMinus, name, value)
    __swig_getmethods__ = {}
    for _s in [TridiagonalOperator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DPlusDMinus, name)
    __repr__ = _swig_repr

    def __init__(self, gridPoints, h):
        this = _QuantLib.new_DPlusDMinus(gridPoints, h)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_DPlusDMinus
    __del__ = lambda self: None
DPlusDMinus_swigregister = _QuantLib.DPlusDMinus_swigregister
DPlusDMinus_swigregister(DPlusDMinus)

class DMinus(TridiagonalOperator):
    __swig_setmethods__ = {}
    for _s in [TridiagonalOperator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMinus, name, value)
    __swig_getmethods__ = {}
    for _s in [TridiagonalOperator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DMinus, name)
    __repr__ = _swig_repr

    def __init__(self, gridPoints, h):
        this = _QuantLib.new_DMinus(gridPoints, h)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_DMinus
    __del__ = lambda self: None
DMinus_swigregister = _QuantLib.DMinus_swigregister
DMinus_swigregister(DMinus)

class DZero(TridiagonalOperator):
    __swig_setmethods__ = {}
    for _s in [TridiagonalOperator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DZero, name, value)
    __swig_getmethods__ = {}
    for _s in [TridiagonalOperator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DZero, name)
    __repr__ = _swig_repr

    def __init__(self, gridPoints, h):
        this = _QuantLib.new_DZero(gridPoints, h)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_DZero
    __del__ = lambda self: None
DZero_swigregister = _QuantLib.DZero_swigregister
DZero_swigregister(DZero)

class DefaultBoundaryCondition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultBoundaryCondition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultBoundaryCondition, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    NoSide = _QuantLib.DefaultBoundaryCondition_NoSide
    Upper = _QuantLib.DefaultBoundaryCondition_Upper
    Lower = _QuantLib.DefaultBoundaryCondition_Lower
    __swig_destroy__ = _QuantLib.delete_DefaultBoundaryCondition
    __del__ = lambda self: None
DefaultBoundaryCondition_swigregister = _QuantLib.DefaultBoundaryCondition_swigregister
DefaultBoundaryCondition_swigregister(DefaultBoundaryCondition)

class NeumannBC(DefaultBoundaryCondition):
    __swig_setmethods__ = {}
    for _s in [DefaultBoundaryCondition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeumannBC, name, value)
    __swig_getmethods__ = {}
    for _s in [DefaultBoundaryCondition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NeumannBC, name)
    __repr__ = _swig_repr

    def __init__(self, value, side):
        this = _QuantLib.new_NeumannBC(value, side)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_NeumannBC
    __del__ = lambda self: None
NeumannBC_swigregister = _QuantLib.NeumannBC_swigregister
NeumannBC_swigregister(NeumannBC)

class DirichletBC(DefaultBoundaryCondition):
    __swig_setmethods__ = {}
    for _s in [DefaultBoundaryCondition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirichletBC, name, value)
    __swig_getmethods__ = {}
    for _s in [DefaultBoundaryCondition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DirichletBC, name)
    __repr__ = _swig_repr

    def __init__(self, value, side):
        this = _QuantLib.new_DirichletBC(value, side)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_DirichletBC
    __del__ = lambda self: None
DirichletBC_swigregister = _QuantLib.DirichletBC_swigregister
DirichletBC_swigregister(DirichletBC)

class Parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Parameter, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_Parameter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def params(self):
        return _QuantLib.Parameter_params(self)

    def setParam(self, i, x):
        return _QuantLib.Parameter_setParam(self, i, x)

    def testParams(self, params):
        return _QuantLib.Parameter_testParams(self, params)

    def size(self):
        return _QuantLib.Parameter_size(self)

    def __call__(self, t):
        return _QuantLib.Parameter___call__(self, t)

    def constraint(self):
        return _QuantLib.Parameter_constraint(self)
    __swig_destroy__ = _QuantLib.delete_Parameter
    __del__ = lambda self: None
Parameter_swigregister = _QuantLib.Parameter_swigregister
Parameter_swigregister(Parameter)

class ConstantParameter(Parameter):
    __swig_setmethods__ = {}
    for _s in [Parameter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [Parameter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantParameter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ConstantParameter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ConstantParameter
    __del__ = lambda self: None
ConstantParameter_swigregister = _QuantLib.ConstantParameter_swigregister
ConstantParameter_swigregister(ConstantParameter)

class NullParameter(Parameter):
    __swig_setmethods__ = {}
    for _s in [Parameter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NullParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [Parameter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NullParameter, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_NullParameter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_NullParameter
    __del__ = lambda self: None
NullParameter_swigregister = _QuantLib.NullParameter_swigregister
NullParameter_swigregister(NullParameter)

class PiecewiseConstantParameter(Parameter):
    __swig_setmethods__ = {}
    for _s in [Parameter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseConstantParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [Parameter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseConstantParameter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseConstantParameter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_PiecewiseConstantParameter
    __del__ = lambda self: None
PiecewiseConstantParameter_swigregister = _QuantLib.PiecewiseConstantParameter_swigregister
PiecewiseConstantParameter_swigregister(PiecewiseConstantParameter)

class Payoff(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Payoff, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Payoff, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __call__(self, price):
        return _QuantLib.Payoff___call__(self, price)
    __swig_destroy__ = _QuantLib.delete_Payoff
    __del__ = lambda self: None
Payoff_swigregister = _QuantLib.Payoff_swigregister
Payoff_swigregister(Payoff)

class TypePayoff(Payoff):
    __swig_setmethods__ = {}
    for _s in [Payoff]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypePayoff, name, value)
    __swig_getmethods__ = {}
    for _s in [Payoff]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TypePayoff, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def optionType(self):
        return _QuantLib.TypePayoff_optionType(self)
    __swig_destroy__ = _QuantLib.delete_TypePayoff
    __del__ = lambda self: None
TypePayoff_swigregister = _QuantLib.TypePayoff_swigregister
TypePayoff_swigregister(TypePayoff)

class BasketPayoff(Payoff):
    __swig_setmethods__ = {}
    for _s in [Payoff]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasketPayoff, name, value)
    __swig_getmethods__ = {}
    for _s in [Payoff]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BasketPayoff, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _QuantLib.delete_BasketPayoff
    __del__ = lambda self: None
BasketPayoff_swigregister = _QuantLib.BasketPayoff_swigregister
BasketPayoff_swigregister(BasketPayoff)

class MinBasketPayoff(BasketPayoff):
    __swig_setmethods__ = {}
    for _s in [BasketPayoff]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinBasketPayoff, name, value)
    __swig_getmethods__ = {}
    for _s in [BasketPayoff]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MinBasketPayoff, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        this = _QuantLib.new_MinBasketPayoff(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MinBasketPayoff
    __del__ = lambda self: None
MinBasketPayoff_swigregister = _QuantLib.MinBasketPayoff_swigregister
MinBasketPayoff_swigregister(MinBasketPayoff)

class MaxBasketPayoff(BasketPayoff):
    __swig_setmethods__ = {}
    for _s in [BasketPayoff]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaxBasketPayoff, name, value)
    __swig_getmethods__ = {}
    for _s in [BasketPayoff]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaxBasketPayoff, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        this = _QuantLib.new_MaxBasketPayoff(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MaxBasketPayoff
    __del__ = lambda self: None
MaxBasketPayoff_swigregister = _QuantLib.MaxBasketPayoff_swigregister
MaxBasketPayoff_swigregister(MaxBasketPayoff)

class AverageBasketPayoff(BasketPayoff):
    __swig_setmethods__ = {}
    for _s in [BasketPayoff]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AverageBasketPayoff, name, value)
    __swig_getmethods__ = {}
    for _s in [BasketPayoff]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AverageBasketPayoff, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_AverageBasketPayoff(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AverageBasketPayoff
    __del__ = lambda self: None
AverageBasketPayoff_swigregister = _QuantLib.AverageBasketPayoff_swigregister
AverageBasketPayoff_swigregister(AverageBasketPayoff)

class SpreadBasketPayoff(BasketPayoff):
    __swig_setmethods__ = {}
    for _s in [BasketPayoff]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpreadBasketPayoff, name, value)
    __swig_getmethods__ = {}
    for _s in [BasketPayoff]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpreadBasketPayoff, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        this = _QuantLib.new_SpreadBasketPayoff(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SpreadBasketPayoff
    __del__ = lambda self: None
SpreadBasketPayoff_swigregister = _QuantLib.SpreadBasketPayoff_swigregister
SpreadBasketPayoff_swigregister(SpreadBasketPayoff)

class FloatingTypePayoff(TypePayoff):
    __swig_setmethods__ = {}
    for _s in [TypePayoff]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatingTypePayoff, name, value)
    __swig_getmethods__ = {}
    for _s in [TypePayoff]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatingTypePayoff, name)
    __repr__ = _swig_repr

    def __init__(self, type):
        this = _QuantLib.new_FloatingTypePayoff(type)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, *args):
        return _QuantLib.FloatingTypePayoff___call__(self, *args)
    __swig_destroy__ = _QuantLib.delete_FloatingTypePayoff
    __del__ = lambda self: None
FloatingTypePayoff_swigregister = _QuantLib.FloatingTypePayoff_swigregister
FloatingTypePayoff_swigregister(FloatingTypePayoff)

class StrikedTypePayoff(TypePayoff):
    __swig_setmethods__ = {}
    for _s in [TypePayoff]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrikedTypePayoff, name, value)
    __swig_getmethods__ = {}
    for _s in [TypePayoff]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrikedTypePayoff, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def strike(self):
        return _QuantLib.StrikedTypePayoff_strike(self)
    __swig_destroy__ = _QuantLib.delete_StrikedTypePayoff
    __del__ = lambda self: None
StrikedTypePayoff_swigregister = _QuantLib.StrikedTypePayoff_swigregister
StrikedTypePayoff_swigregister(StrikedTypePayoff)

class PlainVanillaPayoff(StrikedTypePayoff):
    __swig_setmethods__ = {}
    for _s in [StrikedTypePayoff]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlainVanillaPayoff, name, value)
    __swig_getmethods__ = {}
    for _s in [StrikedTypePayoff]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlainVanillaPayoff, name)
    __repr__ = _swig_repr

    def __init__(self, type, strike):
        this = _QuantLib.new_PlainVanillaPayoff(type, strike)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_PlainVanillaPayoff
    __del__ = lambda self: None
PlainVanillaPayoff_swigregister = _QuantLib.PlainVanillaPayoff_swigregister
PlainVanillaPayoff_swigregister(PlainVanillaPayoff)


def as_plain_vanilla_payoff(payoff):
    return _QuantLib.as_plain_vanilla_payoff(payoff)
as_plain_vanilla_payoff = _QuantLib.as_plain_vanilla_payoff
class PercentageStrikePayoff(StrikedTypePayoff):
    __swig_setmethods__ = {}
    for _s in [StrikedTypePayoff]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PercentageStrikePayoff, name, value)
    __swig_getmethods__ = {}
    for _s in [StrikedTypePayoff]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PercentageStrikePayoff, name)
    __repr__ = _swig_repr

    def __init__(self, type, moneyness):
        this = _QuantLib.new_PercentageStrikePayoff(type, moneyness)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_PercentageStrikePayoff
    __del__ = lambda self: None
PercentageStrikePayoff_swigregister = _QuantLib.PercentageStrikePayoff_swigregister
PercentageStrikePayoff_swigregister(PercentageStrikePayoff)

class CashOrNothingPayoff(StrikedTypePayoff):
    __swig_setmethods__ = {}
    for _s in [StrikedTypePayoff]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashOrNothingPayoff, name, value)
    __swig_getmethods__ = {}
    for _s in [StrikedTypePayoff]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CashOrNothingPayoff, name)
    __repr__ = _swig_repr

    def __init__(self, type, strike, payoff):
        this = _QuantLib.new_CashOrNothingPayoff(type, strike, payoff)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CashOrNothingPayoff
    __del__ = lambda self: None
CashOrNothingPayoff_swigregister = _QuantLib.CashOrNothingPayoff_swigregister
CashOrNothingPayoff_swigregister(CashOrNothingPayoff)

class AssetOrNothingPayoff(StrikedTypePayoff):
    __swig_setmethods__ = {}
    for _s in [StrikedTypePayoff]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AssetOrNothingPayoff, name, value)
    __swig_getmethods__ = {}
    for _s in [StrikedTypePayoff]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AssetOrNothingPayoff, name)
    __repr__ = _swig_repr

    def __init__(self, type, strike):
        this = _QuantLib.new_AssetOrNothingPayoff(type, strike)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AssetOrNothingPayoff
    __del__ = lambda self: None
AssetOrNothingPayoff_swigregister = _QuantLib.AssetOrNothingPayoff_swigregister
AssetOrNothingPayoff_swigregister(AssetOrNothingPayoff)

class SuperSharePayoff(StrikedTypePayoff):
    __swig_setmethods__ = {}
    for _s in [StrikedTypePayoff]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SuperSharePayoff, name, value)
    __swig_getmethods__ = {}
    for _s in [StrikedTypePayoff]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SuperSharePayoff, name)
    __repr__ = _swig_repr

    def __init__(self, type, strike, increment):
        this = _QuantLib.new_SuperSharePayoff(type, strike, increment)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SuperSharePayoff
    __del__ = lambda self: None
SuperSharePayoff_swigregister = _QuantLib.SuperSharePayoff_swigregister
SuperSharePayoff_swigregister(SuperSharePayoff)

class GapPayoff(StrikedTypePayoff):
    __swig_setmethods__ = {}
    for _s in [StrikedTypePayoff]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GapPayoff, name, value)
    __swig_getmethods__ = {}
    for _s in [StrikedTypePayoff]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GapPayoff, name)
    __repr__ = _swig_repr

    def __init__(self, type, strike, strikePayoff):
        this = _QuantLib.new_GapPayoff(type, strike, strikePayoff)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_GapPayoff
    __del__ = lambda self: None
GapPayoff_swigregister = _QuantLib.GapPayoff_swigregister
GapPayoff_swigregister(GapPayoff)

class VanillaForwardPayoff(StrikedTypePayoff):
    __swig_setmethods__ = {}
    for _s in [StrikedTypePayoff]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VanillaForwardPayoff, name, value)
    __swig_getmethods__ = {}
    for _s in [StrikedTypePayoff]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VanillaForwardPayoff, name)
    __repr__ = _swig_repr

    def __init__(self, type, strike):
        this = _QuantLib.new_VanillaForwardPayoff(type, strike)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_VanillaForwardPayoff
    __del__ = lambda self: None
VanillaForwardPayoff_swigregister = _QuantLib.VanillaForwardPayoff_swigregister
VanillaForwardPayoff_swigregister(VanillaForwardPayoff)

class SimpleQuote(Quote):
    __swig_setmethods__ = {}
    for _s in [Quote]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleQuote, name, value)
    __swig_getmethods__ = {}
    for _s in [Quote]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleQuote, name)
    __repr__ = _swig_repr

    def __init__(self, value):
        this = _QuantLib.new_SimpleQuote(value)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, value):
        return _QuantLib.SimpleQuote_setValue(self, value)
    __swig_destroy__ = _QuantLib.delete_SimpleQuote
    __del__ = lambda self: None
SimpleQuote_swigregister = _QuantLib.SimpleQuote_swigregister
SimpleQuote_swigregister(SimpleQuote)


def as_simple_quote(q):
    return _QuantLib.as_simple_quote(q)
as_simple_quote = _QuantLib.as_simple_quote
class DerivedUFQuote(Quote):
    __swig_setmethods__ = {}
    for _s in [Quote]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivedUFQuote, name, value)
    __swig_getmethods__ = {}
    for _s in [Quote]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivedUFQuote, name)
    __repr__ = _swig_repr

    def __init__(self, h, function):
        this = _QuantLib.new_DerivedUFQuote(h, function)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_DerivedUFQuote
    __del__ = lambda self: None
DerivedUFQuote_swigregister = _QuantLib.DerivedUFQuote_swigregister
DerivedUFQuote_swigregister(DerivedUFQuote)

class CompositeBFQuote(Quote):
    __swig_setmethods__ = {}
    for _s in [Quote]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeBFQuote, name, value)
    __swig_getmethods__ = {}
    for _s in [Quote]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeBFQuote, name)
    __repr__ = _swig_repr

    def __init__(self, h1, h2, function):
        this = _QuantLib.new_CompositeBFQuote(h1, h2, function)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CompositeBFQuote
    __del__ = lambda self: None
CompositeBFQuote_swigregister = _QuantLib.CompositeBFQuote_swigregister
CompositeBFQuote_swigregister(CompositeBFQuote)

class DeltaVolQuote(Quote):
    __swig_setmethods__ = {}
    for _s in [Quote]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeltaVolQuote, name, value)
    __swig_getmethods__ = {}
    for _s in [Quote]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeltaVolQuote, name)
    __repr__ = _swig_repr
    Spot = _QuantLib.DeltaVolQuote_Spot
    Fwd = _QuantLib.DeltaVolQuote_Fwd
    PaSpot = _QuantLib.DeltaVolQuote_PaSpot
    PaFwd = _QuantLib.DeltaVolQuote_PaFwd
    AtmNull = _QuantLib.DeltaVolQuote_AtmNull
    AtmSpot = _QuantLib.DeltaVolQuote_AtmSpot
    AtmFwd = _QuantLib.DeltaVolQuote_AtmFwd
    AtmDeltaNeutral = _QuantLib.DeltaVolQuote_AtmDeltaNeutral
    AtmVegaMax = _QuantLib.DeltaVolQuote_AtmVegaMax
    AtmGammaMax = _QuantLib.DeltaVolQuote_AtmGammaMax
    AtmPutCall50 = _QuantLib.DeltaVolQuote_AtmPutCall50

    def __init__(self, *args):
        this = _QuantLib.new_DeltaVolQuote(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def delta(self):
        return _QuantLib.DeltaVolQuote_delta(self)

    def maturity(self):
        return _QuantLib.DeltaVolQuote_maturity(self)

    def atmType(self):
        return _QuantLib.DeltaVolQuote_atmType(self)

    def deltaType(self):
        return _QuantLib.DeltaVolQuote_deltaType(self)
    __swig_destroy__ = _QuantLib.delete_DeltaVolQuote
    __del__ = lambda self: None
DeltaVolQuote_swigregister = _QuantLib.DeltaVolQuote_swigregister
DeltaVolQuote_swigregister(DeltaVolQuote)

class DeltaVolQuoteHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeltaVolQuoteHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeltaVolQuoteHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_DeltaVolQuoteHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _QuantLib.DeltaVolQuoteHandle___deref__(self)

    def currentLink(self):
        return _QuantLib.DeltaVolQuoteHandle_currentLink(self)

    def __ref__(self):
        return _QuantLib.DeltaVolQuoteHandle___ref__(self)

    def __nonzero__(self):
        return _QuantLib.DeltaVolQuoteHandle___nonzero__(self)

    def __bool__(self):
        return _QuantLib.DeltaVolQuoteHandle___bool__(self)

    def asObservable(self):
        return _QuantLib.DeltaVolQuoteHandle_asObservable(self)
    __swig_destroy__ = _QuantLib.delete_DeltaVolQuoteHandle
    __del__ = lambda self: None

    def delta(self):
        return _QuantLib.DeltaVolQuoteHandle_delta(self)

    def maturity(self):
        return _QuantLib.DeltaVolQuoteHandle_maturity(self)

    def atmType(self):
        return _QuantLib.DeltaVolQuoteHandle_atmType(self)

    def deltaType(self):
        return _QuantLib.DeltaVolQuoteHandle_deltaType(self)

    def value(self):
        return _QuantLib.DeltaVolQuoteHandle_value(self)

    def isValid(self):
        return _QuantLib.DeltaVolQuoteHandle_isValid(self)
DeltaVolQuoteHandle_swigregister = _QuantLib.DeltaVolQuoteHandle_swigregister
DeltaVolQuoteHandle_swigregister(DeltaVolQuoteHandle)

class RelinkableDeltaVolQuoteHandle(DeltaVolQuoteHandle):
    __swig_setmethods__ = {}
    for _s in [DeltaVolQuoteHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelinkableDeltaVolQuoteHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [DeltaVolQuoteHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RelinkableDeltaVolQuoteHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_RelinkableDeltaVolQuoteHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def linkTo(self, arg2):
        return _QuantLib.RelinkableDeltaVolQuoteHandle_linkTo(self, arg2)

    def reset(self):
        return _QuantLib.RelinkableDeltaVolQuoteHandle_reset(self)
    __swig_destroy__ = _QuantLib.delete_RelinkableDeltaVolQuoteHandle
    __del__ = lambda self: None
RelinkableDeltaVolQuoteHandle_swigregister = _QuantLib.RelinkableDeltaVolQuoteHandle_swigregister
RelinkableDeltaVolQuoteHandle_swigregister(RelinkableDeltaVolQuoteHandle)

class QuoteVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.QuoteVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.QuoteVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.QuoteVector___bool__(self)

    def __len__(self):
        return _QuantLib.QuoteVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.QuoteVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.QuoteVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.QuoteVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.QuoteVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.QuoteVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.QuoteVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.QuoteVector_pop(self)

    def append(self, x):
        return _QuantLib.QuoteVector_append(self, x)

    def empty(self):
        return _QuantLib.QuoteVector_empty(self)

    def size(self):
        return _QuantLib.QuoteVector_size(self)

    def swap(self, v):
        return _QuantLib.QuoteVector_swap(self, v)

    def begin(self):
        return _QuantLib.QuoteVector_begin(self)

    def end(self):
        return _QuantLib.QuoteVector_end(self)

    def rbegin(self):
        return _QuantLib.QuoteVector_rbegin(self)

    def rend(self):
        return _QuantLib.QuoteVector_rend(self)

    def clear(self):
        return _QuantLib.QuoteVector_clear(self)

    def get_allocator(self):
        return _QuantLib.QuoteVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.QuoteVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.QuoteVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_QuoteVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.QuoteVector_push_back(self, x)

    def front(self):
        return _QuantLib.QuoteVector_front(self)

    def back(self):
        return _QuantLib.QuoteVector_back(self)

    def assign(self, n, x):
        return _QuantLib.QuoteVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.QuoteVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.QuoteVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.QuoteVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.QuoteVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_QuoteVector
    __del__ = lambda self: None
QuoteVector_swigregister = _QuantLib.QuoteVector_swigregister
QuoteVector_swigregister(QuoteVector)

class QuoteVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.QuoteVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.QuoteVectorVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.QuoteVectorVector___bool__(self)

    def __len__(self):
        return _QuantLib.QuoteVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.QuoteVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.QuoteVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.QuoteVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.QuoteVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.QuoteVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.QuoteVectorVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.QuoteVectorVector_pop(self)

    def append(self, x):
        return _QuantLib.QuoteVectorVector_append(self, x)

    def empty(self):
        return _QuantLib.QuoteVectorVector_empty(self)

    def size(self):
        return _QuantLib.QuoteVectorVector_size(self)

    def swap(self, v):
        return _QuantLib.QuoteVectorVector_swap(self, v)

    def begin(self):
        return _QuantLib.QuoteVectorVector_begin(self)

    def end(self):
        return _QuantLib.QuoteVectorVector_end(self)

    def rbegin(self):
        return _QuantLib.QuoteVectorVector_rbegin(self)

    def rend(self):
        return _QuantLib.QuoteVectorVector_rend(self)

    def clear(self):
        return _QuantLib.QuoteVectorVector_clear(self)

    def get_allocator(self):
        return _QuantLib.QuoteVectorVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.QuoteVectorVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.QuoteVectorVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_QuoteVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.QuoteVectorVector_push_back(self, x)

    def front(self):
        return _QuantLib.QuoteVectorVector_front(self)

    def back(self):
        return _QuantLib.QuoteVectorVector_back(self)

    def assign(self, n, x):
        return _QuantLib.QuoteVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.QuoteVectorVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.QuoteVectorVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.QuoteVectorVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.QuoteVectorVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_QuoteVectorVector
    __del__ = lambda self: None
QuoteVectorVector_swigregister = _QuantLib.QuoteVectorVector_swigregister
QuoteVectorVector_swigregister(QuoteVectorVector)

class QuoteHandleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteHandleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteHandleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.QuoteHandleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.QuoteHandleVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.QuoteHandleVector___bool__(self)

    def __len__(self):
        return _QuantLib.QuoteHandleVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.QuoteHandleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.QuoteHandleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.QuoteHandleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.QuoteHandleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.QuoteHandleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.QuoteHandleVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.QuoteHandleVector_pop(self)

    def append(self, x):
        return _QuantLib.QuoteHandleVector_append(self, x)

    def empty(self):
        return _QuantLib.QuoteHandleVector_empty(self)

    def size(self):
        return _QuantLib.QuoteHandleVector_size(self)

    def swap(self, v):
        return _QuantLib.QuoteHandleVector_swap(self, v)

    def begin(self):
        return _QuantLib.QuoteHandleVector_begin(self)

    def end(self):
        return _QuantLib.QuoteHandleVector_end(self)

    def rbegin(self):
        return _QuantLib.QuoteHandleVector_rbegin(self)

    def rend(self):
        return _QuantLib.QuoteHandleVector_rend(self)

    def clear(self):
        return _QuantLib.QuoteHandleVector_clear(self)

    def get_allocator(self):
        return _QuantLib.QuoteHandleVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.QuoteHandleVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.QuoteHandleVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_QuoteHandleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.QuoteHandleVector_push_back(self, x)

    def front(self):
        return _QuantLib.QuoteHandleVector_front(self)

    def back(self):
        return _QuantLib.QuoteHandleVector_back(self)

    def assign(self, n, x):
        return _QuantLib.QuoteHandleVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.QuoteHandleVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.QuoteHandleVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.QuoteHandleVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.QuoteHandleVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_QuoteHandleVector
    __del__ = lambda self: None
QuoteHandleVector_swigregister = _QuantLib.QuoteHandleVector_swigregister
QuoteHandleVector_swigregister(QuoteHandleVector)

class QuoteHandleVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteHandleVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteHandleVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.QuoteHandleVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.QuoteHandleVectorVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.QuoteHandleVectorVector___bool__(self)

    def __len__(self):
        return _QuantLib.QuoteHandleVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.QuoteHandleVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.QuoteHandleVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.QuoteHandleVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.QuoteHandleVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.QuoteHandleVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.QuoteHandleVectorVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.QuoteHandleVectorVector_pop(self)

    def append(self, x):
        return _QuantLib.QuoteHandleVectorVector_append(self, x)

    def empty(self):
        return _QuantLib.QuoteHandleVectorVector_empty(self)

    def size(self):
        return _QuantLib.QuoteHandleVectorVector_size(self)

    def swap(self, v):
        return _QuantLib.QuoteHandleVectorVector_swap(self, v)

    def begin(self):
        return _QuantLib.QuoteHandleVectorVector_begin(self)

    def end(self):
        return _QuantLib.QuoteHandleVectorVector_end(self)

    def rbegin(self):
        return _QuantLib.QuoteHandleVectorVector_rbegin(self)

    def rend(self):
        return _QuantLib.QuoteHandleVectorVector_rend(self)

    def clear(self):
        return _QuantLib.QuoteHandleVectorVector_clear(self)

    def get_allocator(self):
        return _QuantLib.QuoteHandleVectorVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.QuoteHandleVectorVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.QuoteHandleVectorVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_QuoteHandleVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.QuoteHandleVectorVector_push_back(self, x)

    def front(self):
        return _QuantLib.QuoteHandleVectorVector_front(self)

    def back(self):
        return _QuantLib.QuoteHandleVectorVector_back(self)

    def assign(self, n, x):
        return _QuantLib.QuoteHandleVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.QuoteHandleVectorVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.QuoteHandleVectorVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.QuoteHandleVectorVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.QuoteHandleVectorVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_QuoteHandleVectorVector
    __del__ = lambda self: None
QuoteHandleVectorVector_swigregister = _QuantLib.QuoteHandleVectorVector_swigregister
QuoteHandleVectorVector_swigregister(QuoteHandleVectorVector)

class RelinkableQuoteHandleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelinkableQuoteHandleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RelinkableQuoteHandleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.RelinkableQuoteHandleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.RelinkableQuoteHandleVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.RelinkableQuoteHandleVector___bool__(self)

    def __len__(self):
        return _QuantLib.RelinkableQuoteHandleVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.RelinkableQuoteHandleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.RelinkableQuoteHandleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.RelinkableQuoteHandleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.RelinkableQuoteHandleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.RelinkableQuoteHandleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.RelinkableQuoteHandleVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.RelinkableQuoteHandleVector_pop(self)

    def append(self, x):
        return _QuantLib.RelinkableQuoteHandleVector_append(self, x)

    def empty(self):
        return _QuantLib.RelinkableQuoteHandleVector_empty(self)

    def size(self):
        return _QuantLib.RelinkableQuoteHandleVector_size(self)

    def swap(self, v):
        return _QuantLib.RelinkableQuoteHandleVector_swap(self, v)

    def begin(self):
        return _QuantLib.RelinkableQuoteHandleVector_begin(self)

    def end(self):
        return _QuantLib.RelinkableQuoteHandleVector_end(self)

    def rbegin(self):
        return _QuantLib.RelinkableQuoteHandleVector_rbegin(self)

    def rend(self):
        return _QuantLib.RelinkableQuoteHandleVector_rend(self)

    def clear(self):
        return _QuantLib.RelinkableQuoteHandleVector_clear(self)

    def get_allocator(self):
        return _QuantLib.RelinkableQuoteHandleVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.RelinkableQuoteHandleVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.RelinkableQuoteHandleVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_RelinkableQuoteHandleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.RelinkableQuoteHandleVector_push_back(self, x)

    def front(self):
        return _QuantLib.RelinkableQuoteHandleVector_front(self)

    def back(self):
        return _QuantLib.RelinkableQuoteHandleVector_back(self)

    def assign(self, n, x):
        return _QuantLib.RelinkableQuoteHandleVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.RelinkableQuoteHandleVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.RelinkableQuoteHandleVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.RelinkableQuoteHandleVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.RelinkableQuoteHandleVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_RelinkableQuoteHandleVector
    __del__ = lambda self: None
RelinkableQuoteHandleVector_swigregister = _QuantLib.RelinkableQuoteHandleVector_swigregister
RelinkableQuoteHandleVector_swigregister(RelinkableQuoteHandleVector)

class RelinkableQuoteHandleVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelinkableQuoteHandleVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RelinkableQuoteHandleVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.RelinkableQuoteHandleVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.RelinkableQuoteHandleVectorVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.RelinkableQuoteHandleVectorVector___bool__(self)

    def __len__(self):
        return _QuantLib.RelinkableQuoteHandleVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.RelinkableQuoteHandleVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.RelinkableQuoteHandleVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.RelinkableQuoteHandleVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.RelinkableQuoteHandleVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.RelinkableQuoteHandleVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.RelinkableQuoteHandleVectorVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.RelinkableQuoteHandleVectorVector_pop(self)

    def append(self, x):
        return _QuantLib.RelinkableQuoteHandleVectorVector_append(self, x)

    def empty(self):
        return _QuantLib.RelinkableQuoteHandleVectorVector_empty(self)

    def size(self):
        return _QuantLib.RelinkableQuoteHandleVectorVector_size(self)

    def swap(self, v):
        return _QuantLib.RelinkableQuoteHandleVectorVector_swap(self, v)

    def begin(self):
        return _QuantLib.RelinkableQuoteHandleVectorVector_begin(self)

    def end(self):
        return _QuantLib.RelinkableQuoteHandleVectorVector_end(self)

    def rbegin(self):
        return _QuantLib.RelinkableQuoteHandleVectorVector_rbegin(self)

    def rend(self):
        return _QuantLib.RelinkableQuoteHandleVectorVector_rend(self)

    def clear(self):
        return _QuantLib.RelinkableQuoteHandleVectorVector_clear(self)

    def get_allocator(self):
        return _QuantLib.RelinkableQuoteHandleVectorVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.RelinkableQuoteHandleVectorVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.RelinkableQuoteHandleVectorVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_RelinkableQuoteHandleVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.RelinkableQuoteHandleVectorVector_push_back(self, x)

    def front(self):
        return _QuantLib.RelinkableQuoteHandleVectorVector_front(self)

    def back(self):
        return _QuantLib.RelinkableQuoteHandleVectorVector_back(self)

    def assign(self, n, x):
        return _QuantLib.RelinkableQuoteHandleVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.RelinkableQuoteHandleVectorVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.RelinkableQuoteHandleVectorVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.RelinkableQuoteHandleVectorVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.RelinkableQuoteHandleVectorVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_RelinkableQuoteHandleVectorVector
    __del__ = lambda self: None
RelinkableQuoteHandleVectorVector_swigregister = _QuantLib.RelinkableQuoteHandleVectorVector_swigregister
RelinkableQuoteHandleVectorVector_swigregister(RelinkableQuoteHandleVectorVector)

class LecuyerUniformRng(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LecuyerUniformRng, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LecuyerUniformRng, name)
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        this = _QuantLib.new_LecuyerUniformRng(seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def next(self):
        return _QuantLib.LecuyerUniformRng_next(self)
    __swig_destroy__ = _QuantLib.delete_LecuyerUniformRng
    __del__ = lambda self: None
LecuyerUniformRng_swigregister = _QuantLib.LecuyerUniformRng_swigregister
LecuyerUniformRng_swigregister(LecuyerUniformRng)

class KnuthUniformRng(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KnuthUniformRng, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KnuthUniformRng, name)
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        this = _QuantLib.new_KnuthUniformRng(seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def next(self):
        return _QuantLib.KnuthUniformRng_next(self)
    __swig_destroy__ = _QuantLib.delete_KnuthUniformRng
    __del__ = lambda self: None
KnuthUniformRng_swigregister = _QuantLib.KnuthUniformRng_swigregister
KnuthUniformRng_swigregister(KnuthUniformRng)

class MersenneTwisterUniformRng(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MersenneTwisterUniformRng, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MersenneTwisterUniformRng, name)
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        this = _QuantLib.new_MersenneTwisterUniformRng(seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def next(self):
        return _QuantLib.MersenneTwisterUniformRng_next(self)
    __swig_destroy__ = _QuantLib.delete_MersenneTwisterUniformRng
    __del__ = lambda self: None
MersenneTwisterUniformRng_swigregister = _QuantLib.MersenneTwisterUniformRng_swigregister
MersenneTwisterUniformRng_swigregister(MersenneTwisterUniformRng)

class UniformRandomGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UniformRandomGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UniformRandomGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        this = _QuantLib.new_UniformRandomGenerator(seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def next(self):
        return _QuantLib.UniformRandomGenerator_next(self)

    def nextValue(self):
        return _QuantLib.UniformRandomGenerator_nextValue(self)
    __swig_destroy__ = _QuantLib.delete_UniformRandomGenerator
    __del__ = lambda self: None
UniformRandomGenerator_swigregister = _QuantLib.UniformRandomGenerator_swigregister
UniformRandomGenerator_swigregister(UniformRandomGenerator)

class CentralLimitLecuyerGaussianRng(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CentralLimitLecuyerGaussianRng, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CentralLimitLecuyerGaussianRng, name)
    __repr__ = _swig_repr

    def __init__(self, rng):
        this = _QuantLib.new_CentralLimitLecuyerGaussianRng(rng)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def next(self):
        return _QuantLib.CentralLimitLecuyerGaussianRng_next(self)
    __swig_destroy__ = _QuantLib.delete_CentralLimitLecuyerGaussianRng
    __del__ = lambda self: None
CentralLimitLecuyerGaussianRng_swigregister = _QuantLib.CentralLimitLecuyerGaussianRng_swigregister
CentralLimitLecuyerGaussianRng_swigregister(CentralLimitLecuyerGaussianRng)

class CentralLimitKnuthGaussianRng(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CentralLimitKnuthGaussianRng, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CentralLimitKnuthGaussianRng, name)
    __repr__ = _swig_repr

    def __init__(self, rng):
        this = _QuantLib.new_CentralLimitKnuthGaussianRng(rng)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def next(self):
        return _QuantLib.CentralLimitKnuthGaussianRng_next(self)
    __swig_destroy__ = _QuantLib.delete_CentralLimitKnuthGaussianRng
    __del__ = lambda self: None
CentralLimitKnuthGaussianRng_swigregister = _QuantLib.CentralLimitKnuthGaussianRng_swigregister
CentralLimitKnuthGaussianRng_swigregister(CentralLimitKnuthGaussianRng)

class CentralLimitMersenneTwisterGaussianRng(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CentralLimitMersenneTwisterGaussianRng, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CentralLimitMersenneTwisterGaussianRng, name)
    __repr__ = _swig_repr

    def __init__(self, rng):
        this = _QuantLib.new_CentralLimitMersenneTwisterGaussianRng(rng)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def next(self):
        return _QuantLib.CentralLimitMersenneTwisterGaussianRng_next(self)
    __swig_destroy__ = _QuantLib.delete_CentralLimitMersenneTwisterGaussianRng
    __del__ = lambda self: None
CentralLimitMersenneTwisterGaussianRng_swigregister = _QuantLib.CentralLimitMersenneTwisterGaussianRng_swigregister
CentralLimitMersenneTwisterGaussianRng_swigregister(CentralLimitMersenneTwisterGaussianRng)

class BoxMullerLecuyerGaussianRng(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoxMullerLecuyerGaussianRng, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoxMullerLecuyerGaussianRng, name)
    __repr__ = _swig_repr

    def __init__(self, rng):
        this = _QuantLib.new_BoxMullerLecuyerGaussianRng(rng)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def next(self):
        return _QuantLib.BoxMullerLecuyerGaussianRng_next(self)
    __swig_destroy__ = _QuantLib.delete_BoxMullerLecuyerGaussianRng
    __del__ = lambda self: None
BoxMullerLecuyerGaussianRng_swigregister = _QuantLib.BoxMullerLecuyerGaussianRng_swigregister
BoxMullerLecuyerGaussianRng_swigregister(BoxMullerLecuyerGaussianRng)

class BoxMullerKnuthGaussianRng(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoxMullerKnuthGaussianRng, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoxMullerKnuthGaussianRng, name)
    __repr__ = _swig_repr

    def __init__(self, rng):
        this = _QuantLib.new_BoxMullerKnuthGaussianRng(rng)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def next(self):
        return _QuantLib.BoxMullerKnuthGaussianRng_next(self)
    __swig_destroy__ = _QuantLib.delete_BoxMullerKnuthGaussianRng
    __del__ = lambda self: None
BoxMullerKnuthGaussianRng_swigregister = _QuantLib.BoxMullerKnuthGaussianRng_swigregister
BoxMullerKnuthGaussianRng_swigregister(BoxMullerKnuthGaussianRng)

class BoxMullerMersenneTwisterGaussianRng(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoxMullerMersenneTwisterGaussianRng, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoxMullerMersenneTwisterGaussianRng, name)
    __repr__ = _swig_repr

    def __init__(self, rng):
        this = _QuantLib.new_BoxMullerMersenneTwisterGaussianRng(rng)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def next(self):
        return _QuantLib.BoxMullerMersenneTwisterGaussianRng_next(self)
    __swig_destroy__ = _QuantLib.delete_BoxMullerMersenneTwisterGaussianRng
    __del__ = lambda self: None
BoxMullerMersenneTwisterGaussianRng_swigregister = _QuantLib.BoxMullerMersenneTwisterGaussianRng_swigregister
BoxMullerMersenneTwisterGaussianRng_swigregister(BoxMullerMersenneTwisterGaussianRng)

class MoroInvCumulativeLecuyerGaussianRng(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MoroInvCumulativeLecuyerGaussianRng, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MoroInvCumulativeLecuyerGaussianRng, name)
    __repr__ = _swig_repr

    def __init__(self, rng):
        this = _QuantLib.new_MoroInvCumulativeLecuyerGaussianRng(rng)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def next(self):
        return _QuantLib.MoroInvCumulativeLecuyerGaussianRng_next(self)
    __swig_destroy__ = _QuantLib.delete_MoroInvCumulativeLecuyerGaussianRng
    __del__ = lambda self: None
MoroInvCumulativeLecuyerGaussianRng_swigregister = _QuantLib.MoroInvCumulativeLecuyerGaussianRng_swigregister
MoroInvCumulativeLecuyerGaussianRng_swigregister(MoroInvCumulativeLecuyerGaussianRng)

class MoroInvCumulativeKnuthGaussianRng(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MoroInvCumulativeKnuthGaussianRng, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MoroInvCumulativeKnuthGaussianRng, name)
    __repr__ = _swig_repr

    def __init__(self, rng):
        this = _QuantLib.new_MoroInvCumulativeKnuthGaussianRng(rng)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def next(self):
        return _QuantLib.MoroInvCumulativeKnuthGaussianRng_next(self)
    __swig_destroy__ = _QuantLib.delete_MoroInvCumulativeKnuthGaussianRng
    __del__ = lambda self: None
MoroInvCumulativeKnuthGaussianRng_swigregister = _QuantLib.MoroInvCumulativeKnuthGaussianRng_swigregister
MoroInvCumulativeKnuthGaussianRng_swigregister(MoroInvCumulativeKnuthGaussianRng)

class MoroInvCumulativeMersenneTwisterGaussianRng(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MoroInvCumulativeMersenneTwisterGaussianRng, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MoroInvCumulativeMersenneTwisterGaussianRng, name)
    __repr__ = _swig_repr

    def __init__(self, rng):
        this = _QuantLib.new_MoroInvCumulativeMersenneTwisterGaussianRng(rng)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def next(self):
        return _QuantLib.MoroInvCumulativeMersenneTwisterGaussianRng_next(self)
    __swig_destroy__ = _QuantLib.delete_MoroInvCumulativeMersenneTwisterGaussianRng
    __del__ = lambda self: None
MoroInvCumulativeMersenneTwisterGaussianRng_swigregister = _QuantLib.MoroInvCumulativeMersenneTwisterGaussianRng_swigregister
MoroInvCumulativeMersenneTwisterGaussianRng_swigregister(MoroInvCumulativeMersenneTwisterGaussianRng)

class InvCumulativeLecuyerGaussianRng(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvCumulativeLecuyerGaussianRng, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InvCumulativeLecuyerGaussianRng, name)
    __repr__ = _swig_repr

    def __init__(self, rng):
        this = _QuantLib.new_InvCumulativeLecuyerGaussianRng(rng)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def next(self):
        return _QuantLib.InvCumulativeLecuyerGaussianRng_next(self)
    __swig_destroy__ = _QuantLib.delete_InvCumulativeLecuyerGaussianRng
    __del__ = lambda self: None
InvCumulativeLecuyerGaussianRng_swigregister = _QuantLib.InvCumulativeLecuyerGaussianRng_swigregister
InvCumulativeLecuyerGaussianRng_swigregister(InvCumulativeLecuyerGaussianRng)

class InvCumulativeKnuthGaussianRng(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvCumulativeKnuthGaussianRng, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InvCumulativeKnuthGaussianRng, name)
    __repr__ = _swig_repr

    def __init__(self, rng):
        this = _QuantLib.new_InvCumulativeKnuthGaussianRng(rng)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def next(self):
        return _QuantLib.InvCumulativeKnuthGaussianRng_next(self)
    __swig_destroy__ = _QuantLib.delete_InvCumulativeKnuthGaussianRng
    __del__ = lambda self: None
InvCumulativeKnuthGaussianRng_swigregister = _QuantLib.InvCumulativeKnuthGaussianRng_swigregister
InvCumulativeKnuthGaussianRng_swigregister(InvCumulativeKnuthGaussianRng)

class InvCumulativeMersenneTwisterGaussianRng(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvCumulativeMersenneTwisterGaussianRng, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InvCumulativeMersenneTwisterGaussianRng, name)
    __repr__ = _swig_repr

    def __init__(self, rng):
        this = _QuantLib.new_InvCumulativeMersenneTwisterGaussianRng(rng)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def next(self):
        return _QuantLib.InvCumulativeMersenneTwisterGaussianRng_next(self)
    __swig_destroy__ = _QuantLib.delete_InvCumulativeMersenneTwisterGaussianRng
    __del__ = lambda self: None
InvCumulativeMersenneTwisterGaussianRng_swigregister = _QuantLib.InvCumulativeMersenneTwisterGaussianRng_swigregister
InvCumulativeMersenneTwisterGaussianRng_swigregister(InvCumulativeMersenneTwisterGaussianRng)

class GaussianRandomGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianRandomGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianRandomGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, rng):
        this = _QuantLib.new_GaussianRandomGenerator(rng)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def next(self):
        return _QuantLib.GaussianRandomGenerator_next(self)

    def nextValue(self):
        return _QuantLib.GaussianRandomGenerator_nextValue(self)
    __swig_destroy__ = _QuantLib.delete_GaussianRandomGenerator
    __del__ = lambda self: None
GaussianRandomGenerator_swigregister = _QuantLib.GaussianRandomGenerator_swigregister
GaussianRandomGenerator_swigregister(GaussianRandomGenerator)

class HaltonRsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaltonRsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HaltonRsg, name)
    __repr__ = _swig_repr

    def __init__(self, dimensionality, seed=0, randomStart=True, randomShift=False):
        this = _QuantLib.new_HaltonRsg(dimensionality, seed, randomStart, randomShift)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nextSequence(self):
        return _QuantLib.HaltonRsg_nextSequence(self)

    def lastSequence(self):
        return _QuantLib.HaltonRsg_lastSequence(self)

    def dimension(self):
        return _QuantLib.HaltonRsg_dimension(self)
    __swig_destroy__ = _QuantLib.delete_HaltonRsg
    __del__ = lambda self: None
HaltonRsg_swigregister = _QuantLib.HaltonRsg_swigregister
HaltonRsg_swigregister(HaltonRsg)

class SobolRsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SobolRsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SobolRsg, name)
    __repr__ = _swig_repr
    Unit = _QuantLib.SobolRsg_Unit
    Jaeckel = _QuantLib.SobolRsg_Jaeckel
    SobolLevitan = _QuantLib.SobolRsg_SobolLevitan
    SobolLevitanLemieux = _QuantLib.SobolRsg_SobolLevitanLemieux
    JoeKuoD5 = _QuantLib.SobolRsg_JoeKuoD5
    JoeKuoD6 = _QuantLib.SobolRsg_JoeKuoD6
    JoeKuoD7 = _QuantLib.SobolRsg_JoeKuoD7
    Kuo = _QuantLib.SobolRsg_Kuo
    Kuo2 = _QuantLib.SobolRsg_Kuo2
    Kuo3 = _QuantLib.SobolRsg_Kuo3

    def __init__(self, *args):
        this = _QuantLib.new_SobolRsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nextSequence(self):
        return _QuantLib.SobolRsg_nextSequence(self)

    def lastSequence(self):
        return _QuantLib.SobolRsg_lastSequence(self)

    def dimension(self):
        return _QuantLib.SobolRsg_dimension(self)

    def skipTo(self, n):
        return _QuantLib.SobolRsg_skipTo(self, n)

    def nextInt32Sequence(self):
        return _QuantLib.SobolRsg_nextInt32Sequence(self)
    __swig_destroy__ = _QuantLib.delete_SobolRsg
    __del__ = lambda self: None
SobolRsg_swigregister = _QuantLib.SobolRsg_swigregister
SobolRsg_swigregister(SobolRsg)

class SobolBrownianBridgeRsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SobolBrownianBridgeRsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SobolBrownianBridgeRsg, name)
    __repr__ = _swig_repr

    def __init__(self, factors, steps):
        this = _QuantLib.new_SobolBrownianBridgeRsg(factors, steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nextSequence(self):
        return _QuantLib.SobolBrownianBridgeRsg_nextSequence(self)

    def lastSequence(self):
        return _QuantLib.SobolBrownianBridgeRsg_lastSequence(self)

    def dimension(self):
        return _QuantLib.SobolBrownianBridgeRsg_dimension(self)
    __swig_destroy__ = _QuantLib.delete_SobolBrownianBridgeRsg
    __del__ = lambda self: None
SobolBrownianBridgeRsg_swigregister = _QuantLib.SobolBrownianBridgeRsg_swigregister
SobolBrownianBridgeRsg_swigregister(SobolBrownianBridgeRsg)

class LecuyerUniformRsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LecuyerUniformRsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LecuyerUniformRsg, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_LecuyerUniformRsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nextSequence(self):
        return _QuantLib.LecuyerUniformRsg_nextSequence(self)

    def dimension(self):
        return _QuantLib.LecuyerUniformRsg_dimension(self)
    __swig_destroy__ = _QuantLib.delete_LecuyerUniformRsg
    __del__ = lambda self: None
LecuyerUniformRsg_swigregister = _QuantLib.LecuyerUniformRsg_swigregister
LecuyerUniformRsg_swigregister(LecuyerUniformRsg)

class KnuthUniformRsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KnuthUniformRsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KnuthUniformRsg, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_KnuthUniformRsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nextSequence(self):
        return _QuantLib.KnuthUniformRsg_nextSequence(self)

    def dimension(self):
        return _QuantLib.KnuthUniformRsg_dimension(self)
    __swig_destroy__ = _QuantLib.delete_KnuthUniformRsg
    __del__ = lambda self: None
KnuthUniformRsg_swigregister = _QuantLib.KnuthUniformRsg_swigregister
KnuthUniformRsg_swigregister(KnuthUniformRsg)

class MersenneTwisterUniformRsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MersenneTwisterUniformRsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MersenneTwisterUniformRsg, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_MersenneTwisterUniformRsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nextSequence(self):
        return _QuantLib.MersenneTwisterUniformRsg_nextSequence(self)

    def dimension(self):
        return _QuantLib.MersenneTwisterUniformRsg_dimension(self)
    __swig_destroy__ = _QuantLib.delete_MersenneTwisterUniformRsg
    __del__ = lambda self: None
MersenneTwisterUniformRsg_swigregister = _QuantLib.MersenneTwisterUniformRsg_swigregister
MersenneTwisterUniformRsg_swigregister(MersenneTwisterUniformRsg)

class UniformRandomSequenceGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UniformRandomSequenceGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UniformRandomSequenceGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, dimensionality, rng):
        this = _QuantLib.new_UniformRandomSequenceGenerator(dimensionality, rng)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nextSequence(self):
        return _QuantLib.UniformRandomSequenceGenerator_nextSequence(self)

    def dimension(self):
        return _QuantLib.UniformRandomSequenceGenerator_dimension(self)
    __swig_destroy__ = _QuantLib.delete_UniformRandomSequenceGenerator
    __del__ = lambda self: None
UniformRandomSequenceGenerator_swigregister = _QuantLib.UniformRandomSequenceGenerator_swigregister
UniformRandomSequenceGenerator_swigregister(UniformRandomSequenceGenerator)

class UniformLowDiscrepancySequenceGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UniformLowDiscrepancySequenceGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UniformLowDiscrepancySequenceGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_UniformLowDiscrepancySequenceGenerator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nextSequence(self):
        return _QuantLib.UniformLowDiscrepancySequenceGenerator_nextSequence(self)

    def dimension(self):
        return _QuantLib.UniformLowDiscrepancySequenceGenerator_dimension(self)
    __swig_destroy__ = _QuantLib.delete_UniformLowDiscrepancySequenceGenerator
    __del__ = lambda self: None
UniformLowDiscrepancySequenceGenerator_swigregister = _QuantLib.UniformLowDiscrepancySequenceGenerator_swigregister
UniformLowDiscrepancySequenceGenerator_swigregister(UniformLowDiscrepancySequenceGenerator)

class MoroInvCumulativeLecuyerGaussianRsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MoroInvCumulativeLecuyerGaussianRsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MoroInvCumulativeLecuyerGaussianRsg, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_MoroInvCumulativeLecuyerGaussianRsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nextSequence(self):
        return _QuantLib.MoroInvCumulativeLecuyerGaussianRsg_nextSequence(self)

    def dimension(self):
        return _QuantLib.MoroInvCumulativeLecuyerGaussianRsg_dimension(self)
    __swig_destroy__ = _QuantLib.delete_MoroInvCumulativeLecuyerGaussianRsg
    __del__ = lambda self: None
MoroInvCumulativeLecuyerGaussianRsg_swigregister = _QuantLib.MoroInvCumulativeLecuyerGaussianRsg_swigregister
MoroInvCumulativeLecuyerGaussianRsg_swigregister(MoroInvCumulativeLecuyerGaussianRsg)

class MoroInvCumulativeKnuthGaussianRsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MoroInvCumulativeKnuthGaussianRsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MoroInvCumulativeKnuthGaussianRsg, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_MoroInvCumulativeKnuthGaussianRsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nextSequence(self):
        return _QuantLib.MoroInvCumulativeKnuthGaussianRsg_nextSequence(self)

    def dimension(self):
        return _QuantLib.MoroInvCumulativeKnuthGaussianRsg_dimension(self)
    __swig_destroy__ = _QuantLib.delete_MoroInvCumulativeKnuthGaussianRsg
    __del__ = lambda self: None
MoroInvCumulativeKnuthGaussianRsg_swigregister = _QuantLib.MoroInvCumulativeKnuthGaussianRsg_swigregister
MoroInvCumulativeKnuthGaussianRsg_swigregister(MoroInvCumulativeKnuthGaussianRsg)

class MoroInvCumulativeMersenneTwisterGaussianRsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MoroInvCumulativeMersenneTwisterGaussianRsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MoroInvCumulativeMersenneTwisterGaussianRsg, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_MoroInvCumulativeMersenneTwisterGaussianRsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nextSequence(self):
        return _QuantLib.MoroInvCumulativeMersenneTwisterGaussianRsg_nextSequence(self)

    def dimension(self):
        return _QuantLib.MoroInvCumulativeMersenneTwisterGaussianRsg_dimension(self)
    __swig_destroy__ = _QuantLib.delete_MoroInvCumulativeMersenneTwisterGaussianRsg
    __del__ = lambda self: None
MoroInvCumulativeMersenneTwisterGaussianRsg_swigregister = _QuantLib.MoroInvCumulativeMersenneTwisterGaussianRsg_swigregister
MoroInvCumulativeMersenneTwisterGaussianRsg_swigregister(MoroInvCumulativeMersenneTwisterGaussianRsg)

class MoroInvCumulativeHaltonGaussianRsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MoroInvCumulativeHaltonGaussianRsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MoroInvCumulativeHaltonGaussianRsg, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_MoroInvCumulativeHaltonGaussianRsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nextSequence(self):
        return _QuantLib.MoroInvCumulativeHaltonGaussianRsg_nextSequence(self)

    def dimension(self):
        return _QuantLib.MoroInvCumulativeHaltonGaussianRsg_dimension(self)
    __swig_destroy__ = _QuantLib.delete_MoroInvCumulativeHaltonGaussianRsg
    __del__ = lambda self: None
MoroInvCumulativeHaltonGaussianRsg_swigregister = _QuantLib.MoroInvCumulativeHaltonGaussianRsg_swigregister
MoroInvCumulativeHaltonGaussianRsg_swigregister(MoroInvCumulativeHaltonGaussianRsg)

class MoroInvCumulativeSobolGaussianRsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MoroInvCumulativeSobolGaussianRsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MoroInvCumulativeSobolGaussianRsg, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_MoroInvCumulativeSobolGaussianRsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nextSequence(self):
        return _QuantLib.MoroInvCumulativeSobolGaussianRsg_nextSequence(self)

    def dimension(self):
        return _QuantLib.MoroInvCumulativeSobolGaussianRsg_dimension(self)
    __swig_destroy__ = _QuantLib.delete_MoroInvCumulativeSobolGaussianRsg
    __del__ = lambda self: None
MoroInvCumulativeSobolGaussianRsg_swigregister = _QuantLib.MoroInvCumulativeSobolGaussianRsg_swigregister
MoroInvCumulativeSobolGaussianRsg_swigregister(MoroInvCumulativeSobolGaussianRsg)

class InvCumulativeLecuyerGaussianRsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvCumulativeLecuyerGaussianRsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InvCumulativeLecuyerGaussianRsg, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_InvCumulativeLecuyerGaussianRsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nextSequence(self):
        return _QuantLib.InvCumulativeLecuyerGaussianRsg_nextSequence(self)

    def dimension(self):
        return _QuantLib.InvCumulativeLecuyerGaussianRsg_dimension(self)
    __swig_destroy__ = _QuantLib.delete_InvCumulativeLecuyerGaussianRsg
    __del__ = lambda self: None
InvCumulativeLecuyerGaussianRsg_swigregister = _QuantLib.InvCumulativeLecuyerGaussianRsg_swigregister
InvCumulativeLecuyerGaussianRsg_swigregister(InvCumulativeLecuyerGaussianRsg)

class InvCumulativeKnuthGaussianRsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvCumulativeKnuthGaussianRsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InvCumulativeKnuthGaussianRsg, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_InvCumulativeKnuthGaussianRsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nextSequence(self):
        return _QuantLib.InvCumulativeKnuthGaussianRsg_nextSequence(self)

    def dimension(self):
        return _QuantLib.InvCumulativeKnuthGaussianRsg_dimension(self)
    __swig_destroy__ = _QuantLib.delete_InvCumulativeKnuthGaussianRsg
    __del__ = lambda self: None
InvCumulativeKnuthGaussianRsg_swigregister = _QuantLib.InvCumulativeKnuthGaussianRsg_swigregister
InvCumulativeKnuthGaussianRsg_swigregister(InvCumulativeKnuthGaussianRsg)

class InvCumulativeMersenneTwisterGaussianRsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvCumulativeMersenneTwisterGaussianRsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InvCumulativeMersenneTwisterGaussianRsg, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_InvCumulativeMersenneTwisterGaussianRsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nextSequence(self):
        return _QuantLib.InvCumulativeMersenneTwisterGaussianRsg_nextSequence(self)

    def dimension(self):
        return _QuantLib.InvCumulativeMersenneTwisterGaussianRsg_dimension(self)
    __swig_destroy__ = _QuantLib.delete_InvCumulativeMersenneTwisterGaussianRsg
    __del__ = lambda self: None
InvCumulativeMersenneTwisterGaussianRsg_swigregister = _QuantLib.InvCumulativeMersenneTwisterGaussianRsg_swigregister
InvCumulativeMersenneTwisterGaussianRsg_swigregister(InvCumulativeMersenneTwisterGaussianRsg)

class InvCumulativeHaltonGaussianRsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvCumulativeHaltonGaussianRsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InvCumulativeHaltonGaussianRsg, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_InvCumulativeHaltonGaussianRsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nextSequence(self):
        return _QuantLib.InvCumulativeHaltonGaussianRsg_nextSequence(self)

    def dimension(self):
        return _QuantLib.InvCumulativeHaltonGaussianRsg_dimension(self)
    __swig_destroy__ = _QuantLib.delete_InvCumulativeHaltonGaussianRsg
    __del__ = lambda self: None
InvCumulativeHaltonGaussianRsg_swigregister = _QuantLib.InvCumulativeHaltonGaussianRsg_swigregister
InvCumulativeHaltonGaussianRsg_swigregister(InvCumulativeHaltonGaussianRsg)

class InvCumulativeSobolGaussianRsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvCumulativeSobolGaussianRsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InvCumulativeSobolGaussianRsg, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_InvCumulativeSobolGaussianRsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nextSequence(self):
        return _QuantLib.InvCumulativeSobolGaussianRsg_nextSequence(self)

    def dimension(self):
        return _QuantLib.InvCumulativeSobolGaussianRsg_dimension(self)
    __swig_destroy__ = _QuantLib.delete_InvCumulativeSobolGaussianRsg
    __del__ = lambda self: None
InvCumulativeSobolGaussianRsg_swigregister = _QuantLib.InvCumulativeSobolGaussianRsg_swigregister
InvCumulativeSobolGaussianRsg_swigregister(InvCumulativeSobolGaussianRsg)

class GaussianRandomSequenceGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianRandomSequenceGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianRandomSequenceGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, uniformSequenceGenerator):
        this = _QuantLib.new_GaussianRandomSequenceGenerator(uniformSequenceGenerator)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nextSequence(self):
        return _QuantLib.GaussianRandomSequenceGenerator_nextSequence(self)

    def dimension(self):
        return _QuantLib.GaussianRandomSequenceGenerator_dimension(self)
    __swig_destroy__ = _QuantLib.delete_GaussianRandomSequenceGenerator
    __del__ = lambda self: None
GaussianRandomSequenceGenerator_swigregister = _QuantLib.GaussianRandomSequenceGenerator_swigregister
GaussianRandomSequenceGenerator_swigregister(GaussianRandomSequenceGenerator)

class GaussianLowDiscrepancySequenceGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianLowDiscrepancySequenceGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianLowDiscrepancySequenceGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, u):
        this = _QuantLib.new_GaussianLowDiscrepancySequenceGenerator(u)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def nextSequence(self):
        return _QuantLib.GaussianLowDiscrepancySequenceGenerator_nextSequence(self)

    def dimension(self):
        return _QuantLib.GaussianLowDiscrepancySequenceGenerator_dimension(self)
    __swig_destroy__ = _QuantLib.delete_GaussianLowDiscrepancySequenceGenerator
    __del__ = lambda self: None
GaussianLowDiscrepancySequenceGenerator_swigregister = _QuantLib.GaussianLowDiscrepancySequenceGenerator_swigregister
GaussianLowDiscrepancySequenceGenerator_swigregister(GaussianLowDiscrepancySequenceGenerator)

class DepositRateHelper(RateHelper):
    __swig_setmethods__ = {}
    for _s in [RateHelper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DepositRateHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [RateHelper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DepositRateHelper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_DepositRateHelper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_DepositRateHelper
    __del__ = lambda self: None
DepositRateHelper_swigregister = _QuantLib.DepositRateHelper_swigregister
DepositRateHelper_swigregister(DepositRateHelper)

class FraRateHelper(RateHelper):
    __swig_setmethods__ = {}
    for _s in [RateHelper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FraRateHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [RateHelper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FraRateHelper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FraRateHelper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FraRateHelper
    __del__ = lambda self: None
FraRateHelper_swigregister = _QuantLib.FraRateHelper_swigregister
FraRateHelper_swigregister(FraRateHelper)

class FuturesRateHelper(RateHelper):
    __swig_setmethods__ = {}
    for _s in [RateHelper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FuturesRateHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [RateHelper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FuturesRateHelper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FuturesRateHelper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FuturesRateHelper
    __del__ = lambda self: None
FuturesRateHelper_swigregister = _QuantLib.FuturesRateHelper_swigregister
FuturesRateHelper_swigregister(FuturesRateHelper)

class SwapRateHelper(RateHelper):
    __swig_setmethods__ = {}
    for _s in [RateHelper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwapRateHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [RateHelper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SwapRateHelper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_SwapRateHelper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def spread(self):
        return _QuantLib.SwapRateHelper_spread(self)

    def swap(self):
        return _QuantLib.SwapRateHelper_swap(self)
    __swig_destroy__ = _QuantLib.delete_SwapRateHelper
    __del__ = lambda self: None
SwapRateHelper_swigregister = _QuantLib.SwapRateHelper_swigregister
SwapRateHelper_swigregister(SwapRateHelper)

class BondHelper(RateHelper):
    __swig_setmethods__ = {}
    for _s in [RateHelper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BondHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [RateHelper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BondHelper, name)
    __repr__ = _swig_repr

    def __init__(self, cleanPrice, bond, useCleanPrice=True):
        this = _QuantLib.new_BondHelper(cleanPrice, bond, useCleanPrice)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def bond(self):
        return _QuantLib.BondHelper_bond(self)
    __swig_destroy__ = _QuantLib.delete_BondHelper
    __del__ = lambda self: None
BondHelper_swigregister = _QuantLib.BondHelper_swigregister
BondHelper_swigregister(BondHelper)

class FixedRateBondHelper(BondHelper):
    __swig_setmethods__ = {}
    for _s in [BondHelper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FixedRateBondHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [BondHelper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FixedRateBondHelper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FixedRateBondHelper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def fixedRateBond(self):
        return _QuantLib.FixedRateBondHelper_fixedRateBond(self)
    __swig_destroy__ = _QuantLib.delete_FixedRateBondHelper
    __del__ = lambda self: None
FixedRateBondHelper_swigregister = _QuantLib.FixedRateBondHelper_swigregister
FixedRateBondHelper_swigregister(FixedRateBondHelper)

class OISRateHelper(RateHelper):
    __swig_setmethods__ = {}
    for _s in [RateHelper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OISRateHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [RateHelper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OISRateHelper, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_OISRateHelper(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def swap(self):
        return _QuantLib.OISRateHelper_swap(self)
    __swig_destroy__ = _QuantLib.delete_OISRateHelper
    __del__ = lambda self: None
OISRateHelper_swigregister = _QuantLib.OISRateHelper_swigregister
OISRateHelper_swigregister(OISRateHelper)

class DatedOISRateHelper(RateHelper):
    __swig_setmethods__ = {}
    for _s in [RateHelper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatedOISRateHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [RateHelper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatedOISRateHelper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_DatedOISRateHelper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_DatedOISRateHelper
    __del__ = lambda self: None
DatedOISRateHelper_swigregister = _QuantLib.DatedOISRateHelper_swigregister
DatedOISRateHelper_swigregister(DatedOISRateHelper)

class FxSwapRateHelper(RateHelper):
    __swig_setmethods__ = {}
    for _s in [RateHelper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FxSwapRateHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [RateHelper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FxSwapRateHelper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FxSwapRateHelper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FxSwapRateHelper
    __del__ = lambda self: None
FxSwapRateHelper_swigregister = _QuantLib.FxSwapRateHelper_swigregister
FxSwapRateHelper_swigregister(FxSwapRateHelper)

class OvernightIndexFutureRateHelper(RateHelper):
    __swig_setmethods__ = {}
    for _s in [RateHelper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OvernightIndexFutureRateHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [RateHelper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OvernightIndexFutureRateHelper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_OvernightIndexFutureRateHelper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_OvernightIndexFutureRateHelper
    __del__ = lambda self: None
OvernightIndexFutureRateHelper_swigregister = _QuantLib.OvernightIndexFutureRateHelper_swigregister
OvernightIndexFutureRateHelper_swigregister(OvernightIndexFutureRateHelper)

class SofrFutureRateHelper(OvernightIndexFutureRateHelper):
    __swig_setmethods__ = {}
    for _s in [OvernightIndexFutureRateHelper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SofrFutureRateHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [OvernightIndexFutureRateHelper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SofrFutureRateHelper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_SofrFutureRateHelper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SofrFutureRateHelper
    __del__ = lambda self: None
SofrFutureRateHelper_swigregister = _QuantLib.SofrFutureRateHelper_swigregister
SofrFutureRateHelper_swigregister(SofrFutureRateHelper)

class RateHelperVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RateHelperVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RateHelperVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.RateHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.RateHelperVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.RateHelperVector___bool__(self)

    def __len__(self):
        return _QuantLib.RateHelperVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.RateHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.RateHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.RateHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.RateHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.RateHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.RateHelperVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.RateHelperVector_pop(self)

    def append(self, x):
        return _QuantLib.RateHelperVector_append(self, x)

    def empty(self):
        return _QuantLib.RateHelperVector_empty(self)

    def size(self):
        return _QuantLib.RateHelperVector_size(self)

    def swap(self, v):
        return _QuantLib.RateHelperVector_swap(self, v)

    def begin(self):
        return _QuantLib.RateHelperVector_begin(self)

    def end(self):
        return _QuantLib.RateHelperVector_end(self)

    def rbegin(self):
        return _QuantLib.RateHelperVector_rbegin(self)

    def rend(self):
        return _QuantLib.RateHelperVector_rend(self)

    def clear(self):
        return _QuantLib.RateHelperVector_clear(self)

    def get_allocator(self):
        return _QuantLib.RateHelperVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.RateHelperVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.RateHelperVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_RateHelperVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.RateHelperVector_push_back(self, x)

    def front(self):
        return _QuantLib.RateHelperVector_front(self)

    def back(self):
        return _QuantLib.RateHelperVector_back(self)

    def assign(self, n, x):
        return _QuantLib.RateHelperVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.RateHelperVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.RateHelperVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.RateHelperVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.RateHelperVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_RateHelperVector
    __del__ = lambda self: None
RateHelperVector_swigregister = _QuantLib.RateHelperVector_swigregister
RateHelperVector_swigregister(RateHelperVector)

class BondHelperVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BondHelperVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BondHelperVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.BondHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.BondHelperVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.BondHelperVector___bool__(self)

    def __len__(self):
        return _QuantLib.BondHelperVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.BondHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.BondHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.BondHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.BondHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.BondHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.BondHelperVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.BondHelperVector_pop(self)

    def append(self, x):
        return _QuantLib.BondHelperVector_append(self, x)

    def empty(self):
        return _QuantLib.BondHelperVector_empty(self)

    def size(self):
        return _QuantLib.BondHelperVector_size(self)

    def swap(self, v):
        return _QuantLib.BondHelperVector_swap(self, v)

    def begin(self):
        return _QuantLib.BondHelperVector_begin(self)

    def end(self):
        return _QuantLib.BondHelperVector_end(self)

    def rbegin(self):
        return _QuantLib.BondHelperVector_rbegin(self)

    def rend(self):
        return _QuantLib.BondHelperVector_rend(self)

    def clear(self):
        return _QuantLib.BondHelperVector_clear(self)

    def get_allocator(self):
        return _QuantLib.BondHelperVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.BondHelperVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.BondHelperVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_BondHelperVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.BondHelperVector_push_back(self, x)

    def front(self):
        return _QuantLib.BondHelperVector_front(self)

    def back(self):
        return _QuantLib.BondHelperVector_back(self)

    def assign(self, n, x):
        return _QuantLib.BondHelperVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.BondHelperVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.BondHelperVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.BondHelperVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.BondHelperVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_BondHelperVector
    __del__ = lambda self: None
BondHelperVector_swigregister = _QuantLib.BondHelperVector_swigregister
BondHelperVector_swigregister(BondHelperVector)


def as_depositratehelper(helper):
    return _QuantLib.as_depositratehelper(helper)
as_depositratehelper = _QuantLib.as_depositratehelper

def as_fraratehelper(helper):
    return _QuantLib.as_fraratehelper(helper)
as_fraratehelper = _QuantLib.as_fraratehelper

def as_swapratehelper(helper):
    return _QuantLib.as_swapratehelper(helper)
as_swapratehelper = _QuantLib.as_swapratehelper

def as_oisratehelper(helper):
    return _QuantLib.as_oisratehelper(helper)
as_oisratehelper = _QuantLib.as_oisratehelper
class RiskNeutralDensityCalculator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RiskNeutralDensityCalculator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RiskNeutralDensityCalculator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def pdf(self, x, t):
        return _QuantLib.RiskNeutralDensityCalculator_pdf(self, x, t)

    def cdf(self, x, t):
        return _QuantLib.RiskNeutralDensityCalculator_cdf(self, x, t)

    def invcdf(self, p, t):
        return _QuantLib.RiskNeutralDensityCalculator_invcdf(self, p, t)
    __swig_destroy__ = _QuantLib.delete_RiskNeutralDensityCalculator
    __del__ = lambda self: None
RiskNeutralDensityCalculator_swigregister = _QuantLib.RiskNeutralDensityCalculator_swigregister
RiskNeutralDensityCalculator_swigregister(RiskNeutralDensityCalculator)

class BSMRNDCalculator(RiskNeutralDensityCalculator):
    __swig_setmethods__ = {}
    for _s in [RiskNeutralDensityCalculator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BSMRNDCalculator, name, value)
    __swig_getmethods__ = {}
    for _s in [RiskNeutralDensityCalculator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BSMRNDCalculator, name)
    __repr__ = _swig_repr

    def __init__(self, process):
        this = _QuantLib.new_BSMRNDCalculator(process)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BSMRNDCalculator
    __del__ = lambda self: None
BSMRNDCalculator_swigregister = _QuantLib.BSMRNDCalculator_swigregister
BSMRNDCalculator_swigregister(BSMRNDCalculator)

class CEVRNDCalculator(RiskNeutralDensityCalculator):
    __swig_setmethods__ = {}
    for _s in [RiskNeutralDensityCalculator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEVRNDCalculator, name, value)
    __swig_getmethods__ = {}
    for _s in [RiskNeutralDensityCalculator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CEVRNDCalculator, name)
    __repr__ = _swig_repr

    def __init__(self, f0, alpha, beta):
        this = _QuantLib.new_CEVRNDCalculator(f0, alpha, beta)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def massAtZero(self, t):
        return _QuantLib.CEVRNDCalculator_massAtZero(self, t)
    __swig_destroy__ = _QuantLib.delete_CEVRNDCalculator
    __del__ = lambda self: None
CEVRNDCalculator_swigregister = _QuantLib.CEVRNDCalculator_swigregister
CEVRNDCalculator_swigregister(CEVRNDCalculator)

class GBSMRNDCalculator(RiskNeutralDensityCalculator):
    __swig_setmethods__ = {}
    for _s in [RiskNeutralDensityCalculator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GBSMRNDCalculator, name, value)
    __swig_getmethods__ = {}
    for _s in [RiskNeutralDensityCalculator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GBSMRNDCalculator, name)
    __repr__ = _swig_repr

    def __init__(self, process):
        this = _QuantLib.new_GBSMRNDCalculator(process)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_GBSMRNDCalculator
    __del__ = lambda self: None
GBSMRNDCalculator_swigregister = _QuantLib.GBSMRNDCalculator_swigregister
GBSMRNDCalculator_swigregister(GBSMRNDCalculator)

class HestonRNDCalculator(RiskNeutralDensityCalculator):
    __swig_setmethods__ = {}
    for _s in [RiskNeutralDensityCalculator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HestonRNDCalculator, name, value)
    __swig_getmethods__ = {}
    for _s in [RiskNeutralDensityCalculator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HestonRNDCalculator, name)
    __repr__ = _swig_repr

    def __init__(self, hestonProcess, integrationEps=1e-6, maxIntegrationIterations=10000):
        this = _QuantLib.new_HestonRNDCalculator(hestonProcess, integrationEps, maxIntegrationIterations)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_HestonRNDCalculator
    __del__ = lambda self: None
HestonRNDCalculator_swigregister = _QuantLib.HestonRNDCalculator_swigregister
HestonRNDCalculator_swigregister(HestonRNDCalculator)

class LocalVolRNDCalculator(RiskNeutralDensityCalculator):
    __swig_setmethods__ = {}
    for _s in [RiskNeutralDensityCalculator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalVolRNDCalculator, name, value)
    __swig_getmethods__ = {}
    for _s in [RiskNeutralDensityCalculator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocalVolRNDCalculator, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_LocalVolRNDCalculator(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def mesher(self, t):
        return _QuantLib.LocalVolRNDCalculator_mesher(self, t)

    def rescaleTimeSteps(self):
        return _QuantLib.LocalVolRNDCalculator_rescaleTimeSteps(self)
    __swig_destroy__ = _QuantLib.delete_LocalVolRNDCalculator
    __del__ = lambda self: None
LocalVolRNDCalculator_swigregister = _QuantLib.LocalVolRNDCalculator_swigregister
LocalVolRNDCalculator_swigregister(LocalVolRNDCalculator)

class SquareRootProcessRNDCalculator(RiskNeutralDensityCalculator):
    __swig_setmethods__ = {}
    for _s in [RiskNeutralDensityCalculator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SquareRootProcessRNDCalculator, name, value)
    __swig_getmethods__ = {}
    for _s in [RiskNeutralDensityCalculator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SquareRootProcessRNDCalculator, name)
    __repr__ = _swig_repr

    def __init__(self, v0, kappa, theta, sigma):
        this = _QuantLib.new_SquareRootProcessRNDCalculator(v0, kappa, theta, sigma)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def stationary_pdf(self, v):
        return _QuantLib.SquareRootProcessRNDCalculator_stationary_pdf(self, v)

    def stationary_cdf(self, v):
        return _QuantLib.SquareRootProcessRNDCalculator_stationary_cdf(self, v)

    def stationary_invcdf(self, q):
        return _QuantLib.SquareRootProcessRNDCalculator_stationary_invcdf(self, q)
    __swig_destroy__ = _QuantLib.delete_SquareRootProcessRNDCalculator
    __del__ = lambda self: None
SquareRootProcessRNDCalculator_swigregister = _QuantLib.SquareRootProcessRNDCalculator_swigregister
SquareRootProcessRNDCalculator_swigregister(SquareRootProcessRNDCalculator)

class Rounding(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rounding, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rounding, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_Rounding()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, value):
        return _QuantLib.Rounding___call__(self, value)
    __swig_destroy__ = _QuantLib.delete_Rounding
    __del__ = lambda self: None
Rounding_swigregister = _QuantLib.Rounding_swigregister
Rounding_swigregister(Rounding)

class UpRounding(Rounding):
    __swig_setmethods__ = {}
    for _s in [Rounding]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpRounding, name, value)
    __swig_getmethods__ = {}
    for _s in [Rounding]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpRounding, name)
    __repr__ = _swig_repr

    def __init__(self, precision, digit=5):
        this = _QuantLib.new_UpRounding(precision, digit)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_UpRounding
    __del__ = lambda self: None
UpRounding_swigregister = _QuantLib.UpRounding_swigregister
UpRounding_swigregister(UpRounding)

class DownRounding(Rounding):
    __swig_setmethods__ = {}
    for _s in [Rounding]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DownRounding, name, value)
    __swig_getmethods__ = {}
    for _s in [Rounding]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DownRounding, name)
    __repr__ = _swig_repr

    def __init__(self, precision, digit=5):
        this = _QuantLib.new_DownRounding(precision, digit)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_DownRounding
    __del__ = lambda self: None
DownRounding_swigregister = _QuantLib.DownRounding_swigregister
DownRounding_swigregister(DownRounding)

class ClosestRounding(Rounding):
    __swig_setmethods__ = {}
    for _s in [Rounding]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClosestRounding, name, value)
    __swig_getmethods__ = {}
    for _s in [Rounding]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClosestRounding, name)
    __repr__ = _swig_repr

    def __init__(self, precision, digit=5):
        this = _QuantLib.new_ClosestRounding(precision, digit)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ClosestRounding
    __del__ = lambda self: None
ClosestRounding_swigregister = _QuantLib.ClosestRounding_swigregister
ClosestRounding_swigregister(ClosestRounding)

class CeilingTruncation(Rounding):
    __swig_setmethods__ = {}
    for _s in [Rounding]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CeilingTruncation, name, value)
    __swig_getmethods__ = {}
    for _s in [Rounding]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CeilingTruncation, name)
    __repr__ = _swig_repr

    def __init__(self, precision, digit=5):
        this = _QuantLib.new_CeilingTruncation(precision, digit)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CeilingTruncation
    __del__ = lambda self: None
CeilingTruncation_swigregister = _QuantLib.CeilingTruncation_swigregister
CeilingTruncation_swigregister(CeilingTruncation)

class FloorTruncation(Rounding):
    __swig_setmethods__ = {}
    for _s in [Rounding]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloorTruncation, name, value)
    __swig_getmethods__ = {}
    for _s in [Rounding]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloorTruncation, name)
    __repr__ = _swig_repr

    def __init__(self, precision, digit=5):
        this = _QuantLib.new_FloorTruncation(precision, digit)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FloorTruncation
    __del__ = lambda self: None
FloorTruncation_swigregister = _QuantLib.FloorTruncation_swigregister
FloorTruncation_swigregister(FloorTruncation)

class SampledCurve(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampledCurve, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SampledCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_SampledCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def grid(self):
        return _QuantLib.SampledCurve_grid(self)

    def values(self):
        return _QuantLib.SampledCurve_values(self)

    def gridValue(self, i):
        return _QuantLib.SampledCurve_gridValue(self, i)

    def value(self, i):
        return _QuantLib.SampledCurve_value(self, i)

    def size(self):
        return _QuantLib.SampledCurve_size(self)

    def empty(self):
        return _QuantLib.SampledCurve_empty(self)

    def setGrid(self, arg2):
        return _QuantLib.SampledCurve_setGrid(self, arg2)

    def setValues(self, arg2):
        return _QuantLib.SampledCurve_setValues(self, arg2)

    def swap(self, arg2):
        return _QuantLib.SampledCurve_swap(self, arg2)

    def setLogGrid(self, min, max):
        return _QuantLib.SampledCurve_setLogGrid(self, min, max)

    def regridLogGrid(self, min, max):
        return _QuantLib.SampledCurve_regridLogGrid(self, min, max)

    def shiftGrid(self, s):
        return _QuantLib.SampledCurve_shiftGrid(self, s)

    def scaleGrid(self, s):
        return _QuantLib.SampledCurve_scaleGrid(self, s)

    def regrid(self, arg2):
        return _QuantLib.SampledCurve_regrid(self, arg2)
    __swig_destroy__ = _QuantLib.delete_SampledCurve
    __del__ = lambda self: None
SampledCurve_swigregister = _QuantLib.SampledCurve_swigregister
SampledCurve_swigregister(SampledCurve)

class Settings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Settings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Settings, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        instance = staticmethod(_QuantLib.Settings_instance)
    else:
        instance = _QuantLib.Settings_instance

    def getEvaluationDate(self):
        return _QuantLib.Settings_getEvaluationDate(self)

    def setEvaluationDate(self, d):
        return _QuantLib.Settings_setEvaluationDate(self, d)

    def includeReferenceDateEvents(self, b):
        return _QuantLib.Settings_includeReferenceDateEvents(self, b)

    def includeTodaysCashFlows(self, b):
        return _QuantLib.Settings_includeTodaysCashFlows(self, b)

    def setEnforcesTodaysHistoricFixings(self, b):
        return _QuantLib.Settings_setEnforcesTodaysHistoricFixings(self, b)

    def getEnforcesTodaysHistoricFixings(self):
        return _QuantLib.Settings_getEnforcesTodaysHistoricFixings(self)

    evaluationDate = property(
        getEvaluationDate, setEvaluationDate, None)
    includeReferenceDateCashFlows = property(
        None, includeReferenceDateEvents, None)
    includeReferenceDateEvents = property(
        None, includeReferenceDateEvents, None)
    includeTodaysCashFlows = property(
        None, includeTodaysCashFlows, None)
    enforcesTodaysHistoricFixings = property(
        getEnforcesTodaysHistoricFixings, setEnforcesTodaysHistoricFixings, None)

    __swig_destroy__ = _QuantLib.delete_Settings
    __del__ = lambda self: None
Settings_swigregister = _QuantLib.Settings_swigregister
Settings_swigregister(Settings)

def Settings_instance():
    return _QuantLib.Settings_instance()
Settings_instance = _QuantLib.Settings_instance

class SavedSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SavedSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SavedSettings, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_SavedSettings()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SavedSettings
    __del__ = lambda self: None
SavedSettings_swigregister = _QuantLib.SavedSettings_swigregister
SavedSettings_swigregister(SavedSettings)

class BrownianGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrownianGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BrownianGenerator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def nextStep(self, arg2):
        return _QuantLib.BrownianGenerator_nextStep(self, arg2)

    def nextPath(self):
        return _QuantLib.BrownianGenerator_nextPath(self)

    def numberOfFactors(self):
        return _QuantLib.BrownianGenerator_numberOfFactors(self)

    def numberOfSteps(self):
        return _QuantLib.BrownianGenerator_numberOfSteps(self)
    __swig_destroy__ = _QuantLib.delete_BrownianGenerator
    __del__ = lambda self: None
BrownianGenerator_swigregister = _QuantLib.BrownianGenerator_swigregister
BrownianGenerator_swigregister(BrownianGenerator)

class MTBrownianGenerator(BrownianGenerator):
    __swig_setmethods__ = {}
    for _s in [BrownianGenerator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MTBrownianGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [BrownianGenerator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MTBrownianGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, factors, steps, seed=0):
        this = _QuantLib.new_MTBrownianGenerator(factors, steps, seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MTBrownianGenerator
    __del__ = lambda self: None
MTBrownianGenerator_swigregister = _QuantLib.MTBrownianGenerator_swigregister
MTBrownianGenerator_swigregister(MTBrownianGenerator)

class SobolBrownianGenerator(BrownianGenerator):
    __swig_setmethods__ = {}
    for _s in [BrownianGenerator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SobolBrownianGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [BrownianGenerator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SobolBrownianGenerator, name)
    __repr__ = _swig_repr
    Factors = _QuantLib.SobolBrownianGenerator_Factors
    Steps = _QuantLib.SobolBrownianGenerator_Steps
    Diagonal = _QuantLib.SobolBrownianGenerator_Diagonal

    def __init__(self, *args):
        this = _QuantLib.new_SobolBrownianGenerator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def orderedIndices(self):
        return _QuantLib.SobolBrownianGenerator_orderedIndices(self)

    def transform(self, variates):
        return _QuantLib.SobolBrownianGenerator_transform(self, variates)
    __swig_destroy__ = _QuantLib.delete_SobolBrownianGenerator
    __del__ = lambda self: None
SobolBrownianGenerator_swigregister = _QuantLib.SobolBrownianGenerator_swigregister
SobolBrownianGenerator_swigregister(SobolBrownianGenerator)

class BrownianGeneratorFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrownianGeneratorFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BrownianGeneratorFactory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def create(self, factors, steps):
        return _QuantLib.BrownianGeneratorFactory_create(self, factors, steps)
    __swig_destroy__ = _QuantLib.delete_BrownianGeneratorFactory
    __del__ = lambda self: None
BrownianGeneratorFactory_swigregister = _QuantLib.BrownianGeneratorFactory_swigregister
BrownianGeneratorFactory_swigregister(BrownianGeneratorFactory)

class MTBrownianGeneratorFactory(BrownianGeneratorFactory):
    __swig_setmethods__ = {}
    for _s in [BrownianGeneratorFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MTBrownianGeneratorFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [BrownianGeneratorFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MTBrownianGeneratorFactory, name)
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        this = _QuantLib.new_MTBrownianGeneratorFactory(seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MTBrownianGeneratorFactory
    __del__ = lambda self: None
MTBrownianGeneratorFactory_swigregister = _QuantLib.MTBrownianGeneratorFactory_swigregister
MTBrownianGeneratorFactory_swigregister(MTBrownianGeneratorFactory)

class SobolBrownianGeneratorFactory(BrownianGeneratorFactory):
    __swig_setmethods__ = {}
    for _s in [BrownianGeneratorFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SobolBrownianGeneratorFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [BrownianGeneratorFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SobolBrownianGeneratorFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_SobolBrownianGeneratorFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SobolBrownianGeneratorFactory
    __del__ = lambda self: None
SobolBrownianGeneratorFactory_swigregister = _QuantLib.SobolBrownianGeneratorFactory_swigregister
SobolBrownianGeneratorFactory_swigregister(SobolBrownianGeneratorFactory)

class HestonSLVMCModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HestonSLVMCModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HestonSLVMCModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_HestonSLVMCModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def hestonProcess(self):
        return _QuantLib.HestonSLVMCModel_hestonProcess(self)

    def localVol(self):
        return _QuantLib.HestonSLVMCModel_localVol(self)

    def leverageFunction(self):
        return _QuantLib.HestonSLVMCModel_leverageFunction(self)
    __swig_destroy__ = _QuantLib.delete_HestonSLVMCModel
    __del__ = lambda self: None
HestonSLVMCModel_swigregister = _QuantLib.HestonSLVMCModel_swigregister
HestonSLVMCModel_swigregister(HestonSLVMCModel)

class HestonSLVFokkerPlanckFdmParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HestonSLVFokkerPlanckFdmParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HestonSLVFokkerPlanckFdmParams, name)
    __repr__ = _swig_repr

    def __init__(self, xGrid, vGrid, tMaxStepsPerYear, tMinStepsPerYear, tStepNumberDecay, nRannacherTimeSteps, predictionCorretionSteps, x0Density, localVolEpsProb, maxIntegrationIterations, vLowerEps, vUpperEps, vMin, v0Density, vLowerBoundDensity, vUpperBoundDensity, leverageFctPropEps, greensAlgorithm, trafoType, schemeDesc):
        this = _QuantLib.new_HestonSLVFokkerPlanckFdmParams(xGrid, vGrid, tMaxStepsPerYear, tMinStepsPerYear, tStepNumberDecay, nRannacherTimeSteps, predictionCorretionSteps, x0Density, localVolEpsProb, maxIntegrationIterations, vLowerEps, vUpperEps, vMin, v0Density, vLowerBoundDensity, vUpperBoundDensity, leverageFctPropEps, greensAlgorithm, trafoType, schemeDesc)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_HestonSLVFokkerPlanckFdmParams
    __del__ = lambda self: None
HestonSLVFokkerPlanckFdmParams_swigregister = _QuantLib.HestonSLVFokkerPlanckFdmParams_swigregister
HestonSLVFokkerPlanckFdmParams_swigregister(HestonSLVFokkerPlanckFdmParams)

class HestonSLVFDMModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HestonSLVFDMModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HestonSLVFDMModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_HestonSLVFDMModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def hestonProcess(self):
        return _QuantLib.HestonSLVFDMModel_hestonProcess(self)

    def localVol(self):
        return _QuantLib.HestonSLVFDMModel_localVol(self)

    def leverageFunction(self):
        return _QuantLib.HestonSLVFDMModel_leverageFunction(self)

    def logEntries(self):
        return _QuantLib.HestonSLVFDMModel_logEntries(self)
    __swig_destroy__ = _QuantLib.delete_HestonSLVFDMModel
    __del__ = lambda self: None
HestonSLVFDMModel_swigregister = _QuantLib.HestonSLVFDMModel_swigregister
HestonSLVFDMModel_swigregister(HestonSLVFDMModel)

class HestonSLVFDMModelLogEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HestonSLVFDMModelLogEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HestonSLVFDMModelLogEntry, name)
    __repr__ = _swig_repr
    __swig_getmethods__["t"] = _QuantLib.HestonSLVFDMModelLogEntry_t_get
    if _newclass:
        t = _swig_property(_QuantLib.HestonSLVFDMModelLogEntry_t_get)
    __swig_getmethods__["prob"] = _QuantLib.HestonSLVFDMModelLogEntry_prob_get
    if _newclass:
        prob = _swig_property(_QuantLib.HestonSLVFDMModelLogEntry_prob_get)
    __swig_getmethods__["mesher"] = _QuantLib.HestonSLVFDMModelLogEntry_mesher_get
    if _newclass:
        mesher = _swig_property(_QuantLib.HestonSLVFDMModelLogEntry_mesher_get)

    def __init__(self):
        this = _QuantLib.new_HestonSLVFDMModelLogEntry()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_HestonSLVFDMModelLogEntry
    __del__ = lambda self: None
HestonSLVFDMModelLogEntry_swigregister = _QuantLib.HestonSLVFDMModelLogEntry_swigregister
HestonSLVFDMModelLogEntry_swigregister(HestonSLVFDMModelLogEntry)

class SabrSmileSection(SmileSection):
    __swig_setmethods__ = {}
    for _s in [SmileSection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SabrSmileSection, name, value)
    __swig_getmethods__ = {}
    for _s in [SmileSection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SabrSmileSection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_SabrSmileSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def alpha(self):
        return _QuantLib.SabrSmileSection_alpha(self)

    def beta(self):
        return _QuantLib.SabrSmileSection_beta(self)

    def nu(self):
        return _QuantLib.SabrSmileSection_nu(self)

    def rho(self):
        return _QuantLib.SabrSmileSection_rho(self)
    __swig_destroy__ = _QuantLib.delete_SabrSmileSection
    __del__ = lambda self: None
SabrSmileSection_swigregister = _QuantLib.SabrSmileSection_swigregister
SabrSmileSection_swigregister(SabrSmileSection)

class FlatSmileSection(SmileSection):
    __swig_setmethods__ = {}
    for _s in [SmileSection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlatSmileSection, name, value)
    __swig_getmethods__ = {}
    for _s in [SmileSection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FlatSmileSection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FlatSmileSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FlatSmileSection
    __del__ = lambda self: None
FlatSmileSection_swigregister = _QuantLib.FlatSmileSection_swigregister
FlatSmileSection_swigregister(FlatSmileSection)

class LinearInterpolatedSmileSection(SmileSection):
    __swig_setmethods__ = {}
    for _s in [SmileSection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearInterpolatedSmileSection, name, value)
    __swig_getmethods__ = {}
    for _s in [SmileSection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearInterpolatedSmileSection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_LinearInterpolatedSmileSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_LinearInterpolatedSmileSection
    __del__ = lambda self: None
LinearInterpolatedSmileSection_swigregister = _QuantLib.LinearInterpolatedSmileSection_swigregister
LinearInterpolatedSmileSection_swigregister(LinearInterpolatedSmileSection)

class CubicInterpolatedSmileSection(SmileSection):
    __swig_setmethods__ = {}
    for _s in [SmileSection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CubicInterpolatedSmileSection, name, value)
    __swig_getmethods__ = {}
    for _s in [SmileSection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CubicInterpolatedSmileSection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_CubicInterpolatedSmileSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CubicInterpolatedSmileSection
    __del__ = lambda self: None
CubicInterpolatedSmileSection_swigregister = _QuantLib.CubicInterpolatedSmileSection_swigregister
CubicInterpolatedSmileSection_swigregister(CubicInterpolatedSmileSection)

class MonotonicCubicInterpolatedSmileSection(SmileSection):
    __swig_setmethods__ = {}
    for _s in [SmileSection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonotonicCubicInterpolatedSmileSection, name, value)
    __swig_getmethods__ = {}
    for _s in [SmileSection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MonotonicCubicInterpolatedSmileSection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_MonotonicCubicInterpolatedSmileSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_MonotonicCubicInterpolatedSmileSection
    __del__ = lambda self: None
MonotonicCubicInterpolatedSmileSection_swigregister = _QuantLib.MonotonicCubicInterpolatedSmileSection_swigregister
MonotonicCubicInterpolatedSmileSection_swigregister(MonotonicCubicInterpolatedSmileSection)

class SplineCubicInterpolatedSmileSection(SmileSection):
    __swig_setmethods__ = {}
    for _s in [SmileSection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SplineCubicInterpolatedSmileSection, name, value)
    __swig_getmethods__ = {}
    for _s in [SmileSection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SplineCubicInterpolatedSmileSection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_SplineCubicInterpolatedSmileSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SplineCubicInterpolatedSmileSection
    __del__ = lambda self: None
SplineCubicInterpolatedSmileSection_swigregister = _QuantLib.SplineCubicInterpolatedSmileSection_swigregister
SplineCubicInterpolatedSmileSection_swigregister(SplineCubicInterpolatedSmileSection)

class KahaleSmileSection(SmileSection):
    __swig_setmethods__ = {}
    for _s in [SmileSection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KahaleSmileSection, name, value)
    __swig_getmethods__ = {}
    for _s in [SmileSection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KahaleSmileSection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_KahaleSmileSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_KahaleSmileSection
    __del__ = lambda self: None
KahaleSmileSection_swigregister = _QuantLib.KahaleSmileSection_swigregister
KahaleSmileSection_swigregister(KahaleSmileSection)

class ZabrShortMaturityLognormal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZabrShortMaturityLognormal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZabrShortMaturityLognormal, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_ZabrShortMaturityLognormal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ZabrShortMaturityLognormal
    __del__ = lambda self: None
ZabrShortMaturityLognormal_swigregister = _QuantLib.ZabrShortMaturityLognormal_swigregister
ZabrShortMaturityLognormal_swigregister(ZabrShortMaturityLognormal)

class ZabrShortMaturityNormal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZabrShortMaturityNormal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZabrShortMaturityNormal, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_ZabrShortMaturityNormal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ZabrShortMaturityNormal
    __del__ = lambda self: None
ZabrShortMaturityNormal_swigregister = _QuantLib.ZabrShortMaturityNormal_swigregister
ZabrShortMaturityNormal_swigregister(ZabrShortMaturityNormal)

class ZabrLocalVolatility(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZabrLocalVolatility, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZabrLocalVolatility, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_ZabrLocalVolatility()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ZabrLocalVolatility
    __del__ = lambda self: None
ZabrLocalVolatility_swigregister = _QuantLib.ZabrLocalVolatility_swigregister
ZabrLocalVolatility_swigregister(ZabrLocalVolatility)

class ZabrFullFd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZabrFullFd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZabrFullFd, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_ZabrFullFd()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ZabrFullFd
    __del__ = lambda self: None
ZabrFullFd_swigregister = _QuantLib.ZabrFullFd_swigregister
ZabrFullFd_swigregister(ZabrFullFd)

class ZabrShortMaturityLognormalSmileSection(SmileSection):
    __swig_setmethods__ = {}
    for _s in [SmileSection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZabrShortMaturityLognormalSmileSection, name, value)
    __swig_getmethods__ = {}
    for _s in [SmileSection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZabrShortMaturityLognormalSmileSection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ZabrShortMaturityLognormalSmileSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ZabrShortMaturityLognormalSmileSection
    __del__ = lambda self: None
ZabrShortMaturityLognormalSmileSection_swigregister = _QuantLib.ZabrShortMaturityLognormalSmileSection_swigregister
ZabrShortMaturityLognormalSmileSection_swigregister(ZabrShortMaturityLognormalSmileSection)

class ZabrShortMaturityNormalSmileSection(SmileSection):
    __swig_setmethods__ = {}
    for _s in [SmileSection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZabrShortMaturityNormalSmileSection, name, value)
    __swig_getmethods__ = {}
    for _s in [SmileSection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZabrShortMaturityNormalSmileSection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ZabrShortMaturityNormalSmileSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ZabrShortMaturityNormalSmileSection
    __del__ = lambda self: None
ZabrShortMaturityNormalSmileSection_swigregister = _QuantLib.ZabrShortMaturityNormalSmileSection_swigregister
ZabrShortMaturityNormalSmileSection_swigregister(ZabrShortMaturityNormalSmileSection)

class ZabrLocalVolatilitySmileSection(SmileSection):
    __swig_setmethods__ = {}
    for _s in [SmileSection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZabrLocalVolatilitySmileSection, name, value)
    __swig_getmethods__ = {}
    for _s in [SmileSection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZabrLocalVolatilitySmileSection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ZabrLocalVolatilitySmileSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ZabrLocalVolatilitySmileSection
    __del__ = lambda self: None
ZabrLocalVolatilitySmileSection_swigregister = _QuantLib.ZabrLocalVolatilitySmileSection_swigregister
ZabrLocalVolatilitySmileSection_swigregister(ZabrLocalVolatilitySmileSection)

class ZabrFullFdSmileSection(SmileSection):
    __swig_setmethods__ = {}
    for _s in [SmileSection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZabrFullFdSmileSection, name, value)
    __swig_getmethods__ = {}
    for _s in [SmileSection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZabrFullFdSmileSection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ZabrFullFdSmileSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ZabrFullFdSmileSection
    __del__ = lambda self: None
ZabrFullFdSmileSection_swigregister = _QuantLib.ZabrFullFdSmileSection_swigregister
ZabrFullFdSmileSection_swigregister(ZabrFullFdSmileSection)

class ZabrShortMaturityLognormalInterpolatedSmileSection(SmileSection):
    __swig_setmethods__ = {}
    for _s in [SmileSection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZabrShortMaturityLognormalInterpolatedSmileSection, name, value)
    __swig_getmethods__ = {}
    for _s in [SmileSection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZabrShortMaturityLognormalInterpolatedSmileSection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ZabrShortMaturityLognormalInterpolatedSmileSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def alpha(self):
        return _QuantLib.ZabrShortMaturityLognormalInterpolatedSmileSection_alpha(self)

    def beta(self):
        return _QuantLib.ZabrShortMaturityLognormalInterpolatedSmileSection_beta(self)

    def nu(self):
        return _QuantLib.ZabrShortMaturityLognormalInterpolatedSmileSection_nu(self)

    def rho(self):
        return _QuantLib.ZabrShortMaturityLognormalInterpolatedSmileSection_rho(self)

    def rmsError(self):
        return _QuantLib.ZabrShortMaturityLognormalInterpolatedSmileSection_rmsError(self)

    def maxError(self):
        return _QuantLib.ZabrShortMaturityLognormalInterpolatedSmileSection_maxError(self)

    def endCriteria(self):
        return _QuantLib.ZabrShortMaturityLognormalInterpolatedSmileSection_endCriteria(self)
    __swig_destroy__ = _QuantLib.delete_ZabrShortMaturityLognormalInterpolatedSmileSection
    __del__ = lambda self: None
ZabrShortMaturityLognormalInterpolatedSmileSection_swigregister = _QuantLib.ZabrShortMaturityLognormalInterpolatedSmileSection_swigregister
ZabrShortMaturityLognormalInterpolatedSmileSection_swigregister(ZabrShortMaturityLognormalInterpolatedSmileSection)

class ZabrShortMaturityNormalInterpolatedSmileSection(SmileSection):
    __swig_setmethods__ = {}
    for _s in [SmileSection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZabrShortMaturityNormalInterpolatedSmileSection, name, value)
    __swig_getmethods__ = {}
    for _s in [SmileSection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZabrShortMaturityNormalInterpolatedSmileSection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ZabrShortMaturityNormalInterpolatedSmileSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def alpha(self):
        return _QuantLib.ZabrShortMaturityNormalInterpolatedSmileSection_alpha(self)

    def beta(self):
        return _QuantLib.ZabrShortMaturityNormalInterpolatedSmileSection_beta(self)

    def nu(self):
        return _QuantLib.ZabrShortMaturityNormalInterpolatedSmileSection_nu(self)

    def rho(self):
        return _QuantLib.ZabrShortMaturityNormalInterpolatedSmileSection_rho(self)

    def rmsError(self):
        return _QuantLib.ZabrShortMaturityNormalInterpolatedSmileSection_rmsError(self)

    def maxError(self):
        return _QuantLib.ZabrShortMaturityNormalInterpolatedSmileSection_maxError(self)

    def endCriteria(self):
        return _QuantLib.ZabrShortMaturityNormalInterpolatedSmileSection_endCriteria(self)
    __swig_destroy__ = _QuantLib.delete_ZabrShortMaturityNormalInterpolatedSmileSection
    __del__ = lambda self: None
ZabrShortMaturityNormalInterpolatedSmileSection_swigregister = _QuantLib.ZabrShortMaturityNormalInterpolatedSmileSection_swigregister
ZabrShortMaturityNormalInterpolatedSmileSection_swigregister(ZabrShortMaturityNormalInterpolatedSmileSection)

class ZabrLocalVolatilityInterpolatedSmileSection(SmileSection):
    __swig_setmethods__ = {}
    for _s in [SmileSection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZabrLocalVolatilityInterpolatedSmileSection, name, value)
    __swig_getmethods__ = {}
    for _s in [SmileSection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZabrLocalVolatilityInterpolatedSmileSection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ZabrLocalVolatilityInterpolatedSmileSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def alpha(self):
        return _QuantLib.ZabrLocalVolatilityInterpolatedSmileSection_alpha(self)

    def beta(self):
        return _QuantLib.ZabrLocalVolatilityInterpolatedSmileSection_beta(self)

    def nu(self):
        return _QuantLib.ZabrLocalVolatilityInterpolatedSmileSection_nu(self)

    def rho(self):
        return _QuantLib.ZabrLocalVolatilityInterpolatedSmileSection_rho(self)

    def rmsError(self):
        return _QuantLib.ZabrLocalVolatilityInterpolatedSmileSection_rmsError(self)

    def maxError(self):
        return _QuantLib.ZabrLocalVolatilityInterpolatedSmileSection_maxError(self)

    def endCriteria(self):
        return _QuantLib.ZabrLocalVolatilityInterpolatedSmileSection_endCriteria(self)
    __swig_destroy__ = _QuantLib.delete_ZabrLocalVolatilityInterpolatedSmileSection
    __del__ = lambda self: None
ZabrLocalVolatilityInterpolatedSmileSection_swigregister = _QuantLib.ZabrLocalVolatilityInterpolatedSmileSection_swigregister
ZabrLocalVolatilityInterpolatedSmileSection_swigregister(ZabrLocalVolatilityInterpolatedSmileSection)

class ZabrFullFdInterpolatedSmileSection(SmileSection):
    __swig_setmethods__ = {}
    for _s in [SmileSection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZabrFullFdInterpolatedSmileSection, name, value)
    __swig_getmethods__ = {}
    for _s in [SmileSection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZabrFullFdInterpolatedSmileSection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ZabrFullFdInterpolatedSmileSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def alpha(self):
        return _QuantLib.ZabrFullFdInterpolatedSmileSection_alpha(self)

    def beta(self):
        return _QuantLib.ZabrFullFdInterpolatedSmileSection_beta(self)

    def nu(self):
        return _QuantLib.ZabrFullFdInterpolatedSmileSection_nu(self)

    def rho(self):
        return _QuantLib.ZabrFullFdInterpolatedSmileSection_rho(self)

    def rmsError(self):
        return _QuantLib.ZabrFullFdInterpolatedSmileSection_rmsError(self)

    def maxError(self):
        return _QuantLib.ZabrFullFdInterpolatedSmileSection_maxError(self)

    def endCriteria(self):
        return _QuantLib.ZabrFullFdInterpolatedSmileSection_endCriteria(self)
    __swig_destroy__ = _QuantLib.delete_ZabrFullFdInterpolatedSmileSection
    __del__ = lambda self: None
ZabrFullFdInterpolatedSmileSection_swigregister = _QuantLib.ZabrFullFdInterpolatedSmileSection_swigregister
ZabrFullFdInterpolatedSmileSection_swigregister(ZabrFullFdInterpolatedSmileSection)

class NoArbSabrSmileSection(SmileSection):
    __swig_setmethods__ = {}
    for _s in [SmileSection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoArbSabrSmileSection, name, value)
    __swig_getmethods__ = {}
    for _s in [SmileSection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoArbSabrSmileSection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_NoArbSabrSmileSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_NoArbSabrSmileSection
    __del__ = lambda self: None
NoArbSabrSmileSection_swigregister = _QuantLib.NoArbSabrSmileSection_swigregister
NoArbSabrSmileSection_swigregister(NoArbSabrSmileSection)

class NoArbSabrInterpolatedSmileSection(SmileSection):
    __swig_setmethods__ = {}
    for _s in [SmileSection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoArbSabrInterpolatedSmileSection, name, value)
    __swig_getmethods__ = {}
    for _s in [SmileSection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoArbSabrInterpolatedSmileSection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_NoArbSabrInterpolatedSmileSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def alpha(self):
        return _QuantLib.NoArbSabrInterpolatedSmileSection_alpha(self)

    def beta(self):
        return _QuantLib.NoArbSabrInterpolatedSmileSection_beta(self)

    def nu(self):
        return _QuantLib.NoArbSabrInterpolatedSmileSection_nu(self)

    def rho(self):
        return _QuantLib.NoArbSabrInterpolatedSmileSection_rho(self)

    def rmsError(self):
        return _QuantLib.NoArbSabrInterpolatedSmileSection_rmsError(self)

    def maxError(self):
        return _QuantLib.NoArbSabrInterpolatedSmileSection_maxError(self)

    def endCriteria(self):
        return _QuantLib.NoArbSabrInterpolatedSmileSection_endCriteria(self)
    __swig_destroy__ = _QuantLib.delete_NoArbSabrInterpolatedSmileSection
    __del__ = lambda self: None
NoArbSabrInterpolatedSmileSection_swigregister = _QuantLib.NoArbSabrInterpolatedSmileSection_swigregister
NoArbSabrInterpolatedSmileSection_swigregister(NoArbSabrInterpolatedSmileSection)


def sabrVolatility(strike, forward, expiryTime, alpha, beta, nu, rho):
    return _QuantLib.sabrVolatility(strike, forward, expiryTime, alpha, beta, nu, rho)
sabrVolatility = _QuantLib.sabrVolatility

def shiftedSabrVolatility(strike, forward, expiryTime, alpha, beta, nu, rho, shift):
    return _QuantLib.shiftedSabrVolatility(strike, forward, expiryTime, alpha, beta, nu, rho, shift)
shiftedSabrVolatility = _QuantLib.shiftedSabrVolatility

def sabrFlochKennedyVolatility(strike, forward, expiryTime, alpha, beta, nu, rho):
    return _QuantLib.sabrFlochKennedyVolatility(strike, forward, expiryTime, alpha, beta, nu, rho)
sabrFlochKennedyVolatility = _QuantLib.sabrFlochKennedyVolatility
class Brent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Brent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Brent, name)
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations):
        return _QuantLib.Brent_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound):
        return _QuantLib.Brent_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound):
        return _QuantLib.Brent_setUpperBound(self, upperBound)

    def solve(self, *args):
        return _QuantLib.Brent_solve(self, *args)

    def __init__(self):
        this = _QuantLib.new_Brent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Brent
    __del__ = lambda self: None
Brent_swigregister = _QuantLib.Brent_swigregister
Brent_swigregister(Brent)

class Bisection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bisection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bisection, name)
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations):
        return _QuantLib.Bisection_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound):
        return _QuantLib.Bisection_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound):
        return _QuantLib.Bisection_setUpperBound(self, upperBound)

    def solve(self, *args):
        return _QuantLib.Bisection_solve(self, *args)

    def __init__(self):
        this = _QuantLib.new_Bisection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Bisection
    __del__ = lambda self: None
Bisection_swigregister = _QuantLib.Bisection_swigregister
Bisection_swigregister(Bisection)

class FalsePosition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FalsePosition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FalsePosition, name)
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations):
        return _QuantLib.FalsePosition_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound):
        return _QuantLib.FalsePosition_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound):
        return _QuantLib.FalsePosition_setUpperBound(self, upperBound)

    def solve(self, *args):
        return _QuantLib.FalsePosition_solve(self, *args)

    def __init__(self):
        this = _QuantLib.new_FalsePosition()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FalsePosition
    __del__ = lambda self: None
FalsePosition_swigregister = _QuantLib.FalsePosition_swigregister
FalsePosition_swigregister(FalsePosition)

class Ridder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ridder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ridder, name)
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations):
        return _QuantLib.Ridder_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound):
        return _QuantLib.Ridder_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound):
        return _QuantLib.Ridder_setUpperBound(self, upperBound)

    def solve(self, *args):
        return _QuantLib.Ridder_solve(self, *args)

    def __init__(self):
        this = _QuantLib.new_Ridder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Ridder
    __del__ = lambda self: None
Ridder_swigregister = _QuantLib.Ridder_swigregister
Ridder_swigregister(Ridder)

class Secant(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Secant, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Secant, name)
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations):
        return _QuantLib.Secant_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound):
        return _QuantLib.Secant_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound):
        return _QuantLib.Secant_setUpperBound(self, upperBound)

    def solve(self, *args):
        return _QuantLib.Secant_solve(self, *args)

    def __init__(self):
        this = _QuantLib.new_Secant()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Secant
    __del__ = lambda self: None
Secant_swigregister = _QuantLib.Secant_swigregister
Secant_swigregister(Secant)

class Newton(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Newton, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Newton, name)
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations):
        return _QuantLib.Newton_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound):
        return _QuantLib.Newton_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound):
        return _QuantLib.Newton_setUpperBound(self, upperBound)

    def solve(self, *args):
        return _QuantLib.Newton_solve(self, *args)

    def __init__(self):
        this = _QuantLib.new_Newton()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Newton
    __del__ = lambda self: None
Newton_swigregister = _QuantLib.Newton_swigregister
Newton_swigregister(Newton)

class NewtonSafe(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NewtonSafe, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NewtonSafe, name)
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations):
        return _QuantLib.NewtonSafe_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound):
        return _QuantLib.NewtonSafe_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound):
        return _QuantLib.NewtonSafe_setUpperBound(self, upperBound)

    def solve(self, *args):
        return _QuantLib.NewtonSafe_solve(self, *args)

    def __init__(self):
        this = _QuantLib.new_NewtonSafe()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_NewtonSafe
    __del__ = lambda self: None
NewtonSafe_swigregister = _QuantLib.NewtonSafe_swigregister
NewtonSafe_swigregister(NewtonSafe)

class Statistics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Statistics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Statistics, name)
    __repr__ = _swig_repr

    def samples(self):
        return _QuantLib.Statistics_samples(self)

    def weightSum(self):
        return _QuantLib.Statistics_weightSum(self)

    def mean(self):
        return _QuantLib.Statistics_mean(self)

    def variance(self):
        return _QuantLib.Statistics_variance(self)

    def standardDeviation(self):
        return _QuantLib.Statistics_standardDeviation(self)

    def errorEstimate(self):
        return _QuantLib.Statistics_errorEstimate(self)

    def skewness(self):
        return _QuantLib.Statistics_skewness(self)

    def kurtosis(self):
        return _QuantLib.Statistics_kurtosis(self)

    def min(self):
        return _QuantLib.Statistics_min(self)

    def max(self):
        return _QuantLib.Statistics_max(self)

    def reset(self):
        return _QuantLib.Statistics_reset(self)

    def add(self, *args):
        return _QuantLib.Statistics_add(self, *args)

    def __init__(self):
        this = _QuantLib.new_Statistics()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Statistics
    __del__ = lambda self: None
Statistics_swigregister = _QuantLib.Statistics_swigregister
Statistics_swigregister(Statistics)

class IncrementalStatistics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncrementalStatistics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IncrementalStatistics, name)
    __repr__ = _swig_repr

    def samples(self):
        return _QuantLib.IncrementalStatistics_samples(self)

    def weightSum(self):
        return _QuantLib.IncrementalStatistics_weightSum(self)

    def mean(self):
        return _QuantLib.IncrementalStatistics_mean(self)

    def variance(self):
        return _QuantLib.IncrementalStatistics_variance(self)

    def standardDeviation(self):
        return _QuantLib.IncrementalStatistics_standardDeviation(self)

    def errorEstimate(self):
        return _QuantLib.IncrementalStatistics_errorEstimate(self)

    def skewness(self):
        return _QuantLib.IncrementalStatistics_skewness(self)

    def kurtosis(self):
        return _QuantLib.IncrementalStatistics_kurtosis(self)

    def min(self):
        return _QuantLib.IncrementalStatistics_min(self)

    def max(self):
        return _QuantLib.IncrementalStatistics_max(self)

    def reset(self):
        return _QuantLib.IncrementalStatistics_reset(self)

    def add(self, *args):
        return _QuantLib.IncrementalStatistics_add(self, *args)

    def __init__(self):
        this = _QuantLib.new_IncrementalStatistics()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_IncrementalStatistics
    __del__ = lambda self: None
IncrementalStatistics_swigregister = _QuantLib.IncrementalStatistics_swigregister
IncrementalStatistics_swigregister(IncrementalStatistics)

class RiskStatistics(Statistics):
    __swig_setmethods__ = {}
    for _s in [Statistics]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RiskStatistics, name, value)
    __swig_getmethods__ = {}
    for _s in [Statistics]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RiskStatistics, name)
    __repr__ = _swig_repr

    def semiVariance(self):
        return _QuantLib.RiskStatistics_semiVariance(self)

    def semiDeviation(self):
        return _QuantLib.RiskStatistics_semiDeviation(self)

    def downsideVariance(self):
        return _QuantLib.RiskStatistics_downsideVariance(self)

    def downsideDeviation(self):
        return _QuantLib.RiskStatistics_downsideDeviation(self)

    def regret(self, target):
        return _QuantLib.RiskStatistics_regret(self, target)

    def potentialUpside(self, percentile):
        return _QuantLib.RiskStatistics_potentialUpside(self, percentile)

    def valueAtRisk(self, percentile):
        return _QuantLib.RiskStatistics_valueAtRisk(self, percentile)

    def expectedShortfall(self, percentile):
        return _QuantLib.RiskStatistics_expectedShortfall(self, percentile)

    def shortfall(self, target):
        return _QuantLib.RiskStatistics_shortfall(self, target)

    def averageShortfall(self, target):
        return _QuantLib.RiskStatistics_averageShortfall(self, target)

    def __init__(self):
        this = _QuantLib.new_RiskStatistics()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_RiskStatistics
    __del__ = lambda self: None
RiskStatistics_swigregister = _QuantLib.RiskStatistics_swigregister
RiskStatistics_swigregister(RiskStatistics)

class MultipleStatistics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultipleStatistics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MultipleStatistics, name)
    __repr__ = _swig_repr

    def __init__(self, dimension):
        this = _QuantLib.new_MultipleStatistics(dimension)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def size(self):
        return _QuantLib.MultipleStatistics_size(self)

    def samples(self):
        return _QuantLib.MultipleStatistics_samples(self)

    def weightSum(self):
        return _QuantLib.MultipleStatistics_weightSum(self)

    def mean(self):
        return _QuantLib.MultipleStatistics_mean(self)

    def variance(self):
        return _QuantLib.MultipleStatistics_variance(self)

    def standardDeviation(self):
        return _QuantLib.MultipleStatistics_standardDeviation(self)

    def errorEstimate(self):
        return _QuantLib.MultipleStatistics_errorEstimate(self)

    def skewness(self):
        return _QuantLib.MultipleStatistics_skewness(self)

    def kurtosis(self):
        return _QuantLib.MultipleStatistics_kurtosis(self)

    def min(self):
        return _QuantLib.MultipleStatistics_min(self)

    def max(self):
        return _QuantLib.MultipleStatistics_max(self)

    def covariance(self):
        return _QuantLib.MultipleStatistics_covariance(self)

    def correlation(self):
        return _QuantLib.MultipleStatistics_correlation(self)

    def reset(self):
        return _QuantLib.MultipleStatistics_reset(self)

    def add(self, *args):
        return _QuantLib.MultipleStatistics_add(self, *args)
    __swig_destroy__ = _QuantLib.delete_MultipleStatistics
    __del__ = lambda self: None
MultipleStatistics_swigregister = _QuantLib.MultipleStatistics_swigregister
MultipleStatistics_swigregister(MultipleStatistics)

class SequenceStatistics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SequenceStatistics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SequenceStatistics, name)
    __repr__ = _swig_repr

    def __init__(self, dimension):
        this = _QuantLib.new_SequenceStatistics(dimension)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def size(self):
        return _QuantLib.SequenceStatistics_size(self)

    def samples(self):
        return _QuantLib.SequenceStatistics_samples(self)

    def weightSum(self):
        return _QuantLib.SequenceStatistics_weightSum(self)

    def mean(self):
        return _QuantLib.SequenceStatistics_mean(self)

    def variance(self):
        return _QuantLib.SequenceStatistics_variance(self)

    def standardDeviation(self):
        return _QuantLib.SequenceStatistics_standardDeviation(self)

    def errorEstimate(self):
        return _QuantLib.SequenceStatistics_errorEstimate(self)

    def skewness(self):
        return _QuantLib.SequenceStatistics_skewness(self)

    def kurtosis(self):
        return _QuantLib.SequenceStatistics_kurtosis(self)

    def min(self):
        return _QuantLib.SequenceStatistics_min(self)

    def max(self):
        return _QuantLib.SequenceStatistics_max(self)

    def covariance(self):
        return _QuantLib.SequenceStatistics_covariance(self)

    def correlation(self):
        return _QuantLib.SequenceStatistics_correlation(self)

    def reset(self):
        return _QuantLib.SequenceStatistics_reset(self)

    def add(self, *args):
        return _QuantLib.SequenceStatistics_add(self, *args)
    __swig_destroy__ = _QuantLib.delete_SequenceStatistics
    __del__ = lambda self: None
SequenceStatistics_swigregister = _QuantLib.SequenceStatistics_swigregister
SequenceStatistics_swigregister(SequenceStatistics)

class MultipleIncrementalStatistics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultipleIncrementalStatistics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MultipleIncrementalStatistics, name)
    __repr__ = _swig_repr

    def __init__(self, dimension):
        this = _QuantLib.new_MultipleIncrementalStatistics(dimension)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def size(self):
        return _QuantLib.MultipleIncrementalStatistics_size(self)

    def samples(self):
        return _QuantLib.MultipleIncrementalStatistics_samples(self)

    def weightSum(self):
        return _QuantLib.MultipleIncrementalStatistics_weightSum(self)

    def mean(self):
        return _QuantLib.MultipleIncrementalStatistics_mean(self)

    def variance(self):
        return _QuantLib.MultipleIncrementalStatistics_variance(self)

    def standardDeviation(self):
        return _QuantLib.MultipleIncrementalStatistics_standardDeviation(self)

    def errorEstimate(self):
        return _QuantLib.MultipleIncrementalStatistics_errorEstimate(self)

    def skewness(self):
        return _QuantLib.MultipleIncrementalStatistics_skewness(self)

    def kurtosis(self):
        return _QuantLib.MultipleIncrementalStatistics_kurtosis(self)

    def min(self):
        return _QuantLib.MultipleIncrementalStatistics_min(self)

    def max(self):
        return _QuantLib.MultipleIncrementalStatistics_max(self)

    def covariance(self):
        return _QuantLib.MultipleIncrementalStatistics_covariance(self)

    def correlation(self):
        return _QuantLib.MultipleIncrementalStatistics_correlation(self)

    def reset(self):
        return _QuantLib.MultipleIncrementalStatistics_reset(self)

    def add(self, *args):
        return _QuantLib.MultipleIncrementalStatistics_add(self, *args)
    __swig_destroy__ = _QuantLib.delete_MultipleIncrementalStatistics
    __del__ = lambda self: None
MultipleIncrementalStatistics_swigregister = _QuantLib.MultipleIncrementalStatistics_swigregister
MultipleIncrementalStatistics_swigregister(MultipleIncrementalStatistics)

class StochasticProcess1D(StochasticProcess):
    __swig_setmethods__ = {}
    for _s in [StochasticProcess]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StochasticProcess1D, name, value)
    __swig_getmethods__ = {}
    for _s in [StochasticProcess]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StochasticProcess1D, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def x0(self):
        return _QuantLib.StochasticProcess1D_x0(self)

    def drift(self, t, x):
        return _QuantLib.StochasticProcess1D_drift(self, t, x)

    def diffusion(self, t, x):
        return _QuantLib.StochasticProcess1D_diffusion(self, t, x)

    def expectation(self, t0, x0, dt):
        return _QuantLib.StochasticProcess1D_expectation(self, t0, x0, dt)

    def stdDeviation(self, t0, x0, dt):
        return _QuantLib.StochasticProcess1D_stdDeviation(self, t0, x0, dt)

    def variance(self, t0, x0, dt):
        return _QuantLib.StochasticProcess1D_variance(self, t0, x0, dt)

    def evolve(self, t0, x0, dt, dw):
        return _QuantLib.StochasticProcess1D_evolve(self, t0, x0, dt, dw)

    def apply(self, x0, dx):
        return _QuantLib.StochasticProcess1D_apply(self, x0, dx)
    __swig_destroy__ = _QuantLib.delete_StochasticProcess1D
    __del__ = lambda self: None
StochasticProcess1D_swigregister = _QuantLib.StochasticProcess1D_swigregister
StochasticProcess1D_swigregister(StochasticProcess1D)

class StochasticProcess1DVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StochasticProcess1DVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StochasticProcess1DVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.StochasticProcess1DVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.StochasticProcess1DVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.StochasticProcess1DVector___bool__(self)

    def __len__(self):
        return _QuantLib.StochasticProcess1DVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.StochasticProcess1DVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.StochasticProcess1DVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.StochasticProcess1DVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.StochasticProcess1DVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.StochasticProcess1DVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.StochasticProcess1DVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.StochasticProcess1DVector_pop(self)

    def append(self, x):
        return _QuantLib.StochasticProcess1DVector_append(self, x)

    def empty(self):
        return _QuantLib.StochasticProcess1DVector_empty(self)

    def size(self):
        return _QuantLib.StochasticProcess1DVector_size(self)

    def swap(self, v):
        return _QuantLib.StochasticProcess1DVector_swap(self, v)

    def begin(self):
        return _QuantLib.StochasticProcess1DVector_begin(self)

    def end(self):
        return _QuantLib.StochasticProcess1DVector_end(self)

    def rbegin(self):
        return _QuantLib.StochasticProcess1DVector_rbegin(self)

    def rend(self):
        return _QuantLib.StochasticProcess1DVector_rend(self)

    def clear(self):
        return _QuantLib.StochasticProcess1DVector_clear(self)

    def get_allocator(self):
        return _QuantLib.StochasticProcess1DVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.StochasticProcess1DVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.StochasticProcess1DVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_StochasticProcess1DVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.StochasticProcess1DVector_push_back(self, x)

    def front(self):
        return _QuantLib.StochasticProcess1DVector_front(self)

    def back(self):
        return _QuantLib.StochasticProcess1DVector_back(self)

    def assign(self, n, x):
        return _QuantLib.StochasticProcess1DVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.StochasticProcess1DVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.StochasticProcess1DVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.StochasticProcess1DVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.StochasticProcess1DVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_StochasticProcess1DVector
    __del__ = lambda self: None
StochasticProcess1DVector_swigregister = _QuantLib.StochasticProcess1DVector_swigregister
StochasticProcess1DVector_swigregister(StochasticProcess1DVector)

class StochasticProcessArray(StochasticProcess):
    __swig_setmethods__ = {}
    for _s in [StochasticProcess]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StochasticProcessArray, name, value)
    __swig_getmethods__ = {}
    for _s in [StochasticProcess]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StochasticProcessArray, name)
    __repr__ = _swig_repr

    def __init__(self, array, correlation):
        this = _QuantLib.new_StochasticProcessArray(array, correlation)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_StochasticProcessArray
    __del__ = lambda self: None
StochasticProcessArray_swigregister = _QuantLib.StochasticProcessArray_swigregister
StochasticProcessArray_swigregister(StochasticProcessArray)

class HestonProcess(StochasticProcess):
    __swig_setmethods__ = {}
    for _s in [StochasticProcess]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HestonProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [StochasticProcess]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HestonProcess, name)
    __repr__ = _swig_repr
    PartialTruncation = _QuantLib.HestonProcess_PartialTruncation
    FullTruncation = _QuantLib.HestonProcess_FullTruncation
    Reflection = _QuantLib.HestonProcess_Reflection
    NonCentralChiSquareVariance = _QuantLib.HestonProcess_NonCentralChiSquareVariance
    QuadraticExponential = _QuantLib.HestonProcess_QuadraticExponential
    QuadraticExponentialMartingale = _QuantLib.HestonProcess_QuadraticExponentialMartingale
    BroadieKayaExactSchemeLobatto = _QuantLib.HestonProcess_BroadieKayaExactSchemeLobatto
    BroadieKayaExactSchemeLaguerre = _QuantLib.HestonProcess_BroadieKayaExactSchemeLaguerre
    BroadieKayaExactSchemeTrapezoidal = _QuantLib.HestonProcess_BroadieKayaExactSchemeTrapezoidal

    def __init__(self, *args):
        this = _QuantLib.new_HestonProcess(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def s0(self):
        return _QuantLib.HestonProcess_s0(self)

    def dividendYield(self):
        return _QuantLib.HestonProcess_dividendYield(self)

    def riskFreeRate(self):
        return _QuantLib.HestonProcess_riskFreeRate(self)
    __swig_destroy__ = _QuantLib.delete_HestonProcess
    __del__ = lambda self: None
HestonProcess_swigregister = _QuantLib.HestonProcess_swigregister
HestonProcess_swigregister(HestonProcess)

class G2Process(StochasticProcess):
    __swig_setmethods__ = {}
    for _s in [StochasticProcess]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, G2Process, name, value)
    __swig_getmethods__ = {}
    for _s in [StochasticProcess]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, G2Process, name)
    __repr__ = _swig_repr

    def __init__(self, a, sigma, b, eta, rho):
        this = _QuantLib.new_G2Process(a, sigma, b, eta, rho)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_G2Process
    __del__ = lambda self: None
G2Process_swigregister = _QuantLib.G2Process_swigregister
G2Process_swigregister(G2Process)

class G2ForwardProcess(StochasticProcess):
    __swig_setmethods__ = {}
    for _s in [StochasticProcess]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, G2ForwardProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [StochasticProcess]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, G2ForwardProcess, name)
    __repr__ = _swig_repr

    def __init__(self, a, sigma, b, eta, rho):
        this = _QuantLib.new_G2ForwardProcess(a, sigma, b, eta, rho)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setForwardMeasureTime(self, t):
        return _QuantLib.G2ForwardProcess_setForwardMeasureTime(self, t)
    __swig_destroy__ = _QuantLib.delete_G2ForwardProcess
    __del__ = lambda self: None
G2ForwardProcess_swigregister = _QuantLib.G2ForwardProcess_swigregister
G2ForwardProcess_swigregister(G2ForwardProcess)

class ExtOUWithJumpsProcess(StochasticProcess):
    __swig_setmethods__ = {}
    for _s in [StochasticProcess]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtOUWithJumpsProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [StochasticProcess]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExtOUWithJumpsProcess, name)
    __repr__ = _swig_repr

    def __init__(self, process, Y0, beta, jumpIntensity, eta):
        this = _QuantLib.new_ExtOUWithJumpsProcess(process, Y0, beta, jumpIntensity, eta)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ExtOUWithJumpsProcess
    __del__ = lambda self: None
ExtOUWithJumpsProcess_swigregister = _QuantLib.ExtOUWithJumpsProcess_swigregister
ExtOUWithJumpsProcess_swigregister(ExtOUWithJumpsProcess)

class KlugeExtOUProcess(StochasticProcess):
    __swig_setmethods__ = {}
    for _s in [StochasticProcess]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KlugeExtOUProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [StochasticProcess]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KlugeExtOUProcess, name)
    __repr__ = _swig_repr

    def __init__(self, rho, kluge, extOU):
        this = _QuantLib.new_KlugeExtOUProcess(rho, kluge, extOU)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_KlugeExtOUProcess
    __del__ = lambda self: None
KlugeExtOUProcess_swigregister = _QuantLib.KlugeExtOUProcess_swigregister
KlugeExtOUProcess_swigregister(KlugeExtOUProcess)

class GJRGARCHProcess(StochasticProcess):
    __swig_setmethods__ = {}
    for _s in [StochasticProcess]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GJRGARCHProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [StochasticProcess]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GJRGARCHProcess, name)
    __repr__ = _swig_repr
    PartialTruncation = _QuantLib.GJRGARCHProcess_PartialTruncation
    FullTruncation = _QuantLib.GJRGARCHProcess_FullTruncation
    Reflection = _QuantLib.GJRGARCHProcess_Reflection

    def __init__(self, *args):
        this = _QuantLib.new_GJRGARCHProcess(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def s0(self):
        return _QuantLib.GJRGARCHProcess_s0(self)

    def dividendYield(self):
        return _QuantLib.GJRGARCHProcess_dividendYield(self)

    def riskFreeRate(self):
        return _QuantLib.GJRGARCHProcess_riskFreeRate(self)
    __swig_destroy__ = _QuantLib.delete_GJRGARCHProcess
    __del__ = lambda self: None
GJRGARCHProcess_swigregister = _QuantLib.GJRGARCHProcess_swigregister
GJRGARCHProcess_swigregister(GJRGARCHProcess)

class HestonSLVProcess(StochasticProcess):
    __swig_setmethods__ = {}
    for _s in [StochasticProcess]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HestonSLVProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [StochasticProcess]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HestonSLVProcess, name)
    __repr__ = _swig_repr

    def __init__(self, hestonProcess, leverageFct, mixingFactor=1.0):
        this = _QuantLib.new_HestonSLVProcess(hestonProcess, leverageFct, mixingFactor)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_HestonSLVProcess
    __del__ = lambda self: None
HestonSLVProcess_swigregister = _QuantLib.HestonSLVProcess_swigregister
HestonSLVProcess_swigregister(HestonSLVProcess)

class GeneralizedBlackScholesProcess(StochasticProcess1D):
    __swig_setmethods__ = {}
    for _s in [StochasticProcess1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneralizedBlackScholesProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [StochasticProcess1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeneralizedBlackScholesProcess, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_GeneralizedBlackScholesProcess(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def stateVariable(self):
        return _QuantLib.GeneralizedBlackScholesProcess_stateVariable(self)

    def dividendYield(self):
        return _QuantLib.GeneralizedBlackScholesProcess_dividendYield(self)

    def riskFreeRate(self):
        return _QuantLib.GeneralizedBlackScholesProcess_riskFreeRate(self)

    def blackVolatility(self):
        return _QuantLib.GeneralizedBlackScholesProcess_blackVolatility(self)

    def localVolatility(self):
        return _QuantLib.GeneralizedBlackScholesProcess_localVolatility(self)
    __swig_destroy__ = _QuantLib.delete_GeneralizedBlackScholesProcess
    __del__ = lambda self: None
GeneralizedBlackScholesProcess_swigregister = _QuantLib.GeneralizedBlackScholesProcess_swigregister
GeneralizedBlackScholesProcess_swigregister(GeneralizedBlackScholesProcess)

class Merton76Process(StochasticProcess1D):
    __swig_setmethods__ = {}
    for _s in [StochasticProcess1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Merton76Process, name, value)
    __swig_getmethods__ = {}
    for _s in [StochasticProcess1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Merton76Process, name)
    __repr__ = _swig_repr

    def __init__(self, stateVariable, dividendTS, riskFreeTS, volTS, jumpIntensity, meanLogJump, jumpVolatility):
        this = _QuantLib.new_Merton76Process(stateVariable, dividendTS, riskFreeTS, volTS, jumpIntensity, meanLogJump, jumpVolatility)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Merton76Process
    __del__ = lambda self: None
Merton76Process_swigregister = _QuantLib.Merton76Process_swigregister
Merton76Process_swigregister(Merton76Process)

class GeometricBrownianMotionProcess(StochasticProcess1D):
    __swig_setmethods__ = {}
    for _s in [StochasticProcess1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometricBrownianMotionProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [StochasticProcess1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometricBrownianMotionProcess, name)
    __repr__ = _swig_repr

    def __init__(self, initialValue, mu, sigma):
        this = _QuantLib.new_GeometricBrownianMotionProcess(initialValue, mu, sigma)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_GeometricBrownianMotionProcess
    __del__ = lambda self: None
GeometricBrownianMotionProcess_swigregister = _QuantLib.GeometricBrownianMotionProcess_swigregister
GeometricBrownianMotionProcess_swigregister(GeometricBrownianMotionProcess)

class VarianceGammaProcess(StochasticProcess1D):
    __swig_setmethods__ = {}
    for _s in [StochasticProcess1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarianceGammaProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [StochasticProcess1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VarianceGammaProcess, name)
    __repr__ = _swig_repr

    def __init__(self, s0, dividendYield, riskFreeRate, sigma, nu, theta):
        this = _QuantLib.new_VarianceGammaProcess(s0, dividendYield, riskFreeRate, sigma, nu, theta)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_VarianceGammaProcess
    __del__ = lambda self: None
VarianceGammaProcess_swigregister = _QuantLib.VarianceGammaProcess_swigregister
VarianceGammaProcess_swigregister(VarianceGammaProcess)

class HullWhiteProcess(StochasticProcess1D):
    __swig_setmethods__ = {}
    for _s in [StochasticProcess1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HullWhiteProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [StochasticProcess1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HullWhiteProcess, name)
    __repr__ = _swig_repr

    def __init__(self, riskFreeTS, a, sigma):
        this = _QuantLib.new_HullWhiteProcess(riskFreeTS, a, sigma)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_HullWhiteProcess
    __del__ = lambda self: None
HullWhiteProcess_swigregister = _QuantLib.HullWhiteProcess_swigregister
HullWhiteProcess_swigregister(HullWhiteProcess)

class HullWhiteForwardProcess(StochasticProcess1D):
    __swig_setmethods__ = {}
    for _s in [StochasticProcess1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HullWhiteForwardProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [StochasticProcess1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HullWhiteForwardProcess, name)
    __repr__ = _swig_repr

    def __init__(self, riskFreeTS, a, sigma):
        this = _QuantLib.new_HullWhiteForwardProcess(riskFreeTS, a, sigma)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def alpha(self, t):
        return _QuantLib.HullWhiteForwardProcess_alpha(self, t)

    def M_T(self, s, t, T):
        return _QuantLib.HullWhiteForwardProcess_M_T(self, s, t, T)

    def B(self, t, T):
        return _QuantLib.HullWhiteForwardProcess_B(self, t, T)

    def setForwardMeasureTime(self, t):
        return _QuantLib.HullWhiteForwardProcess_setForwardMeasureTime(self, t)
    __swig_destroy__ = _QuantLib.delete_HullWhiteForwardProcess
    __del__ = lambda self: None
HullWhiteForwardProcess_swigregister = _QuantLib.HullWhiteForwardProcess_swigregister
HullWhiteForwardProcess_swigregister(HullWhiteForwardProcess)

class GsrProcess(StochasticProcess1D):
    __swig_setmethods__ = {}
    for _s in [StochasticProcess1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GsrProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [StochasticProcess1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GsrProcess, name)
    __repr__ = _swig_repr

    def __init__(self, times, vols, reversions, T=60.0):
        this = _QuantLib.new_GsrProcess(times, vols, reversions, T)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def sigma(self, t):
        return _QuantLib.GsrProcess_sigma(self, t)

    def reversion(self, t):
        return _QuantLib.GsrProcess_reversion(self, t)

    def y(self, t):
        return _QuantLib.GsrProcess_y(self, t)

    def G(self, t, T, x):
        return _QuantLib.GsrProcess_G(self, t, T, x)

    def setForwardMeasureTime(self, t):
        return _QuantLib.GsrProcess_setForwardMeasureTime(self, t)
    __swig_destroy__ = _QuantLib.delete_GsrProcess
    __del__ = lambda self: None
GsrProcess_swigregister = _QuantLib.GsrProcess_swigregister
GsrProcess_swigregister(GsrProcess)


def as_gsr_process(proc):
    return _QuantLib.as_gsr_process(proc)
as_gsr_process = _QuantLib.as_gsr_process
class OrnsteinUhlenbeckProcess(StochasticProcess1D):
    __swig_setmethods__ = {}
    for _s in [StochasticProcess1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrnsteinUhlenbeckProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [StochasticProcess1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrnsteinUhlenbeckProcess, name)
    __repr__ = _swig_repr

    def __init__(self, speed, vol, x0=0.0, level=0.0):
        this = _QuantLib.new_OrnsteinUhlenbeckProcess(speed, vol, x0, level)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def speed(self):
        return _QuantLib.OrnsteinUhlenbeckProcess_speed(self)

    def volatility(self):
        return _QuantLib.OrnsteinUhlenbeckProcess_volatility(self)

    def level(self):
        return _QuantLib.OrnsteinUhlenbeckProcess_level(self)
    __swig_destroy__ = _QuantLib.delete_OrnsteinUhlenbeckProcess
    __del__ = lambda self: None
OrnsteinUhlenbeckProcess_swigregister = _QuantLib.OrnsteinUhlenbeckProcess_swigregister
OrnsteinUhlenbeckProcess_swigregister(OrnsteinUhlenbeckProcess)

class ExtendedOrnsteinUhlenbeckProcess(StochasticProcess1D):
    __swig_setmethods__ = {}
    for _s in [StochasticProcess1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtendedOrnsteinUhlenbeckProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [StochasticProcess1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExtendedOrnsteinUhlenbeckProcess, name)
    __repr__ = _swig_repr
    MidPoint = _QuantLib.ExtendedOrnsteinUhlenbeckProcess_MidPoint
    Trapezodial = _QuantLib.ExtendedOrnsteinUhlenbeckProcess_Trapezodial
    GaussLobatto = _QuantLib.ExtendedOrnsteinUhlenbeckProcess_GaussLobatto

    def __init__(self, *args):
        this = _QuantLib.new_ExtendedOrnsteinUhlenbeckProcess(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ExtendedOrnsteinUhlenbeckProcess
    __del__ = lambda self: None
ExtendedOrnsteinUhlenbeckProcess_swigregister = _QuantLib.ExtendedOrnsteinUhlenbeckProcess_swigregister
ExtendedOrnsteinUhlenbeckProcess_swigregister(ExtendedOrnsteinUhlenbeckProcess)

class BlackScholesProcess(GeneralizedBlackScholesProcess):
    __swig_setmethods__ = {}
    for _s in [GeneralizedBlackScholesProcess]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackScholesProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [GeneralizedBlackScholesProcess]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlackScholesProcess, name)
    __repr__ = _swig_repr

    def __init__(self, s0, riskFreeTS, volTS):
        this = _QuantLib.new_BlackScholesProcess(s0, riskFreeTS, volTS)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BlackScholesProcess
    __del__ = lambda self: None
BlackScholesProcess_swigregister = _QuantLib.BlackScholesProcess_swigregister
BlackScholesProcess_swigregister(BlackScholesProcess)

class BlackScholesMertonProcess(GeneralizedBlackScholesProcess):
    __swig_setmethods__ = {}
    for _s in [GeneralizedBlackScholesProcess]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackScholesMertonProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [GeneralizedBlackScholesProcess]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlackScholesMertonProcess, name)
    __repr__ = _swig_repr

    def __init__(self, s0, dividendTS, riskFreeTS, volTS):
        this = _QuantLib.new_BlackScholesMertonProcess(s0, dividendTS, riskFreeTS, volTS)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BlackScholesMertonProcess
    __del__ = lambda self: None
BlackScholesMertonProcess_swigregister = _QuantLib.BlackScholesMertonProcess_swigregister
BlackScholesMertonProcess_swigregister(BlackScholesMertonProcess)

class BlackProcess(GeneralizedBlackScholesProcess):
    __swig_setmethods__ = {}
    for _s in [GeneralizedBlackScholesProcess]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [GeneralizedBlackScholesProcess]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlackProcess, name)
    __repr__ = _swig_repr

    def __init__(self, s0, riskFreeTS, volTS):
        this = _QuantLib.new_BlackProcess(s0, riskFreeTS, volTS)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BlackProcess
    __del__ = lambda self: None
BlackProcess_swigregister = _QuantLib.BlackProcess_swigregister
BlackProcess_swigregister(BlackProcess)

class GarmanKohlagenProcess(GeneralizedBlackScholesProcess):
    __swig_setmethods__ = {}
    for _s in [GeneralizedBlackScholesProcess]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GarmanKohlagenProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [GeneralizedBlackScholesProcess]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GarmanKohlagenProcess, name)
    __repr__ = _swig_repr

    def __init__(self, s0, foreignRiskFreeTS, domesticRiskFreeTS, volTS):
        this = _QuantLib.new_GarmanKohlagenProcess(s0, foreignRiskFreeTS, domesticRiskFreeTS, volTS)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_GarmanKohlagenProcess
    __del__ = lambda self: None
GarmanKohlagenProcess_swigregister = _QuantLib.GarmanKohlagenProcess_swigregister
GarmanKohlagenProcess_swigregister(GarmanKohlagenProcess)

class BatesProcess(HestonProcess):
    __swig_setmethods__ = {}
    for _s in [HestonProcess]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BatesProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [HestonProcess]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BatesProcess, name)
    __repr__ = _swig_repr

    def __init__(self, riskFreeRate, dividendYield, s0, v0, kappa, theta, sigma, rho, arg10, nu, delta):
        this = _QuantLib.new_BatesProcess(riskFreeRate, dividendYield, s0, v0, kappa, theta, sigma, rho, arg10, nu, delta)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BatesProcess
    __del__ = lambda self: None
BatesProcess_swigregister = _QuantLib.BatesProcess_swigregister
BatesProcess_swigregister(BatesProcess)

class Gaussian1dModel(TermStructureConsistentModel):
    __swig_setmethods__ = {}
    for _s in [TermStructureConsistentModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gaussian1dModel, name, value)
    __swig_getmethods__ = {}
    for _s in [TermStructureConsistentModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Gaussian1dModel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def stateProcess(self):
        return _QuantLib.Gaussian1dModel_stateProcess(self)

    def numeraire(self, *args):
        return _QuantLib.Gaussian1dModel_numeraire(self, *args)

    def zerobond(self, *args):
        return _QuantLib.Gaussian1dModel_zerobond(self, *args)

    def zerobondOption(self, *args):
        return _QuantLib.Gaussian1dModel_zerobondOption(self, *args)

    def forwardRate(self, *args):
        return _QuantLib.Gaussian1dModel_forwardRate(self, *args)

    def swapRate(self, *args):
        return _QuantLib.Gaussian1dModel_swapRate(self, *args)

    def swapAnnuity(self, *args):
        return _QuantLib.Gaussian1dModel_swapAnnuity(self, *args)
    __swig_destroy__ = _QuantLib.delete_Gaussian1dModel
    __del__ = lambda self: None
Gaussian1dModel_swigregister = _QuantLib.Gaussian1dModel_swigregister
Gaussian1dModel_swigregister(Gaussian1dModel)

class Gsr(Gaussian1dModel, CalibratedModel):
    __swig_setmethods__ = {}
    for _s in [Gaussian1dModel, CalibratedModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gsr, name, value)
    __swig_getmethods__ = {}
    for _s in [Gaussian1dModel, CalibratedModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Gsr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_Gsr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def calibrateVolatilitiesIterative(self, *args):
        return _QuantLib.Gsr_calibrateVolatilitiesIterative(self, *args)

    def numeraireTime(self, *args):
        return _QuantLib.Gsr_numeraireTime(self, *args)

    def reversion(self):
        return _QuantLib.Gsr_reversion(self)

    def volatility(self):
        return _QuantLib.Gsr_volatility(self)

    def calibrateReversionsIterative(self, *args):
        return _QuantLib.Gsr_calibrateReversionsIterative(self, *args)
    __swig_destroy__ = _QuantLib.delete_Gsr
    __del__ = lambda self: None
Gsr_swigregister = _QuantLib.Gsr_swigregister
Gsr_swigregister(Gsr)

class MarkovFunctional(Gaussian1dModel, CalibratedModel):
    __swig_setmethods__ = {}
    for _s in [Gaussian1dModel, CalibratedModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarkovFunctional, name, value)
    __swig_getmethods__ = {}
    for _s in [Gaussian1dModel, CalibratedModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarkovFunctional, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_MarkovFunctional(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def numeraireDate(self):
        return _QuantLib.MarkovFunctional_numeraireDate(self)

    def numeraireTime(self):
        return _QuantLib.MarkovFunctional_numeraireTime(self)

    def volatility(self):
        return _QuantLib.MarkovFunctional_volatility(self)

    def calibrate(self, *args):
        return _QuantLib.MarkovFunctional_calibrate(self, *args)

    def arbitrageIndices(self):
        return _QuantLib.MarkovFunctional_arbitrageIndices(self)

    def forceArbitrageIndices(self, indices):
        return _QuantLib.MarkovFunctional_forceArbitrageIndices(self, indices)
    __swig_destroy__ = _QuantLib.delete_MarkovFunctional
    __del__ = lambda self: None
MarkovFunctional_swigregister = _QuantLib.MarkovFunctional_swigregister
MarkovFunctional_swigregister(MarkovFunctional)

class MarkovFunctionalSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarkovFunctionalSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarkovFunctionalSettings, name)
    __repr__ = _swig_repr
    AdjustNone = _QuantLib.MarkovFunctionalSettings_AdjustNone
    AdjustDigitals = _QuantLib.MarkovFunctionalSettings_AdjustDigitals
    AdjustYts = _QuantLib.MarkovFunctionalSettings_AdjustYts
    ExtrapolatePayoffFlat = _QuantLib.MarkovFunctionalSettings_ExtrapolatePayoffFlat
    NoPayoffExtrapolation = _QuantLib.MarkovFunctionalSettings_NoPayoffExtrapolation
    KahaleSmile = _QuantLib.MarkovFunctionalSettings_KahaleSmile
    SmileExponentialExtrapolation = _QuantLib.MarkovFunctionalSettings_SmileExponentialExtrapolation
    KahaleInterpolation = _QuantLib.MarkovFunctionalSettings_KahaleInterpolation
    SmileDeleteArbitragePoints = _QuantLib.MarkovFunctionalSettings_SmileDeleteArbitragePoints
    SabrSmile = _QuantLib.MarkovFunctionalSettings_SabrSmile

    def __init__(self):
        this = _QuantLib.new_MarkovFunctionalSettings()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def withYGridPoints(self, n):
        return _QuantLib.MarkovFunctionalSettings_withYGridPoints(self, n)

    def withYStdDevs(self, s):
        return _QuantLib.MarkovFunctionalSettings_withYStdDevs(self, s)

    def withGaussHermitePoints(self, n):
        return _QuantLib.MarkovFunctionalSettings_withGaussHermitePoints(self, n)

    def withDigitalGap(self, d):
        return _QuantLib.MarkovFunctionalSettings_withDigitalGap(self, d)

    def withMarketRateAccuracy(self, a):
        return _QuantLib.MarkovFunctionalSettings_withMarketRateAccuracy(self, a)

    def withUpperRateBound(self, u):
        return _QuantLib.MarkovFunctionalSettings_withUpperRateBound(self, u)

    def withLowerRateBound(self, l):
        return _QuantLib.MarkovFunctionalSettings_withLowerRateBound(self, l)

    def withAdjustments(self, a):
        return _QuantLib.MarkovFunctionalSettings_withAdjustments(self, a)

    def addAdjustment(self, a):
        return _QuantLib.MarkovFunctionalSettings_addAdjustment(self, a)

    def removeAdjustment(self, a):
        return _QuantLib.MarkovFunctionalSettings_removeAdjustment(self, a)

    def withSmileMoneynessCheckpoints(self, m):
        return _QuantLib.MarkovFunctionalSettings_withSmileMoneynessCheckpoints(self, m)
    __swig_destroy__ = _QuantLib.delete_MarkovFunctionalSettings
    __del__ = lambda self: None
MarkovFunctionalSettings_swigregister = _QuantLib.MarkovFunctionalSettings_swigregister
MarkovFunctionalSettings_swigregister(MarkovFunctionalSettings)

class DefaultProbabilityTermStructure(TermStructure):
    __swig_setmethods__ = {}
    for _s in [TermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultProbabilityTermStructure, name, value)
    __swig_getmethods__ = {}
    for _s in [TermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultProbabilityTermStructure, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def defaultProbability(self, *args):
        return _QuantLib.DefaultProbabilityTermStructure_defaultProbability(self, *args)

    def survivalProbability(self, *args):
        return _QuantLib.DefaultProbabilityTermStructure_survivalProbability(self, *args)

    def defaultDensity(self, *args):
        return _QuantLib.DefaultProbabilityTermStructure_defaultDensity(self, *args)

    def hazardRate(self, *args):
        return _QuantLib.DefaultProbabilityTermStructure_hazardRate(self, *args)
    __swig_destroy__ = _QuantLib.delete_DefaultProbabilityTermStructure
    __del__ = lambda self: None
DefaultProbabilityTermStructure_swigregister = _QuantLib.DefaultProbabilityTermStructure_swigregister
DefaultProbabilityTermStructure_swigregister(DefaultProbabilityTermStructure)

class DefaultProbabilityTermStructureHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultProbabilityTermStructureHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultProbabilityTermStructureHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_DefaultProbabilityTermStructureHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _QuantLib.DefaultProbabilityTermStructureHandle___deref__(self)

    def currentLink(self):
        return _QuantLib.DefaultProbabilityTermStructureHandle_currentLink(self)

    def __ref__(self):
        return _QuantLib.DefaultProbabilityTermStructureHandle___ref__(self)

    def __nonzero__(self):
        return _QuantLib.DefaultProbabilityTermStructureHandle___nonzero__(self)

    def __bool__(self):
        return _QuantLib.DefaultProbabilityTermStructureHandle___bool__(self)

    def asObservable(self):
        return _QuantLib.DefaultProbabilityTermStructureHandle_asObservable(self)
    __swig_destroy__ = _QuantLib.delete_DefaultProbabilityTermStructureHandle
    __del__ = lambda self: None

    def defaultProbability(self, *args):
        return _QuantLib.DefaultProbabilityTermStructureHandle_defaultProbability(self, *args)

    def survivalProbability(self, *args):
        return _QuantLib.DefaultProbabilityTermStructureHandle_survivalProbability(self, *args)

    def defaultDensity(self, *args):
        return _QuantLib.DefaultProbabilityTermStructureHandle_defaultDensity(self, *args)

    def hazardRate(self, *args):
        return _QuantLib.DefaultProbabilityTermStructureHandle_hazardRate(self, *args)

    def dayCounter(self):
        return _QuantLib.DefaultProbabilityTermStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        return _QuantLib.DefaultProbabilityTermStructureHandle_timeFromReference(self, date)

    def calendar(self):
        return _QuantLib.DefaultProbabilityTermStructureHandle_calendar(self)

    def referenceDate(self):
        return _QuantLib.DefaultProbabilityTermStructureHandle_referenceDate(self)

    def maxDate(self):
        return _QuantLib.DefaultProbabilityTermStructureHandle_maxDate(self)

    def maxTime(self):
        return _QuantLib.DefaultProbabilityTermStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        return _QuantLib.DefaultProbabilityTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _QuantLib.DefaultProbabilityTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _QuantLib.DefaultProbabilityTermStructureHandle_allowsExtrapolation(self)
DefaultProbabilityTermStructureHandle_swigregister = _QuantLib.DefaultProbabilityTermStructureHandle_swigregister
DefaultProbabilityTermStructureHandle_swigregister(DefaultProbabilityTermStructureHandle)

class RelinkableDefaultProbabilityTermStructureHandle(DefaultProbabilityTermStructureHandle):
    __swig_setmethods__ = {}
    for _s in [DefaultProbabilityTermStructureHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelinkableDefaultProbabilityTermStructureHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [DefaultProbabilityTermStructureHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RelinkableDefaultProbabilityTermStructureHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_RelinkableDefaultProbabilityTermStructureHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def linkTo(self, arg2):
        return _QuantLib.RelinkableDefaultProbabilityTermStructureHandle_linkTo(self, arg2)

    def reset(self):
        return _QuantLib.RelinkableDefaultProbabilityTermStructureHandle_reset(self)
    __swig_destroy__ = _QuantLib.delete_RelinkableDefaultProbabilityTermStructureHandle
    __del__ = lambda self: None
RelinkableDefaultProbabilityTermStructureHandle_swigregister = _QuantLib.RelinkableDefaultProbabilityTermStructureHandle_swigregister
RelinkableDefaultProbabilityTermStructureHandle_swigregister(RelinkableDefaultProbabilityTermStructureHandle)

class InflationTermStructure(TermStructure):
    __swig_setmethods__ = {}
    for _s in [TermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InflationTermStructure, name, value)
    __swig_getmethods__ = {}
    for _s in [TermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InflationTermStructure, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def observationLag(self):
        return _QuantLib.InflationTermStructure_observationLag(self)

    def frequency(self):
        return _QuantLib.InflationTermStructure_frequency(self)

    def indexIsInterpolated(self):
        return _QuantLib.InflationTermStructure_indexIsInterpolated(self)

    def baseRate(self):
        return _QuantLib.InflationTermStructure_baseRate(self)

    def nominalTermStructure(self):
        return _QuantLib.InflationTermStructure_nominalTermStructure(self)

    def baseDate(self):
        return _QuantLib.InflationTermStructure_baseDate(self)

    def setSeasonality(self, *args):
        return _QuantLib.InflationTermStructure_setSeasonality(self, *args)

    def seasonality(self):
        return _QuantLib.InflationTermStructure_seasonality(self)

    def hasSeasonality(self):
        return _QuantLib.InflationTermStructure_hasSeasonality(self)
    __swig_destroy__ = _QuantLib.delete_InflationTermStructure
    __del__ = lambda self: None
InflationTermStructure_swigregister = _QuantLib.InflationTermStructure_swigregister
InflationTermStructure_swigregister(InflationTermStructure)


def inflationBaseDate(referenceDate, observationLag, frequency, indexIsInterpolated):
    return _QuantLib.inflationBaseDate(referenceDate, observationLag, frequency, indexIsInterpolated)
inflationBaseDate = _QuantLib.inflationBaseDate
class VolatilityTermStructure(TermStructure):
    __swig_setmethods__ = {}
    for _s in [TermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VolatilityTermStructure, name, value)
    __swig_getmethods__ = {}
    for _s in [TermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VolatilityTermStructure, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def minStrike(self):
        return _QuantLib.VolatilityTermStructure_minStrike(self)

    def maxStrike(self):
        return _QuantLib.VolatilityTermStructure_maxStrike(self)
    __swig_destroy__ = _QuantLib.delete_VolatilityTermStructure
    __del__ = lambda self: None
VolatilityTermStructure_swigregister = _QuantLib.VolatilityTermStructure_swigregister
VolatilityTermStructure_swigregister(VolatilityTermStructure)

class YieldTermStructure(TermStructure):
    __swig_setmethods__ = {}
    for _s in [TermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YieldTermStructure, name, value)
    __swig_getmethods__ = {}
    for _s in [TermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YieldTermStructure, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def discount(self, *args):
        return _QuantLib.YieldTermStructure_discount(self, *args)

    def zeroRate(self, *args):
        return _QuantLib.YieldTermStructure_zeroRate(self, *args)

    def forwardRate(self, *args):
        return _QuantLib.YieldTermStructure_forwardRate(self, *args)
    __swig_destroy__ = _QuantLib.delete_YieldTermStructure
    __del__ = lambda self: None
YieldTermStructure_swigregister = _QuantLib.YieldTermStructure_swigregister
YieldTermStructure_swigregister(YieldTermStructure)

class YieldTermStructureHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, YieldTermStructureHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, YieldTermStructureHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_YieldTermStructureHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _QuantLib.YieldTermStructureHandle___deref__(self)

    def currentLink(self):
        return _QuantLib.YieldTermStructureHandle_currentLink(self)

    def __ref__(self):
        return _QuantLib.YieldTermStructureHandle___ref__(self)

    def __nonzero__(self):
        return _QuantLib.YieldTermStructureHandle___nonzero__(self)

    def __bool__(self):
        return _QuantLib.YieldTermStructureHandle___bool__(self)

    def asObservable(self):
        return _QuantLib.YieldTermStructureHandle_asObservable(self)
    __swig_destroy__ = _QuantLib.delete_YieldTermStructureHandle
    __del__ = lambda self: None

    def discount(self, *args):
        return _QuantLib.YieldTermStructureHandle_discount(self, *args)

    def zeroRate(self, *args):
        return _QuantLib.YieldTermStructureHandle_zeroRate(self, *args)

    def forwardRate(self, *args):
        return _QuantLib.YieldTermStructureHandle_forwardRate(self, *args)

    def dayCounter(self):
        return _QuantLib.YieldTermStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        return _QuantLib.YieldTermStructureHandle_timeFromReference(self, date)

    def calendar(self):
        return _QuantLib.YieldTermStructureHandle_calendar(self)

    def referenceDate(self):
        return _QuantLib.YieldTermStructureHandle_referenceDate(self)

    def maxDate(self):
        return _QuantLib.YieldTermStructureHandle_maxDate(self)

    def maxTime(self):
        return _QuantLib.YieldTermStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        return _QuantLib.YieldTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _QuantLib.YieldTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _QuantLib.YieldTermStructureHandle_allowsExtrapolation(self)
YieldTermStructureHandle_swigregister = _QuantLib.YieldTermStructureHandle_swigregister
YieldTermStructureHandle_swigregister(YieldTermStructureHandle)

class RelinkableYieldTermStructureHandle(YieldTermStructureHandle):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructureHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelinkableYieldTermStructureHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructureHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RelinkableYieldTermStructureHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_RelinkableYieldTermStructureHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def linkTo(self, arg2):
        return _QuantLib.RelinkableYieldTermStructureHandle_linkTo(self, arg2)

    def reset(self):
        return _QuantLib.RelinkableYieldTermStructureHandle_reset(self)
    __swig_destroy__ = _QuantLib.delete_RelinkableYieldTermStructureHandle
    __del__ = lambda self: None
RelinkableYieldTermStructureHandle_swigregister = _QuantLib.RelinkableYieldTermStructureHandle_swigregister
RelinkableYieldTermStructureHandle_swigregister(RelinkableYieldTermStructureHandle)

class HazardRate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HazardRate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HazardRate, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_HazardRate()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_HazardRate
    __del__ = lambda self: None
HazardRate_swigregister = _QuantLib.HazardRate_swigregister
HazardRate_swigregister(HazardRate)

class DefaultDensity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultDensity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultDensity, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_DefaultDensity()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_DefaultDensity
    __del__ = lambda self: None
DefaultDensity_swigregister = _QuantLib.DefaultDensity_swigregister
DefaultDensity_swigregister(DefaultDensity)

class FlatHazardRate(DefaultProbabilityTermStructure):
    __swig_setmethods__ = {}
    for _s in [DefaultProbabilityTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlatHazardRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DefaultProbabilityTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FlatHazardRate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FlatHazardRate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FlatHazardRate
    __del__ = lambda self: None
FlatHazardRate_swigregister = _QuantLib.FlatHazardRate_swigregister
FlatHazardRate_swigregister(FlatHazardRate)

class HazardRateCurve(DefaultProbabilityTermStructure):
    __swig_setmethods__ = {}
    for _s in [DefaultProbabilityTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HazardRateCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [DefaultProbabilityTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HazardRateCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_HazardRateCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.HazardRateCurve_dates(self)

    def hazardRates(self):
        return _QuantLib.HazardRateCurve_hazardRates(self)

    def nodes(self):
        return _QuantLib.HazardRateCurve_nodes(self)
    __swig_destroy__ = _QuantLib.delete_HazardRateCurve
    __del__ = lambda self: None
HazardRateCurve_swigregister = _QuantLib.HazardRateCurve_swigregister
HazardRateCurve_swigregister(HazardRateCurve)

class DefaultDensityCurve(DefaultProbabilityTermStructure):
    __swig_setmethods__ = {}
    for _s in [DefaultProbabilityTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultDensityCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [DefaultProbabilityTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultDensityCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_DefaultDensityCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.DefaultDensityCurve_dates(self)

    def defaultDensities(self):
        return _QuantLib.DefaultDensityCurve_defaultDensities(self)

    def nodes(self):
        return _QuantLib.DefaultDensityCurve_nodes(self)
    __swig_destroy__ = _QuantLib.delete_DefaultDensityCurve
    __del__ = lambda self: None
DefaultDensityCurve_swigregister = _QuantLib.DefaultDensityCurve_swigregister
DefaultDensityCurve_swigregister(DefaultDensityCurve)

class SurvivalProbabilityCurve(DefaultProbabilityTermStructure):
    __swig_setmethods__ = {}
    for _s in [DefaultProbabilityTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SurvivalProbabilityCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [DefaultProbabilityTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SurvivalProbabilityCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_SurvivalProbabilityCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.SurvivalProbabilityCurve_dates(self)

    def survivalProbabilities(self):
        return _QuantLib.SurvivalProbabilityCurve_survivalProbabilities(self)

    def nodes(self):
        return _QuantLib.SurvivalProbabilityCurve_nodes(self)
    __swig_destroy__ = _QuantLib.delete_SurvivalProbabilityCurve
    __del__ = lambda self: None
SurvivalProbabilityCurve_swigregister = _QuantLib.SurvivalProbabilityCurve_swigregister
SurvivalProbabilityCurve_swigregister(SurvivalProbabilityCurve)

class PiecewiseFlatHazardRate(DefaultProbabilityTermStructure):
    __swig_setmethods__ = {}
    for _s in [DefaultProbabilityTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseFlatHazardRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DefaultProbabilityTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseFlatHazardRate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseFlatHazardRate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseFlatHazardRate_dates(self)

    def times(self):
        return _QuantLib.PiecewiseFlatHazardRate_times(self)

    def nodes(self):
        return _QuantLib.PiecewiseFlatHazardRate_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseFlatHazardRate
    __del__ = lambda self: None
PiecewiseFlatHazardRate_swigregister = _QuantLib.PiecewiseFlatHazardRate_swigregister
PiecewiseFlatHazardRate_swigregister(PiecewiseFlatHazardRate)

class YoYInflationTermStructure(InflationTermStructure):
    __swig_setmethods__ = {}
    for _s in [InflationTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YoYInflationTermStructure, name, value)
    __swig_getmethods__ = {}
    for _s in [InflationTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YoYInflationTermStructure, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def yoyRate(self, *args):
        return _QuantLib.YoYInflationTermStructure_yoyRate(self, *args)
    __swig_destroy__ = _QuantLib.delete_YoYInflationTermStructure
    __del__ = lambda self: None
YoYInflationTermStructure_swigregister = _QuantLib.YoYInflationTermStructure_swigregister
YoYInflationTermStructure_swigregister(YoYInflationTermStructure)

class YoYInflationTermStructureHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, YoYInflationTermStructureHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, YoYInflationTermStructureHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_YoYInflationTermStructureHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _QuantLib.YoYInflationTermStructureHandle___deref__(self)

    def currentLink(self):
        return _QuantLib.YoYInflationTermStructureHandle_currentLink(self)

    def __ref__(self):
        return _QuantLib.YoYInflationTermStructureHandle___ref__(self)

    def __nonzero__(self):
        return _QuantLib.YoYInflationTermStructureHandle___nonzero__(self)

    def __bool__(self):
        return _QuantLib.YoYInflationTermStructureHandle___bool__(self)

    def asObservable(self):
        return _QuantLib.YoYInflationTermStructureHandle_asObservable(self)
    __swig_destroy__ = _QuantLib.delete_YoYInflationTermStructureHandle
    __del__ = lambda self: None

    def yoyRate(self, *args):
        return _QuantLib.YoYInflationTermStructureHandle_yoyRate(self, *args)

    def observationLag(self):
        return _QuantLib.YoYInflationTermStructureHandle_observationLag(self)

    def frequency(self):
        return _QuantLib.YoYInflationTermStructureHandle_frequency(self)

    def indexIsInterpolated(self):
        return _QuantLib.YoYInflationTermStructureHandle_indexIsInterpolated(self)

    def baseRate(self):
        return _QuantLib.YoYInflationTermStructureHandle_baseRate(self)

    def nominalTermStructure(self):
        return _QuantLib.YoYInflationTermStructureHandle_nominalTermStructure(self)

    def baseDate(self):
        return _QuantLib.YoYInflationTermStructureHandle_baseDate(self)

    def setSeasonality(self, *args):
        return _QuantLib.YoYInflationTermStructureHandle_setSeasonality(self, *args)

    def seasonality(self):
        return _QuantLib.YoYInflationTermStructureHandle_seasonality(self)

    def hasSeasonality(self):
        return _QuantLib.YoYInflationTermStructureHandle_hasSeasonality(self)

    def dayCounter(self):
        return _QuantLib.YoYInflationTermStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        return _QuantLib.YoYInflationTermStructureHandle_timeFromReference(self, date)

    def calendar(self):
        return _QuantLib.YoYInflationTermStructureHandle_calendar(self)

    def referenceDate(self):
        return _QuantLib.YoYInflationTermStructureHandle_referenceDate(self)

    def maxDate(self):
        return _QuantLib.YoYInflationTermStructureHandle_maxDate(self)

    def maxTime(self):
        return _QuantLib.YoYInflationTermStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        return _QuantLib.YoYInflationTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _QuantLib.YoYInflationTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _QuantLib.YoYInflationTermStructureHandle_allowsExtrapolation(self)
YoYInflationTermStructureHandle_swigregister = _QuantLib.YoYInflationTermStructureHandle_swigregister
YoYInflationTermStructureHandle_swigregister(YoYInflationTermStructureHandle)

class RelinkableYoYInflationTermStructureHandle(YoYInflationTermStructureHandle):
    __swig_setmethods__ = {}
    for _s in [YoYInflationTermStructureHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelinkableYoYInflationTermStructureHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [YoYInflationTermStructureHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RelinkableYoYInflationTermStructureHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_RelinkableYoYInflationTermStructureHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def linkTo(self, arg2):
        return _QuantLib.RelinkableYoYInflationTermStructureHandle_linkTo(self, arg2)

    def reset(self):
        return _QuantLib.RelinkableYoYInflationTermStructureHandle_reset(self)
    __swig_destroy__ = _QuantLib.delete_RelinkableYoYInflationTermStructureHandle
    __del__ = lambda self: None
RelinkableYoYInflationTermStructureHandle_swigregister = _QuantLib.RelinkableYoYInflationTermStructureHandle_swigregister
RelinkableYoYInflationTermStructureHandle_swigregister(RelinkableYoYInflationTermStructureHandle)

class ZeroInflationTermStructure(InflationTermStructure):
    __swig_setmethods__ = {}
    for _s in [InflationTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZeroInflationTermStructure, name, value)
    __swig_getmethods__ = {}
    for _s in [InflationTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZeroInflationTermStructure, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def zeroRate(self, *args):
        return _QuantLib.ZeroInflationTermStructure_zeroRate(self, *args)
    __swig_destroy__ = _QuantLib.delete_ZeroInflationTermStructure
    __del__ = lambda self: None
ZeroInflationTermStructure_swigregister = _QuantLib.ZeroInflationTermStructure_swigregister
ZeroInflationTermStructure_swigregister(ZeroInflationTermStructure)

class ZeroInflationTermStructureHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZeroInflationTermStructureHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZeroInflationTermStructureHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ZeroInflationTermStructureHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _QuantLib.ZeroInflationTermStructureHandle___deref__(self)

    def currentLink(self):
        return _QuantLib.ZeroInflationTermStructureHandle_currentLink(self)

    def __ref__(self):
        return _QuantLib.ZeroInflationTermStructureHandle___ref__(self)

    def __nonzero__(self):
        return _QuantLib.ZeroInflationTermStructureHandle___nonzero__(self)

    def __bool__(self):
        return _QuantLib.ZeroInflationTermStructureHandle___bool__(self)

    def asObservable(self):
        return _QuantLib.ZeroInflationTermStructureHandle_asObservable(self)
    __swig_destroy__ = _QuantLib.delete_ZeroInflationTermStructureHandle
    __del__ = lambda self: None

    def zeroRate(self, *args):
        return _QuantLib.ZeroInflationTermStructureHandle_zeroRate(self, *args)

    def observationLag(self):
        return _QuantLib.ZeroInflationTermStructureHandle_observationLag(self)

    def frequency(self):
        return _QuantLib.ZeroInflationTermStructureHandle_frequency(self)

    def indexIsInterpolated(self):
        return _QuantLib.ZeroInflationTermStructureHandle_indexIsInterpolated(self)

    def baseRate(self):
        return _QuantLib.ZeroInflationTermStructureHandle_baseRate(self)

    def nominalTermStructure(self):
        return _QuantLib.ZeroInflationTermStructureHandle_nominalTermStructure(self)

    def baseDate(self):
        return _QuantLib.ZeroInflationTermStructureHandle_baseDate(self)

    def setSeasonality(self, *args):
        return _QuantLib.ZeroInflationTermStructureHandle_setSeasonality(self, *args)

    def seasonality(self):
        return _QuantLib.ZeroInflationTermStructureHandle_seasonality(self)

    def hasSeasonality(self):
        return _QuantLib.ZeroInflationTermStructureHandle_hasSeasonality(self)

    def dayCounter(self):
        return _QuantLib.ZeroInflationTermStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        return _QuantLib.ZeroInflationTermStructureHandle_timeFromReference(self, date)

    def calendar(self):
        return _QuantLib.ZeroInflationTermStructureHandle_calendar(self)

    def referenceDate(self):
        return _QuantLib.ZeroInflationTermStructureHandle_referenceDate(self)

    def maxDate(self):
        return _QuantLib.ZeroInflationTermStructureHandle_maxDate(self)

    def maxTime(self):
        return _QuantLib.ZeroInflationTermStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        return _QuantLib.ZeroInflationTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _QuantLib.ZeroInflationTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _QuantLib.ZeroInflationTermStructureHandle_allowsExtrapolation(self)
ZeroInflationTermStructureHandle_swigregister = _QuantLib.ZeroInflationTermStructureHandle_swigregister
ZeroInflationTermStructureHandle_swigregister(ZeroInflationTermStructureHandle)

class RelinkableZeroInflationTermStructureHandle(ZeroInflationTermStructureHandle):
    __swig_setmethods__ = {}
    for _s in [ZeroInflationTermStructureHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelinkableZeroInflationTermStructureHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [ZeroInflationTermStructureHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RelinkableZeroInflationTermStructureHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_RelinkableZeroInflationTermStructureHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def linkTo(self, arg2):
        return _QuantLib.RelinkableZeroInflationTermStructureHandle_linkTo(self, arg2)

    def reset(self):
        return _QuantLib.RelinkableZeroInflationTermStructureHandle_reset(self)
    __swig_destroy__ = _QuantLib.delete_RelinkableZeroInflationTermStructureHandle
    __del__ = lambda self: None
RelinkableZeroInflationTermStructureHandle_swigregister = _QuantLib.RelinkableZeroInflationTermStructureHandle_swigregister
RelinkableZeroInflationTermStructureHandle_swigregister(RelinkableZeroInflationTermStructureHandle)

class YoYCapFloorTermPriceSurface(InflationTermStructure):
    __swig_setmethods__ = {}
    for _s in [InflationTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YoYCapFloorTermPriceSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [InflationTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YoYCapFloorTermPriceSurface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def atmYoYSwapTimeRates(self):
        return _QuantLib.YoYCapFloorTermPriceSurface_atmYoYSwapTimeRates(self)

    def atmYoYSwapDateRates(self):
        return _QuantLib.YoYCapFloorTermPriceSurface_atmYoYSwapDateRates(self)

    def YoYTS(self):
        return _QuantLib.YoYCapFloorTermPriceSurface_YoYTS(self)

    def yoyIndex(self):
        return _QuantLib.YoYCapFloorTermPriceSurface_yoyIndex(self)

    def businessDayConvention(self):
        return _QuantLib.YoYCapFloorTermPriceSurface_businessDayConvention(self)

    def fixingDays(self):
        return _QuantLib.YoYCapFloorTermPriceSurface_fixingDays(self)

    def price(self, *args):
        return _QuantLib.YoYCapFloorTermPriceSurface_price(self, *args)

    def capPrice(self, *args):
        return _QuantLib.YoYCapFloorTermPriceSurface_capPrice(self, *args)

    def floorPrice(self, *args):
        return _QuantLib.YoYCapFloorTermPriceSurface_floorPrice(self, *args)

    def atmYoYSwapRate(self, *args):
        return _QuantLib.YoYCapFloorTermPriceSurface_atmYoYSwapRate(self, *args)

    def atmYoYRate(self, *args):
        return _QuantLib.YoYCapFloorTermPriceSurface_atmYoYRate(self, *args)

    def strikes(self):
        return _QuantLib.YoYCapFloorTermPriceSurface_strikes(self)

    def capStrikes(self):
        return _QuantLib.YoYCapFloorTermPriceSurface_capStrikes(self)

    def floorStrikes(self):
        return _QuantLib.YoYCapFloorTermPriceSurface_floorStrikes(self)

    def maturities(self):
        return _QuantLib.YoYCapFloorTermPriceSurface_maturities(self)

    def minStrike(self):
        return _QuantLib.YoYCapFloorTermPriceSurface_minStrike(self)

    def maxStrike(self):
        return _QuantLib.YoYCapFloorTermPriceSurface_maxStrike(self)

    def minMaturity(self):
        return _QuantLib.YoYCapFloorTermPriceSurface_minMaturity(self)

    def maxMaturity(self):
        return _QuantLib.YoYCapFloorTermPriceSurface_maxMaturity(self)

    def yoyOptionDateFromTenor(self, p):
        return _QuantLib.YoYCapFloorTermPriceSurface_yoyOptionDateFromTenor(self, p)
    __swig_destroy__ = _QuantLib.delete_YoYCapFloorTermPriceSurface
    __del__ = lambda self: None
YoYCapFloorTermPriceSurface_swigregister = _QuantLib.YoYCapFloorTermPriceSurface_swigregister
YoYCapFloorTermPriceSurface_swigregister(YoYCapFloorTermPriceSurface)

class YoYInflationCapFloorTermPriceSurface(YoYCapFloorTermPriceSurface):
    __swig_setmethods__ = {}
    for _s in [YoYCapFloorTermPriceSurface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YoYInflationCapFloorTermPriceSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [YoYCapFloorTermPriceSurface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YoYInflationCapFloorTermPriceSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_YoYInflationCapFloorTermPriceSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_YoYInflationCapFloorTermPriceSurface
    __del__ = lambda self: None
YoYInflationCapFloorTermPriceSurface_swigregister = _QuantLib.YoYInflationCapFloorTermPriceSurface_swigregister
YoYInflationCapFloorTermPriceSurface_swigregister(YoYInflationCapFloorTermPriceSurface)

class PiecewiseZeroInflation(ZeroInflationTermStructure):
    __swig_setmethods__ = {}
    for _s in [ZeroInflationTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseZeroInflation, name, value)
    __swig_getmethods__ = {}
    for _s in [ZeroInflationTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseZeroInflation, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_PiecewiseZeroInflation(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseZeroInflation_dates(self)

    def times(self):
        return _QuantLib.PiecewiseZeroInflation_times(self)

    def nodes(self):
        return _QuantLib.PiecewiseZeroInflation_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseZeroInflation
    __del__ = lambda self: None
PiecewiseZeroInflation_swigregister = _QuantLib.PiecewiseZeroInflation_swigregister
PiecewiseZeroInflation_swigregister(PiecewiseZeroInflation)

class PiecewiseYoYInflation(YoYInflationTermStructure):
    __swig_setmethods__ = {}
    for _s in [YoYInflationTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseYoYInflation, name, value)
    __swig_getmethods__ = {}
    for _s in [YoYInflationTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseYoYInflation, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_PiecewiseYoYInflation(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseYoYInflation_dates(self)

    def times(self):
        return _QuantLib.PiecewiseYoYInflation_times(self)

    def nodes(self):
        return _QuantLib.PiecewiseYoYInflation_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseYoYInflation
    __del__ = lambda self: None
PiecewiseYoYInflation_swigregister = _QuantLib.PiecewiseYoYInflation_swigregister
PiecewiseYoYInflation_swigregister(PiecewiseYoYInflation)

class ZeroInflationCurve(ZeroInflationTermStructure):
    __swig_setmethods__ = {}
    for _s in [ZeroInflationTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZeroInflationCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [ZeroInflationTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZeroInflationCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_ZeroInflationCurve(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.ZeroInflationCurve_dates(self)

    def times(self):
        return _QuantLib.ZeroInflationCurve_times(self)

    def data(self):
        return _QuantLib.ZeroInflationCurve_data(self)

    def rates(self):
        return _QuantLib.ZeroInflationCurve_rates(self)

    def nodes(self):
        return _QuantLib.ZeroInflationCurve_nodes(self)
    __swig_destroy__ = _QuantLib.delete_ZeroInflationCurve
    __del__ = lambda self: None
ZeroInflationCurve_swigregister = _QuantLib.ZeroInflationCurve_swigregister
ZeroInflationCurve_swigregister(ZeroInflationCurve)

class YoYInflationCurve(YoYInflationTermStructure):
    __swig_setmethods__ = {}
    for _s in [YoYInflationTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YoYInflationCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [YoYInflationTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YoYInflationCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_YoYInflationCurve(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.YoYInflationCurve_dates(self)

    def times(self):
        return _QuantLib.YoYInflationCurve_times(self)

    def data(self):
        return _QuantLib.YoYInflationCurve_data(self)

    def rates(self):
        return _QuantLib.YoYInflationCurve_rates(self)

    def nodes(self):
        return _QuantLib.YoYInflationCurve_nodes(self)
    __swig_destroy__ = _QuantLib.delete_YoYInflationCurve
    __del__ = lambda self: None
YoYInflationCurve_swigregister = _QuantLib.YoYInflationCurve_swigregister
YoYInflationCurve_swigregister(YoYInflationCurve)

class BlackVolTermStructure(VolatilityTermStructure):
    __swig_setmethods__ = {}
    for _s in [VolatilityTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackVolTermStructure, name, value)
    __swig_getmethods__ = {}
    for _s in [VolatilityTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlackVolTermStructure, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def blackVol(self, *args):
        return _QuantLib.BlackVolTermStructure_blackVol(self, *args)

    def blackVariance(self, *args):
        return _QuantLib.BlackVolTermStructure_blackVariance(self, *args)

    def blackForwardVol(self, *args):
        return _QuantLib.BlackVolTermStructure_blackForwardVol(self, *args)

    def blackForwardVariance(self, *args):
        return _QuantLib.BlackVolTermStructure_blackForwardVariance(self, *args)
    __swig_destroy__ = _QuantLib.delete_BlackVolTermStructure
    __del__ = lambda self: None
BlackVolTermStructure_swigregister = _QuantLib.BlackVolTermStructure_swigregister
BlackVolTermStructure_swigregister(BlackVolTermStructure)

class BlackVolTermStructureHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackVolTermStructureHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlackVolTermStructureHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_BlackVolTermStructureHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _QuantLib.BlackVolTermStructureHandle___deref__(self)

    def currentLink(self):
        return _QuantLib.BlackVolTermStructureHandle_currentLink(self)

    def __ref__(self):
        return _QuantLib.BlackVolTermStructureHandle___ref__(self)

    def __nonzero__(self):
        return _QuantLib.BlackVolTermStructureHandle___nonzero__(self)

    def __bool__(self):
        return _QuantLib.BlackVolTermStructureHandle___bool__(self)

    def asObservable(self):
        return _QuantLib.BlackVolTermStructureHandle_asObservable(self)
    __swig_destroy__ = _QuantLib.delete_BlackVolTermStructureHandle
    __del__ = lambda self: None

    def blackVol(self, *args):
        return _QuantLib.BlackVolTermStructureHandle_blackVol(self, *args)

    def blackVariance(self, *args):
        return _QuantLib.BlackVolTermStructureHandle_blackVariance(self, *args)

    def blackForwardVol(self, *args):
        return _QuantLib.BlackVolTermStructureHandle_blackForwardVol(self, *args)

    def blackForwardVariance(self, *args):
        return _QuantLib.BlackVolTermStructureHandle_blackForwardVariance(self, *args)

    def minStrike(self):
        return _QuantLib.BlackVolTermStructureHandle_minStrike(self)

    def maxStrike(self):
        return _QuantLib.BlackVolTermStructureHandle_maxStrike(self)

    def dayCounter(self):
        return _QuantLib.BlackVolTermStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        return _QuantLib.BlackVolTermStructureHandle_timeFromReference(self, date)

    def calendar(self):
        return _QuantLib.BlackVolTermStructureHandle_calendar(self)

    def referenceDate(self):
        return _QuantLib.BlackVolTermStructureHandle_referenceDate(self)

    def maxDate(self):
        return _QuantLib.BlackVolTermStructureHandle_maxDate(self)

    def maxTime(self):
        return _QuantLib.BlackVolTermStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        return _QuantLib.BlackVolTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _QuantLib.BlackVolTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _QuantLib.BlackVolTermStructureHandle_allowsExtrapolation(self)
BlackVolTermStructureHandle_swigregister = _QuantLib.BlackVolTermStructureHandle_swigregister
BlackVolTermStructureHandle_swigregister(BlackVolTermStructureHandle)

class RelinkableBlackVolTermStructureHandle(BlackVolTermStructureHandle):
    __swig_setmethods__ = {}
    for _s in [BlackVolTermStructureHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelinkableBlackVolTermStructureHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [BlackVolTermStructureHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RelinkableBlackVolTermStructureHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_RelinkableBlackVolTermStructureHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def linkTo(self, arg2):
        return _QuantLib.RelinkableBlackVolTermStructureHandle_linkTo(self, arg2)

    def reset(self):
        return _QuantLib.RelinkableBlackVolTermStructureHandle_reset(self)
    __swig_destroy__ = _QuantLib.delete_RelinkableBlackVolTermStructureHandle
    __del__ = lambda self: None
RelinkableBlackVolTermStructureHandle_swigregister = _QuantLib.RelinkableBlackVolTermStructureHandle_swigregister
RelinkableBlackVolTermStructureHandle_swigregister(RelinkableBlackVolTermStructureHandle)

class LocalVolTermStructure(VolatilityTermStructure):
    __swig_setmethods__ = {}
    for _s in [VolatilityTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalVolTermStructure, name, value)
    __swig_getmethods__ = {}
    for _s in [VolatilityTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocalVolTermStructure, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def localVol(self, *args):
        return _QuantLib.LocalVolTermStructure_localVol(self, *args)
    __swig_destroy__ = _QuantLib.delete_LocalVolTermStructure
    __del__ = lambda self: None
LocalVolTermStructure_swigregister = _QuantLib.LocalVolTermStructure_swigregister
LocalVolTermStructure_swigregister(LocalVolTermStructure)

class LocalVolTermStructureHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalVolTermStructureHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LocalVolTermStructureHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_LocalVolTermStructureHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _QuantLib.LocalVolTermStructureHandle___deref__(self)

    def currentLink(self):
        return _QuantLib.LocalVolTermStructureHandle_currentLink(self)

    def __ref__(self):
        return _QuantLib.LocalVolTermStructureHandle___ref__(self)

    def __nonzero__(self):
        return _QuantLib.LocalVolTermStructureHandle___nonzero__(self)

    def __bool__(self):
        return _QuantLib.LocalVolTermStructureHandle___bool__(self)

    def asObservable(self):
        return _QuantLib.LocalVolTermStructureHandle_asObservable(self)
    __swig_destroy__ = _QuantLib.delete_LocalVolTermStructureHandle
    __del__ = lambda self: None

    def localVol(self, *args):
        return _QuantLib.LocalVolTermStructureHandle_localVol(self, *args)

    def minStrike(self):
        return _QuantLib.LocalVolTermStructureHandle_minStrike(self)

    def maxStrike(self):
        return _QuantLib.LocalVolTermStructureHandle_maxStrike(self)

    def dayCounter(self):
        return _QuantLib.LocalVolTermStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        return _QuantLib.LocalVolTermStructureHandle_timeFromReference(self, date)

    def calendar(self):
        return _QuantLib.LocalVolTermStructureHandle_calendar(self)

    def referenceDate(self):
        return _QuantLib.LocalVolTermStructureHandle_referenceDate(self)

    def maxDate(self):
        return _QuantLib.LocalVolTermStructureHandle_maxDate(self)

    def maxTime(self):
        return _QuantLib.LocalVolTermStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        return _QuantLib.LocalVolTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _QuantLib.LocalVolTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _QuantLib.LocalVolTermStructureHandle_allowsExtrapolation(self)
LocalVolTermStructureHandle_swigregister = _QuantLib.LocalVolTermStructureHandle_swigregister
LocalVolTermStructureHandle_swigregister(LocalVolTermStructureHandle)

class RelinkableLocalVolTermStructureHandle(LocalVolTermStructureHandle):
    __swig_setmethods__ = {}
    for _s in [LocalVolTermStructureHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelinkableLocalVolTermStructureHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [LocalVolTermStructureHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RelinkableLocalVolTermStructureHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_RelinkableLocalVolTermStructureHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def linkTo(self, arg2):
        return _QuantLib.RelinkableLocalVolTermStructureHandle_linkTo(self, arg2)

    def reset(self):
        return _QuantLib.RelinkableLocalVolTermStructureHandle_reset(self)
    __swig_destroy__ = _QuantLib.delete_RelinkableLocalVolTermStructureHandle
    __del__ = lambda self: None
RelinkableLocalVolTermStructureHandle_swigregister = _QuantLib.RelinkableLocalVolTermStructureHandle_swigregister
RelinkableLocalVolTermStructureHandle_swigregister(RelinkableLocalVolTermStructureHandle)

class OptionletVolatilityStructure(VolatilityTermStructure):
    __swig_setmethods__ = {}
    for _s in [VolatilityTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionletVolatilityStructure, name, value)
    __swig_getmethods__ = {}
    for _s in [VolatilityTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptionletVolatilityStructure, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def volatility(self, *args):
        return _QuantLib.OptionletVolatilityStructure_volatility(self, *args)

    def blackVariance(self, *args):
        return _QuantLib.OptionletVolatilityStructure_blackVariance(self, *args)
    __swig_destroy__ = _QuantLib.delete_OptionletVolatilityStructure
    __del__ = lambda self: None
OptionletVolatilityStructure_swigregister = _QuantLib.OptionletVolatilityStructure_swigregister
OptionletVolatilityStructure_swigregister(OptionletVolatilityStructure)

class OptionletVolatilityStructureHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionletVolatilityStructureHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionletVolatilityStructureHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_OptionletVolatilityStructureHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _QuantLib.OptionletVolatilityStructureHandle___deref__(self)

    def currentLink(self):
        return _QuantLib.OptionletVolatilityStructureHandle_currentLink(self)

    def __ref__(self):
        return _QuantLib.OptionletVolatilityStructureHandle___ref__(self)

    def __nonzero__(self):
        return _QuantLib.OptionletVolatilityStructureHandle___nonzero__(self)

    def __bool__(self):
        return _QuantLib.OptionletVolatilityStructureHandle___bool__(self)

    def asObservable(self):
        return _QuantLib.OptionletVolatilityStructureHandle_asObservable(self)
    __swig_destroy__ = _QuantLib.delete_OptionletVolatilityStructureHandle
    __del__ = lambda self: None

    def volatility(self, *args):
        return _QuantLib.OptionletVolatilityStructureHandle_volatility(self, *args)

    def blackVariance(self, *args):
        return _QuantLib.OptionletVolatilityStructureHandle_blackVariance(self, *args)

    def minStrike(self):
        return _QuantLib.OptionletVolatilityStructureHandle_minStrike(self)

    def maxStrike(self):
        return _QuantLib.OptionletVolatilityStructureHandle_maxStrike(self)

    def dayCounter(self):
        return _QuantLib.OptionletVolatilityStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        return _QuantLib.OptionletVolatilityStructureHandle_timeFromReference(self, date)

    def calendar(self):
        return _QuantLib.OptionletVolatilityStructureHandle_calendar(self)

    def referenceDate(self):
        return _QuantLib.OptionletVolatilityStructureHandle_referenceDate(self)

    def maxDate(self):
        return _QuantLib.OptionletVolatilityStructureHandle_maxDate(self)

    def maxTime(self):
        return _QuantLib.OptionletVolatilityStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        return _QuantLib.OptionletVolatilityStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _QuantLib.OptionletVolatilityStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _QuantLib.OptionletVolatilityStructureHandle_allowsExtrapolation(self)
OptionletVolatilityStructureHandle_swigregister = _QuantLib.OptionletVolatilityStructureHandle_swigregister
OptionletVolatilityStructureHandle_swigregister(OptionletVolatilityStructureHandle)

class RelinkableOptionletVolatilityStructureHandle(OptionletVolatilityStructureHandle):
    __swig_setmethods__ = {}
    for _s in [OptionletVolatilityStructureHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelinkableOptionletVolatilityStructureHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [OptionletVolatilityStructureHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RelinkableOptionletVolatilityStructureHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_RelinkableOptionletVolatilityStructureHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def linkTo(self, arg2):
        return _QuantLib.RelinkableOptionletVolatilityStructureHandle_linkTo(self, arg2)

    def reset(self):
        return _QuantLib.RelinkableOptionletVolatilityStructureHandle_reset(self)
    __swig_destroy__ = _QuantLib.delete_RelinkableOptionletVolatilityStructureHandle
    __del__ = lambda self: None
RelinkableOptionletVolatilityStructureHandle_swigregister = _QuantLib.RelinkableOptionletVolatilityStructureHandle_swigregister
RelinkableOptionletVolatilityStructureHandle_swigregister(RelinkableOptionletVolatilityStructureHandle)

class YoYOptionletVolatilitySurface(VolatilityTermStructure):
    __swig_setmethods__ = {}
    for _s in [VolatilityTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YoYOptionletVolatilitySurface, name, value)
    __swig_getmethods__ = {}
    for _s in [VolatilityTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YoYOptionletVolatilitySurface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def observationLag(self):
        return _QuantLib.YoYOptionletVolatilitySurface_observationLag(self)

    def frequency(self):
        return _QuantLib.YoYOptionletVolatilitySurface_frequency(self)

    def indexIsInterpolated(self):
        return _QuantLib.YoYOptionletVolatilitySurface_indexIsInterpolated(self)

    def baseDate(self):
        return _QuantLib.YoYOptionletVolatilitySurface_baseDate(self)

    def timeFromBase(self, *args):
        return _QuantLib.YoYOptionletVolatilitySurface_timeFromBase(self, *args)

    def minStrike(self):
        return _QuantLib.YoYOptionletVolatilitySurface_minStrike(self)

    def maxStrike(self):
        return _QuantLib.YoYOptionletVolatilitySurface_maxStrike(self)

    def baseLevel(self):
        return _QuantLib.YoYOptionletVolatilitySurface_baseLevel(self)

    def volatility(self, *args):
        return _QuantLib.YoYOptionletVolatilitySurface_volatility(self, *args)

    def totalVariance(self, *args):
        return _QuantLib.YoYOptionletVolatilitySurface_totalVariance(self, *args)
    __swig_destroy__ = _QuantLib.delete_YoYOptionletVolatilitySurface
    __del__ = lambda self: None
YoYOptionletVolatilitySurface_swigregister = _QuantLib.YoYOptionletVolatilitySurface_swigregister
YoYOptionletVolatilitySurface_swigregister(YoYOptionletVolatilitySurface)

class YoYOptionletVolatilitySurfaceHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, YoYOptionletVolatilitySurfaceHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, YoYOptionletVolatilitySurfaceHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_YoYOptionletVolatilitySurfaceHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _QuantLib.YoYOptionletVolatilitySurfaceHandle___deref__(self)

    def currentLink(self):
        return _QuantLib.YoYOptionletVolatilitySurfaceHandle_currentLink(self)

    def __ref__(self):
        return _QuantLib.YoYOptionletVolatilitySurfaceHandle___ref__(self)

    def __nonzero__(self):
        return _QuantLib.YoYOptionletVolatilitySurfaceHandle___nonzero__(self)

    def __bool__(self):
        return _QuantLib.YoYOptionletVolatilitySurfaceHandle___bool__(self)

    def asObservable(self):
        return _QuantLib.YoYOptionletVolatilitySurfaceHandle_asObservable(self)
    __swig_destroy__ = _QuantLib.delete_YoYOptionletVolatilitySurfaceHandle
    __del__ = lambda self: None

    def observationLag(self):
        return _QuantLib.YoYOptionletVolatilitySurfaceHandle_observationLag(self)

    def frequency(self):
        return _QuantLib.YoYOptionletVolatilitySurfaceHandle_frequency(self)

    def indexIsInterpolated(self):
        return _QuantLib.YoYOptionletVolatilitySurfaceHandle_indexIsInterpolated(self)

    def baseDate(self):
        return _QuantLib.YoYOptionletVolatilitySurfaceHandle_baseDate(self)

    def timeFromBase(self, *args):
        return _QuantLib.YoYOptionletVolatilitySurfaceHandle_timeFromBase(self, *args)

    def minStrike(self):
        return _QuantLib.YoYOptionletVolatilitySurfaceHandle_minStrike(self)

    def maxStrike(self):
        return _QuantLib.YoYOptionletVolatilitySurfaceHandle_maxStrike(self)

    def baseLevel(self):
        return _QuantLib.YoYOptionletVolatilitySurfaceHandle_baseLevel(self)

    def volatility(self, *args):
        return _QuantLib.YoYOptionletVolatilitySurfaceHandle_volatility(self, *args)

    def totalVariance(self, *args):
        return _QuantLib.YoYOptionletVolatilitySurfaceHandle_totalVariance(self, *args)

    def dayCounter(self):
        return _QuantLib.YoYOptionletVolatilitySurfaceHandle_dayCounter(self)

    def timeFromReference(self, date):
        return _QuantLib.YoYOptionletVolatilitySurfaceHandle_timeFromReference(self, date)

    def calendar(self):
        return _QuantLib.YoYOptionletVolatilitySurfaceHandle_calendar(self)

    def referenceDate(self):
        return _QuantLib.YoYOptionletVolatilitySurfaceHandle_referenceDate(self)

    def maxDate(self):
        return _QuantLib.YoYOptionletVolatilitySurfaceHandle_maxDate(self)

    def maxTime(self):
        return _QuantLib.YoYOptionletVolatilitySurfaceHandle_maxTime(self)

    def enableExtrapolation(self):
        return _QuantLib.YoYOptionletVolatilitySurfaceHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _QuantLib.YoYOptionletVolatilitySurfaceHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _QuantLib.YoYOptionletVolatilitySurfaceHandle_allowsExtrapolation(self)
YoYOptionletVolatilitySurfaceHandle_swigregister = _QuantLib.YoYOptionletVolatilitySurfaceHandle_swigregister
YoYOptionletVolatilitySurfaceHandle_swigregister(YoYOptionletVolatilitySurfaceHandle)

class RelinkableYoYOptionletVolatilitySurface(YoYOptionletVolatilitySurfaceHandle):
    __swig_setmethods__ = {}
    for _s in [YoYOptionletVolatilitySurfaceHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelinkableYoYOptionletVolatilitySurface, name, value)
    __swig_getmethods__ = {}
    for _s in [YoYOptionletVolatilitySurfaceHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RelinkableYoYOptionletVolatilitySurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_RelinkableYoYOptionletVolatilitySurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def linkTo(self, arg2):
        return _QuantLib.RelinkableYoYOptionletVolatilitySurface_linkTo(self, arg2)

    def reset(self):
        return _QuantLib.RelinkableYoYOptionletVolatilitySurface_reset(self)
    __swig_destroy__ = _QuantLib.delete_RelinkableYoYOptionletVolatilitySurface
    __del__ = lambda self: None
RelinkableYoYOptionletVolatilitySurface_swigregister = _QuantLib.RelinkableYoYOptionletVolatilitySurface_swigregister
RelinkableYoYOptionletVolatilitySurface_swigregister(RelinkableYoYOptionletVolatilitySurface)

class SwaptionVolatilityStructure(VolatilityTermStructure):
    __swig_setmethods__ = {}
    for _s in [VolatilityTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwaptionVolatilityStructure, name, value)
    __swig_getmethods__ = {}
    for _s in [VolatilityTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SwaptionVolatilityStructure, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def volatility(self, *args):
        return _QuantLib.SwaptionVolatilityStructure_volatility(self, *args)

    def blackVariance(self, *args):
        return _QuantLib.SwaptionVolatilityStructure_blackVariance(self, *args)

    def optionDateFromTenor(self, p):
        return _QuantLib.SwaptionVolatilityStructure_optionDateFromTenor(self, p)

    def shift(self, *args):
        return _QuantLib.SwaptionVolatilityStructure_shift(self, *args)

    def smileSection(self, *args):
        return _QuantLib.SwaptionVolatilityStructure_smileSection(self, *args)
    __swig_destroy__ = _QuantLib.delete_SwaptionVolatilityStructure
    __del__ = lambda self: None
SwaptionVolatilityStructure_swigregister = _QuantLib.SwaptionVolatilityStructure_swigregister
SwaptionVolatilityStructure_swigregister(SwaptionVolatilityStructure)

class SwaptionVolatilityStructureHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwaptionVolatilityStructureHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwaptionVolatilityStructureHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_SwaptionVolatilityStructureHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _QuantLib.SwaptionVolatilityStructureHandle___deref__(self)

    def currentLink(self):
        return _QuantLib.SwaptionVolatilityStructureHandle_currentLink(self)

    def __ref__(self):
        return _QuantLib.SwaptionVolatilityStructureHandle___ref__(self)

    def __nonzero__(self):
        return _QuantLib.SwaptionVolatilityStructureHandle___nonzero__(self)

    def __bool__(self):
        return _QuantLib.SwaptionVolatilityStructureHandle___bool__(self)

    def asObservable(self):
        return _QuantLib.SwaptionVolatilityStructureHandle_asObservable(self)
    __swig_destroy__ = _QuantLib.delete_SwaptionVolatilityStructureHandle
    __del__ = lambda self: None

    def volatility(self, *args):
        return _QuantLib.SwaptionVolatilityStructureHandle_volatility(self, *args)

    def blackVariance(self, *args):
        return _QuantLib.SwaptionVolatilityStructureHandle_blackVariance(self, *args)

    def optionDateFromTenor(self, p):
        return _QuantLib.SwaptionVolatilityStructureHandle_optionDateFromTenor(self, p)

    def shift(self, *args):
        return _QuantLib.SwaptionVolatilityStructureHandle_shift(self, *args)

    def smileSection(self, *args):
        return _QuantLib.SwaptionVolatilityStructureHandle_smileSection(self, *args)

    def minStrike(self):
        return _QuantLib.SwaptionVolatilityStructureHandle_minStrike(self)

    def maxStrike(self):
        return _QuantLib.SwaptionVolatilityStructureHandle_maxStrike(self)

    def dayCounter(self):
        return _QuantLib.SwaptionVolatilityStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        return _QuantLib.SwaptionVolatilityStructureHandle_timeFromReference(self, date)

    def calendar(self):
        return _QuantLib.SwaptionVolatilityStructureHandle_calendar(self)

    def referenceDate(self):
        return _QuantLib.SwaptionVolatilityStructureHandle_referenceDate(self)

    def maxDate(self):
        return _QuantLib.SwaptionVolatilityStructureHandle_maxDate(self)

    def maxTime(self):
        return _QuantLib.SwaptionVolatilityStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        return _QuantLib.SwaptionVolatilityStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _QuantLib.SwaptionVolatilityStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _QuantLib.SwaptionVolatilityStructureHandle_allowsExtrapolation(self)
SwaptionVolatilityStructureHandle_swigregister = _QuantLib.SwaptionVolatilityStructureHandle_swigregister
SwaptionVolatilityStructureHandle_swigregister(SwaptionVolatilityStructureHandle)

class RelinkableSwaptionVolatilityStructureHandle(SwaptionVolatilityStructureHandle):
    __swig_setmethods__ = {}
    for _s in [SwaptionVolatilityStructureHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelinkableSwaptionVolatilityStructureHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [SwaptionVolatilityStructureHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RelinkableSwaptionVolatilityStructureHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_RelinkableSwaptionVolatilityStructureHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def linkTo(self, arg2):
        return _QuantLib.RelinkableSwaptionVolatilityStructureHandle_linkTo(self, arg2)

    def reset(self):
        return _QuantLib.RelinkableSwaptionVolatilityStructureHandle_reset(self)
    __swig_destroy__ = _QuantLib.delete_RelinkableSwaptionVolatilityStructureHandle
    __del__ = lambda self: None
RelinkableSwaptionVolatilityStructureHandle_swigregister = _QuantLib.RelinkableSwaptionVolatilityStructureHandle_swigregister
RelinkableSwaptionVolatilityStructureHandle_swigregister(RelinkableSwaptionVolatilityStructureHandle)

class CapFloorTermVolatilityStructure(VolatilityTermStructure):
    __swig_setmethods__ = {}
    for _s in [VolatilityTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CapFloorTermVolatilityStructure, name, value)
    __swig_getmethods__ = {}
    for _s in [VolatilityTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CapFloorTermVolatilityStructure, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def volatility(self, *args):
        return _QuantLib.CapFloorTermVolatilityStructure_volatility(self, *args)
    __swig_destroy__ = _QuantLib.delete_CapFloorTermVolatilityStructure
    __del__ = lambda self: None
CapFloorTermVolatilityStructure_swigregister = _QuantLib.CapFloorTermVolatilityStructure_swigregister
CapFloorTermVolatilityStructure_swigregister(CapFloorTermVolatilityStructure)

class CapFloorTermVolatilityStructureHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CapFloorTermVolatilityStructureHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CapFloorTermVolatilityStructureHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_CapFloorTermVolatilityStructureHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _QuantLib.CapFloorTermVolatilityStructureHandle___deref__(self)

    def currentLink(self):
        return _QuantLib.CapFloorTermVolatilityStructureHandle_currentLink(self)

    def __ref__(self):
        return _QuantLib.CapFloorTermVolatilityStructureHandle___ref__(self)

    def __nonzero__(self):
        return _QuantLib.CapFloorTermVolatilityStructureHandle___nonzero__(self)

    def __bool__(self):
        return _QuantLib.CapFloorTermVolatilityStructureHandle___bool__(self)

    def asObservable(self):
        return _QuantLib.CapFloorTermVolatilityStructureHandle_asObservable(self)
    __swig_destroy__ = _QuantLib.delete_CapFloorTermVolatilityStructureHandle
    __del__ = lambda self: None

    def volatility(self, *args):
        return _QuantLib.CapFloorTermVolatilityStructureHandle_volatility(self, *args)

    def minStrike(self):
        return _QuantLib.CapFloorTermVolatilityStructureHandle_minStrike(self)

    def maxStrike(self):
        return _QuantLib.CapFloorTermVolatilityStructureHandle_maxStrike(self)

    def dayCounter(self):
        return _QuantLib.CapFloorTermVolatilityStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        return _QuantLib.CapFloorTermVolatilityStructureHandle_timeFromReference(self, date)

    def calendar(self):
        return _QuantLib.CapFloorTermVolatilityStructureHandle_calendar(self)

    def referenceDate(self):
        return _QuantLib.CapFloorTermVolatilityStructureHandle_referenceDate(self)

    def maxDate(self):
        return _QuantLib.CapFloorTermVolatilityStructureHandle_maxDate(self)

    def maxTime(self):
        return _QuantLib.CapFloorTermVolatilityStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        return _QuantLib.CapFloorTermVolatilityStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        return _QuantLib.CapFloorTermVolatilityStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        return _QuantLib.CapFloorTermVolatilityStructureHandle_allowsExtrapolation(self)
CapFloorTermVolatilityStructureHandle_swigregister = _QuantLib.CapFloorTermVolatilityStructureHandle_swigregister
CapFloorTermVolatilityStructureHandle_swigregister(CapFloorTermVolatilityStructureHandle)

class RelinkableCapFloorTermVolatilityStructureHandle(CapFloorTermVolatilityStructureHandle):
    __swig_setmethods__ = {}
    for _s in [CapFloorTermVolatilityStructureHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelinkableCapFloorTermVolatilityStructureHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [CapFloorTermVolatilityStructureHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RelinkableCapFloorTermVolatilityStructureHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_RelinkableCapFloorTermVolatilityStructureHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def linkTo(self, arg2):
        return _QuantLib.RelinkableCapFloorTermVolatilityStructureHandle_linkTo(self, arg2)

    def reset(self):
        return _QuantLib.RelinkableCapFloorTermVolatilityStructureHandle_reset(self)
    __swig_destroy__ = _QuantLib.delete_RelinkableCapFloorTermVolatilityStructureHandle
    __del__ = lambda self: None
RelinkableCapFloorTermVolatilityStructureHandle_swigregister = _QuantLib.RelinkableCapFloorTermVolatilityStructureHandle_swigregister
RelinkableCapFloorTermVolatilityStructureHandle_swigregister(RelinkableCapFloorTermVolatilityStructureHandle)

class CapFloorTermVolCurve(CapFloorTermVolatilityStructure):
    __swig_setmethods__ = {}
    for _s in [CapFloorTermVolatilityStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CapFloorTermVolCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [CapFloorTermVolatilityStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CapFloorTermVolCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_CapFloorTermVolCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CapFloorTermVolCurve
    __del__ = lambda self: None
CapFloorTermVolCurve_swigregister = _QuantLib.CapFloorTermVolCurve_swigregister
CapFloorTermVolCurve_swigregister(CapFloorTermVolCurve)

class CapFloorTermVolSurface(CapFloorTermVolatilityStructure):
    __swig_setmethods__ = {}
    for _s in [CapFloorTermVolatilityStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CapFloorTermVolSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [CapFloorTermVolatilityStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CapFloorTermVolSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_CapFloorTermVolSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def maxDate(self):
        return _QuantLib.CapFloorTermVolSurface_maxDate(self)

    def minStrike(self):
        return _QuantLib.CapFloorTermVolSurface_minStrike(self)

    def maxStrike(self):
        return _QuantLib.CapFloorTermVolSurface_maxStrike(self)

    def optionTenors(self):
        return _QuantLib.CapFloorTermVolSurface_optionTenors(self)

    def optionDates(self):
        return _QuantLib.CapFloorTermVolSurface_optionDates(self)

    def optionTimes(self):
        return _QuantLib.CapFloorTermVolSurface_optionTimes(self)

    def strikes(self):
        return _QuantLib.CapFloorTermVolSurface_strikes(self)
    __swig_destroy__ = _QuantLib.delete_CapFloorTermVolSurface
    __del__ = lambda self: None
CapFloorTermVolSurface_swigregister = _QuantLib.CapFloorTermVolSurface_swigregister
CapFloorTermVolSurface_swigregister(CapFloorTermVolSurface)

class BlackConstantVol(BlackVolTermStructure):
    __swig_setmethods__ = {}
    for _s in [BlackVolTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackConstantVol, name, value)
    __swig_getmethods__ = {}
    for _s in [BlackVolTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlackConstantVol, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_BlackConstantVol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BlackConstantVol
    __del__ = lambda self: None
BlackConstantVol_swigregister = _QuantLib.BlackConstantVol_swigregister
BlackConstantVol_swigregister(BlackConstantVol)

class BlackVarianceCurve(BlackVolTermStructure):
    __swig_setmethods__ = {}
    for _s in [BlackVolTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackVarianceCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [BlackVolTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlackVarianceCurve, name)
    __repr__ = _swig_repr

    def __init__(self, referenceDate, dates, volatilities, dayCounter, forceMonotoneVariance=True):
        this = _QuantLib.new_BlackVarianceCurve(referenceDate, dates, volatilities, dayCounter, forceMonotoneVariance)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_BlackVarianceCurve
    __del__ = lambda self: None
BlackVarianceCurve_swigregister = _QuantLib.BlackVarianceCurve_swigregister
BlackVarianceCurve_swigregister(BlackVarianceCurve)

class BlackVarianceSurface(BlackVolTermStructure):
    __swig_setmethods__ = {}
    for _s in [BlackVolTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackVarianceSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [BlackVolTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlackVarianceSurface, name)
    __repr__ = _swig_repr
    ConstantExtrapolation = _QuantLib.BlackVarianceSurface_ConstantExtrapolation
    InterpolatorDefaultExtrapolation = _QuantLib.BlackVarianceSurface_InterpolatorDefaultExtrapolation

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_BlackVarianceSurface(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setInterpolation(self, *args):
        return _QuantLib.BlackVarianceSurface_setInterpolation(self, *args)
    __swig_destroy__ = _QuantLib.delete_BlackVarianceSurface
    __del__ = lambda self: None
BlackVarianceSurface_swigregister = _QuantLib.BlackVarianceSurface_swigregister
BlackVarianceSurface_swigregister(BlackVarianceSurface)

class AndreasenHugeVolatilityAdapter(BlackVolTermStructure):
    __swig_setmethods__ = {}
    for _s in [BlackVolTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AndreasenHugeVolatilityAdapter, name, value)
    __swig_getmethods__ = {}
    for _s in [BlackVolTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AndreasenHugeVolatilityAdapter, name)
    __repr__ = _swig_repr

    def __init__(self, volInterpl, eps=1e-6):
        this = _QuantLib.new_AndreasenHugeVolatilityAdapter(volInterpl, eps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AndreasenHugeVolatilityAdapter
    __del__ = lambda self: None
AndreasenHugeVolatilityAdapter_swigregister = _QuantLib.AndreasenHugeVolatilityAdapter_swigregister
AndreasenHugeVolatilityAdapter_swigregister(AndreasenHugeVolatilityAdapter)

class HestonBlackVolSurface(BlackVolTermStructure):
    __swig_setmethods__ = {}
    for _s in [BlackVolTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HestonBlackVolSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [BlackVolTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HestonBlackVolSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_HestonBlackVolSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_HestonBlackVolSurface
    __del__ = lambda self: None
HestonBlackVolSurface_swigregister = _QuantLib.HestonBlackVolSurface_swigregister
HestonBlackVolSurface_swigregister(HestonBlackVolSurface)

class LocalConstantVol(LocalVolTermStructure):
    __swig_setmethods__ = {}
    for _s in [LocalVolTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalConstantVol, name, value)
    __swig_getmethods__ = {}
    for _s in [LocalVolTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocalConstantVol, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_LocalConstantVol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_LocalConstantVol
    __del__ = lambda self: None
LocalConstantVol_swigregister = _QuantLib.LocalConstantVol_swigregister
LocalConstantVol_swigregister(LocalConstantVol)

class LocalVolSurface(LocalVolTermStructure):
    __swig_setmethods__ = {}
    for _s in [LocalVolTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalVolSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [LocalVolTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocalVolSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_LocalVolSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_LocalVolSurface
    __del__ = lambda self: None
LocalVolSurface_swigregister = _QuantLib.LocalVolSurface_swigregister
LocalVolSurface_swigregister(LocalVolSurface)

class NoExceptLocalVolSurface(LocalVolSurface):
    __swig_setmethods__ = {}
    for _s in [LocalVolSurface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoExceptLocalVolSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [LocalVolSurface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoExceptLocalVolSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_NoExceptLocalVolSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_NoExceptLocalVolSurface
    __del__ = lambda self: None
NoExceptLocalVolSurface_swigregister = _QuantLib.NoExceptLocalVolSurface_swigregister
NoExceptLocalVolSurface_swigregister(NoExceptLocalVolSurface)

class AndreasenHugeLocalVolAdapter(LocalVolTermStructure):
    __swig_setmethods__ = {}
    for _s in [LocalVolTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AndreasenHugeLocalVolAdapter, name, value)
    __swig_getmethods__ = {}
    for _s in [LocalVolTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AndreasenHugeLocalVolAdapter, name)
    __repr__ = _swig_repr

    def __init__(self, localVol):
        this = _QuantLib.new_AndreasenHugeLocalVolAdapter(localVol)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_AndreasenHugeLocalVolAdapter
    __del__ = lambda self: None
AndreasenHugeLocalVolAdapter_swigregister = _QuantLib.AndreasenHugeLocalVolAdapter_swigregister
AndreasenHugeLocalVolAdapter_swigregister(AndreasenHugeLocalVolAdapter)

class ConstantOptionletVolatility(OptionletVolatilityStructure):
    __swig_setmethods__ = {}
    for _s in [OptionletVolatilityStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantOptionletVolatility, name, value)
    __swig_getmethods__ = {}
    for _s in [OptionletVolatilityStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantOptionletVolatility, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ConstantOptionletVolatility(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ConstantOptionletVolatility
    __del__ = lambda self: None
ConstantOptionletVolatility_swigregister = _QuantLib.ConstantOptionletVolatility_swigregister
ConstantOptionletVolatility_swigregister(ConstantOptionletVolatility)

class StrippedOptionletAdapter(OptionletVolatilityStructure):
    __swig_setmethods__ = {}
    for _s in [OptionletVolatilityStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrippedOptionletAdapter, name, value)
    __swig_getmethods__ = {}
    for _s in [OptionletVolatilityStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrippedOptionletAdapter, name)
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _QuantLib.new_StrippedOptionletAdapter(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_StrippedOptionletAdapter
    __del__ = lambda self: None
StrippedOptionletAdapter_swigregister = _QuantLib.StrippedOptionletAdapter_swigregister
StrippedOptionletAdapter_swigregister(StrippedOptionletAdapter)

class ConstantYoYOptionletVolatility(YoYOptionletVolatilitySurface):
    __swig_setmethods__ = {}
    for _s in [YoYOptionletVolatilitySurface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantYoYOptionletVolatility, name, value)
    __swig_getmethods__ = {}
    for _s in [YoYOptionletVolatilitySurface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantYoYOptionletVolatility, name)
    __repr__ = _swig_repr

    def __init__(self, volatility, settlementDays, cal, bdc, dc, observationLag, frequency, indexIsInterpolated, minStrike=-1.0, maxStrike=100.0):
        this = _QuantLib.new_ConstantYoYOptionletVolatility(volatility, settlementDays, cal, bdc, dc, observationLag, frequency, indexIsInterpolated, minStrike, maxStrike)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ConstantYoYOptionletVolatility
    __del__ = lambda self: None
ConstantYoYOptionletVolatility_swigregister = _QuantLib.ConstantYoYOptionletVolatility_swigregister
ConstantYoYOptionletVolatility_swigregister(ConstantYoYOptionletVolatility)

class InterpolatedYoYInflationOptionletVolatilityCurve(YoYOptionletVolatilitySurface):
    __swig_setmethods__ = {}
    for _s in [YoYOptionletVolatilitySurface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterpolatedYoYInflationOptionletVolatilityCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [YoYOptionletVolatilitySurface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterpolatedYoYInflationOptionletVolatilityCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_InterpolatedYoYInflationOptionletVolatilityCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_InterpolatedYoYInflationOptionletVolatilityCurve
    __del__ = lambda self: None
InterpolatedYoYInflationOptionletVolatilityCurve_swigregister = _QuantLib.InterpolatedYoYInflationOptionletVolatilityCurve_swigregister
InterpolatedYoYInflationOptionletVolatilityCurve_swigregister(InterpolatedYoYInflationOptionletVolatilityCurve)

class KInterpolatedYoYInflationOptionletVolatilitySurface(YoYOptionletVolatilitySurface):
    __swig_setmethods__ = {}
    for _s in [YoYOptionletVolatilitySurface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KInterpolatedYoYInflationOptionletVolatilitySurface, name, value)
    __swig_getmethods__ = {}
    for _s in [YoYOptionletVolatilitySurface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KInterpolatedYoYInflationOptionletVolatilitySurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_KInterpolatedYoYInflationOptionletVolatilitySurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Dslice(self, d):
        return _QuantLib.KInterpolatedYoYInflationOptionletVolatilitySurface_Dslice(self, d)
    __swig_destroy__ = _QuantLib.delete_KInterpolatedYoYInflationOptionletVolatilitySurface
    __del__ = lambda self: None
KInterpolatedYoYInflationOptionletVolatilitySurface_swigregister = _QuantLib.KInterpolatedYoYInflationOptionletVolatilitySurface_swigregister
KInterpolatedYoYInflationOptionletVolatilitySurface_swigregister(KInterpolatedYoYInflationOptionletVolatilitySurface)

class ConstantSwaptionVolatility(SwaptionVolatilityStructure):
    __swig_setmethods__ = {}
    for _s in [SwaptionVolatilityStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantSwaptionVolatility, name, value)
    __swig_getmethods__ = {}
    for _s in [SwaptionVolatilityStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantSwaptionVolatility, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ConstantSwaptionVolatility(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ConstantSwaptionVolatility
    __del__ = lambda self: None
ConstantSwaptionVolatility_swigregister = _QuantLib.ConstantSwaptionVolatility_swigregister
ConstantSwaptionVolatility_swigregister(ConstantSwaptionVolatility)

class SwaptionVolatilityDiscrete(SwaptionVolatilityStructure):
    __swig_setmethods__ = {}
    for _s in [SwaptionVolatilityStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwaptionVolatilityDiscrete, name, value)
    __swig_getmethods__ = {}
    for _s in [SwaptionVolatilityStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SwaptionVolatilityDiscrete, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def optionTenors(self):
        return _QuantLib.SwaptionVolatilityDiscrete_optionTenors(self)

    def optionDates(self):
        return _QuantLib.SwaptionVolatilityDiscrete_optionDates(self)

    def optionTimes(self):
        return _QuantLib.SwaptionVolatilityDiscrete_optionTimes(self)

    def swapTenors(self):
        return _QuantLib.SwaptionVolatilityDiscrete_swapTenors(self)

    def swapLengths(self):
        return _QuantLib.SwaptionVolatilityDiscrete_swapLengths(self)

    def optionDateFromTime(self, optionTime):
        return _QuantLib.SwaptionVolatilityDiscrete_optionDateFromTime(self, optionTime)
    __swig_destroy__ = _QuantLib.delete_SwaptionVolatilityDiscrete
    __del__ = lambda self: None
SwaptionVolatilityDiscrete_swigregister = _QuantLib.SwaptionVolatilityDiscrete_swigregister
SwaptionVolatilityDiscrete_swigregister(SwaptionVolatilityDiscrete)

class SwaptionVolatilityMatrix(SwaptionVolatilityDiscrete):
    __swig_setmethods__ = {}
    for _s in [SwaptionVolatilityDiscrete]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwaptionVolatilityMatrix, name, value)
    __swig_getmethods__ = {}
    for _s in [SwaptionVolatilityDiscrete]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SwaptionVolatilityMatrix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_SwaptionVolatilityMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def locate(self, *args):
        return _QuantLib.SwaptionVolatilityMatrix_locate(self, *args)

    def volatilityType(self):
        return _QuantLib.SwaptionVolatilityMatrix_volatilityType(self)
    __swig_destroy__ = _QuantLib.delete_SwaptionVolatilityMatrix
    __del__ = lambda self: None
SwaptionVolatilityMatrix_swigregister = _QuantLib.SwaptionVolatilityMatrix_swigregister
SwaptionVolatilityMatrix_swigregister(SwaptionVolatilityMatrix)

class SwaptionVolatilityCube(SwaptionVolatilityDiscrete):
    __swig_setmethods__ = {}
    for _s in [SwaptionVolatilityDiscrete]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwaptionVolatilityCube, name, value)
    __swig_getmethods__ = {}
    for _s in [SwaptionVolatilityDiscrete]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SwaptionVolatilityCube, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def atmStrike(self, optionDate, swapTenor):
        return _QuantLib.SwaptionVolatilityCube_atmStrike(self, optionDate, swapTenor)
    __swig_destroy__ = _QuantLib.delete_SwaptionVolatilityCube
    __del__ = lambda self: None
SwaptionVolatilityCube_swigregister = _QuantLib.SwaptionVolatilityCube_swigregister
SwaptionVolatilityCube_swigregister(SwaptionVolatilityCube)

class SwaptionVolCube1(SwaptionVolatilityCube):
    __swig_setmethods__ = {}
    for _s in [SwaptionVolatilityCube]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwaptionVolCube1, name, value)
    __swig_getmethods__ = {}
    for _s in [SwaptionVolatilityCube]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SwaptionVolCube1, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_SwaptionVolCube1(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def sparseSabrParameters(self):
        return _QuantLib.SwaptionVolCube1_sparseSabrParameters(self)

    def denseSabrParameters(self):
        return _QuantLib.SwaptionVolCube1_denseSabrParameters(self)

    def marketVolCube(self):
        return _QuantLib.SwaptionVolCube1_marketVolCube(self)

    def volCubeAtmCalibrated(self):
        return _QuantLib.SwaptionVolCube1_volCubeAtmCalibrated(self)

    def smileSection(self, *args):
        return _QuantLib.SwaptionVolCube1_smileSection(self, *args)
    __swig_destroy__ = _QuantLib.delete_SwaptionVolCube1
    __del__ = lambda self: None
SwaptionVolCube1_swigregister = _QuantLib.SwaptionVolCube1_swigregister
SwaptionVolCube1_swigregister(SwaptionVolCube1)

class SwaptionVolCube2(SwaptionVolatilityCube):
    __swig_setmethods__ = {}
    for _s in [SwaptionVolatilityCube]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwaptionVolCube2, name, value)
    __swig_getmethods__ = {}
    for _s in [SwaptionVolatilityCube]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SwaptionVolCube2, name)
    __repr__ = _swig_repr

    def __init__(self, atmVolStructure, optionTenors, swapTenors, strikeSpreads, volSpreads, swapIndex, shortSwapIndex, vegaWeightedSmileFit):
        this = _QuantLib.new_SwaptionVolCube2(atmVolStructure, optionTenors, swapTenors, strikeSpreads, volSpreads, swapIndex, shortSwapIndex, vegaWeightedSmileFit)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SwaptionVolCube2
    __del__ = lambda self: None
SwaptionVolCube2_swigregister = _QuantLib.SwaptionVolCube2_swigregister
SwaptionVolCube2_swigregister(SwaptionVolCube2)

class Discount(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Discount, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Discount, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_Discount()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_Discount
    __del__ = lambda self: None
Discount_swigregister = _QuantLib.Discount_swigregister
Discount_swigregister(Discount)

class ZeroYield(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZeroYield, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZeroYield, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_ZeroYield()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ZeroYield
    __del__ = lambda self: None
ZeroYield_swigregister = _QuantLib.ZeroYield_swigregister
ZeroYield_swigregister(ZeroYield)

class ForwardRate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForwardRate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ForwardRate, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_ForwardRate()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ForwardRate
    __del__ = lambda self: None
ForwardRate_swigregister = _QuantLib.ForwardRate_swigregister
ForwardRate_swigregister(ForwardRate)

class ImpliedTermStructure(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImpliedTermStructure, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImpliedTermStructure, name)
    __repr__ = _swig_repr

    def __init__(self, curveHandle, referenceDate):
        this = _QuantLib.new_ImpliedTermStructure(curveHandle, referenceDate)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ImpliedTermStructure
    __del__ = lambda self: None
ImpliedTermStructure_swigregister = _QuantLib.ImpliedTermStructure_swigregister
ImpliedTermStructure_swigregister(ImpliedTermStructure)

class ZeroSpreadedTermStructure(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZeroSpreadedTermStructure, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZeroSpreadedTermStructure, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ZeroSpreadedTermStructure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ZeroSpreadedTermStructure
    __del__ = lambda self: None
ZeroSpreadedTermStructure_swigregister = _QuantLib.ZeroSpreadedTermStructure_swigregister
ZeroSpreadedTermStructure_swigregister(ZeroSpreadedTermStructure)

class ForwardSpreadedTermStructure(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForwardSpreadedTermStructure, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForwardSpreadedTermStructure, name)
    __repr__ = _swig_repr

    def __init__(self, curveHandle, spreadHandle):
        this = _QuantLib.new_ForwardSpreadedTermStructure(curveHandle, spreadHandle)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ForwardSpreadedTermStructure
    __del__ = lambda self: None
ForwardSpreadedTermStructure_swigregister = _QuantLib.ForwardSpreadedTermStructure_swigregister
ForwardSpreadedTermStructure_swigregister(ForwardSpreadedTermStructure)

class SpreadedLinearZeroInterpolatedTermStructure(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpreadedLinearZeroInterpolatedTermStructure, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpreadedLinearZeroInterpolatedTermStructure, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_SpreadedLinearZeroInterpolatedTermStructure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SpreadedLinearZeroInterpolatedTermStructure
    __del__ = lambda self: None
SpreadedLinearZeroInterpolatedTermStructure_swigregister = _QuantLib.SpreadedLinearZeroInterpolatedTermStructure_swigregister
SpreadedLinearZeroInterpolatedTermStructure_swigregister(SpreadedLinearZeroInterpolatedTermStructure)

class SpreadedBackwardFlatZeroInterpolatedTermStructure(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpreadedBackwardFlatZeroInterpolatedTermStructure, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpreadedBackwardFlatZeroInterpolatedTermStructure, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_SpreadedBackwardFlatZeroInterpolatedTermStructure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SpreadedBackwardFlatZeroInterpolatedTermStructure
    __del__ = lambda self: None
SpreadedBackwardFlatZeroInterpolatedTermStructure_swigregister = _QuantLib.SpreadedBackwardFlatZeroInterpolatedTermStructure_swigregister
SpreadedBackwardFlatZeroInterpolatedTermStructure_swigregister(SpreadedBackwardFlatZeroInterpolatedTermStructure)

class FlatForward(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlatForward, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FlatForward, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FlatForward(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_FlatForward
    __del__ = lambda self: None
FlatForward_swigregister = _QuantLib.FlatForward_swigregister
FlatForward_swigregister(FlatForward)

class UltimateForwardTermStructure(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UltimateForwardTermStructure, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UltimateForwardTermStructure, name)
    __repr__ = _swig_repr

    def __init__(self, curveHandle, lastLiquidForwardRate, ultimateForwardRate, firstSmoothingPoint, alpha):
        this = _QuantLib.new_UltimateForwardTermStructure(curveHandle, lastLiquidForwardRate, ultimateForwardRate, firstSmoothingPoint, alpha)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_UltimateForwardTermStructure
    __del__ = lambda self: None
UltimateForwardTermStructure_swigregister = _QuantLib.UltimateForwardTermStructure_swigregister
UltimateForwardTermStructure_swigregister(UltimateForwardTermStructure)

class CompositeBFZeroYieldStructure(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeBFZeroYieldStructure, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeBFZeroYieldStructure, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_CompositeBFZeroYieldStructure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_CompositeBFZeroYieldStructure
    __del__ = lambda self: None
CompositeBFZeroYieldStructure_swigregister = _QuantLib.CompositeBFZeroYieldStructure_swigregister
CompositeBFZeroYieldStructure_swigregister(CompositeBFZeroYieldStructure)

class PiecewiseLinearFlatForward(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseLinearFlatForward, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseLinearFlatForward, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseLinearFlatForward(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseLinearFlatForward_dates(self)

    def times(self):
        return _QuantLib.PiecewiseLinearFlatForward_times(self)

    def data(self):
        return _QuantLib.PiecewiseLinearFlatForward_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseLinearFlatForward_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseLinearFlatForward
    __del__ = lambda self: None
PiecewiseLinearFlatForward_swigregister = _QuantLib.PiecewiseLinearFlatForward_swigregister
PiecewiseLinearFlatForward_swigregister(PiecewiseLinearFlatForward)

class PiecewiseBackwardFlatForward(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseBackwardFlatForward, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseBackwardFlatForward, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseBackwardFlatForward(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseBackwardFlatForward_dates(self)

    def times(self):
        return _QuantLib.PiecewiseBackwardFlatForward_times(self)

    def data(self):
        return _QuantLib.PiecewiseBackwardFlatForward_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseBackwardFlatForward_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseBackwardFlatForward
    __del__ = lambda self: None
PiecewiseBackwardFlatForward_swigregister = _QuantLib.PiecewiseBackwardFlatForward_swigregister
PiecewiseBackwardFlatForward_swigregister(PiecewiseBackwardFlatForward)

class PiecewiseConvexMonotoneForward(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseConvexMonotoneForward, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseConvexMonotoneForward, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseConvexMonotoneForward(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseConvexMonotoneForward_dates(self)

    def times(self):
        return _QuantLib.PiecewiseConvexMonotoneForward_times(self)

    def data(self):
        return _QuantLib.PiecewiseConvexMonotoneForward_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseConvexMonotoneForward_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseConvexMonotoneForward
    __del__ = lambda self: None
PiecewiseConvexMonotoneForward_swigregister = _QuantLib.PiecewiseConvexMonotoneForward_swigregister
PiecewiseConvexMonotoneForward_swigregister(PiecewiseConvexMonotoneForward)

class PiecewiseCubicForward(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseCubicForward, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseCubicForward, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseCubicForward(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseCubicForward_dates(self)

    def times(self):
        return _QuantLib.PiecewiseCubicForward_times(self)

    def data(self):
        return _QuantLib.PiecewiseCubicForward_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseCubicForward_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseCubicForward
    __del__ = lambda self: None
PiecewiseCubicForward_swigregister = _QuantLib.PiecewiseCubicForward_swigregister
PiecewiseCubicForward_swigregister(PiecewiseCubicForward)

class PiecewiseForwardFlatForward(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseForwardFlatForward, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseForwardFlatForward, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseForwardFlatForward(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseForwardFlatForward_dates(self)

    def times(self):
        return _QuantLib.PiecewiseForwardFlatForward_times(self)

    def data(self):
        return _QuantLib.PiecewiseForwardFlatForward_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseForwardFlatForward_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseForwardFlatForward
    __del__ = lambda self: None
PiecewiseForwardFlatForward_swigregister = _QuantLib.PiecewiseForwardFlatForward_swigregister
PiecewiseForwardFlatForward_swigregister(PiecewiseForwardFlatForward)

class PiecewiseLinearForward(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseLinearForward, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseLinearForward, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseLinearForward(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseLinearForward_dates(self)

    def times(self):
        return _QuantLib.PiecewiseLinearForward_times(self)

    def data(self):
        return _QuantLib.PiecewiseLinearForward_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseLinearForward_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseLinearForward
    __del__ = lambda self: None
PiecewiseLinearForward_swigregister = _QuantLib.PiecewiseLinearForward_swigregister
PiecewiseLinearForward_swigregister(PiecewiseLinearForward)

class PiecewiseLogLinearForward(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseLogLinearForward, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseLogLinearForward, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseLogLinearForward(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseLogLinearForward_dates(self)

    def times(self):
        return _QuantLib.PiecewiseLogLinearForward_times(self)

    def data(self):
        return _QuantLib.PiecewiseLogLinearForward_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseLogLinearForward_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseLogLinearForward
    __del__ = lambda self: None
PiecewiseLogLinearForward_swigregister = _QuantLib.PiecewiseLogLinearForward_swigregister
PiecewiseLogLinearForward_swigregister(PiecewiseLogLinearForward)

class PiecewiseDefaultLogCubicForward(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseDefaultLogCubicForward, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseDefaultLogCubicForward, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseDefaultLogCubicForward(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseDefaultLogCubicForward_dates(self)

    def times(self):
        return _QuantLib.PiecewiseDefaultLogCubicForward_times(self)

    def data(self):
        return _QuantLib.PiecewiseDefaultLogCubicForward_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseDefaultLogCubicForward_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseDefaultLogCubicForward
    __del__ = lambda self: None
PiecewiseDefaultLogCubicForward_swigregister = _QuantLib.PiecewiseDefaultLogCubicForward_swigregister
PiecewiseDefaultLogCubicForward_swigregister(PiecewiseDefaultLogCubicForward)

class PiecewiseMonotonicLogCubicForward(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseMonotonicLogCubicForward, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseMonotonicLogCubicForward, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseMonotonicLogCubicForward(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseMonotonicLogCubicForward_dates(self)

    def times(self):
        return _QuantLib.PiecewiseMonotonicLogCubicForward_times(self)

    def data(self):
        return _QuantLib.PiecewiseMonotonicLogCubicForward_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseMonotonicLogCubicForward_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseMonotonicLogCubicForward
    __del__ = lambda self: None
PiecewiseMonotonicLogCubicForward_swigregister = _QuantLib.PiecewiseMonotonicLogCubicForward_swigregister
PiecewiseMonotonicLogCubicForward_swigregister(PiecewiseMonotonicLogCubicForward)

class PiecewiseKrugerLogForward(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseKrugerLogForward, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseKrugerLogForward, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseKrugerLogForward(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseKrugerLogForward_dates(self)

    def times(self):
        return _QuantLib.PiecewiseKrugerLogForward_times(self)

    def data(self):
        return _QuantLib.PiecewiseKrugerLogForward_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseKrugerLogForward_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseKrugerLogForward
    __del__ = lambda self: None
PiecewiseKrugerLogForward_swigregister = _QuantLib.PiecewiseKrugerLogForward_swigregister
PiecewiseKrugerLogForward_swigregister(PiecewiseKrugerLogForward)

class PiecewiseLinearFlatDiscount(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseLinearFlatDiscount, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseLinearFlatDiscount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseLinearFlatDiscount(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseLinearFlatDiscount_dates(self)

    def times(self):
        return _QuantLib.PiecewiseLinearFlatDiscount_times(self)

    def data(self):
        return _QuantLib.PiecewiseLinearFlatDiscount_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseLinearFlatDiscount_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseLinearFlatDiscount
    __del__ = lambda self: None
PiecewiseLinearFlatDiscount_swigregister = _QuantLib.PiecewiseLinearFlatDiscount_swigregister
PiecewiseLinearFlatDiscount_swigregister(PiecewiseLinearFlatDiscount)

class PiecewiseBackwardFlatDiscount(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseBackwardFlatDiscount, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseBackwardFlatDiscount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseBackwardFlatDiscount(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseBackwardFlatDiscount_dates(self)

    def times(self):
        return _QuantLib.PiecewiseBackwardFlatDiscount_times(self)

    def data(self):
        return _QuantLib.PiecewiseBackwardFlatDiscount_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseBackwardFlatDiscount_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseBackwardFlatDiscount
    __del__ = lambda self: None
PiecewiseBackwardFlatDiscount_swigregister = _QuantLib.PiecewiseBackwardFlatDiscount_swigregister
PiecewiseBackwardFlatDiscount_swigregister(PiecewiseBackwardFlatDiscount)

class PiecewiseConvexMonotoneDiscount(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseConvexMonotoneDiscount, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseConvexMonotoneDiscount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseConvexMonotoneDiscount(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseConvexMonotoneDiscount_dates(self)

    def times(self):
        return _QuantLib.PiecewiseConvexMonotoneDiscount_times(self)

    def data(self):
        return _QuantLib.PiecewiseConvexMonotoneDiscount_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseConvexMonotoneDiscount_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseConvexMonotoneDiscount
    __del__ = lambda self: None
PiecewiseConvexMonotoneDiscount_swigregister = _QuantLib.PiecewiseConvexMonotoneDiscount_swigregister
PiecewiseConvexMonotoneDiscount_swigregister(PiecewiseConvexMonotoneDiscount)

class PiecewiseCubicDiscount(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseCubicDiscount, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseCubicDiscount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseCubicDiscount(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseCubicDiscount_dates(self)

    def times(self):
        return _QuantLib.PiecewiseCubicDiscount_times(self)

    def data(self):
        return _QuantLib.PiecewiseCubicDiscount_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseCubicDiscount_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseCubicDiscount
    __del__ = lambda self: None
PiecewiseCubicDiscount_swigregister = _QuantLib.PiecewiseCubicDiscount_swigregister
PiecewiseCubicDiscount_swigregister(PiecewiseCubicDiscount)

class PiecewiseForwardFlatDiscount(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseForwardFlatDiscount, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseForwardFlatDiscount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseForwardFlatDiscount(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseForwardFlatDiscount_dates(self)

    def times(self):
        return _QuantLib.PiecewiseForwardFlatDiscount_times(self)

    def data(self):
        return _QuantLib.PiecewiseForwardFlatDiscount_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseForwardFlatDiscount_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseForwardFlatDiscount
    __del__ = lambda self: None
PiecewiseForwardFlatDiscount_swigregister = _QuantLib.PiecewiseForwardFlatDiscount_swigregister
PiecewiseForwardFlatDiscount_swigregister(PiecewiseForwardFlatDiscount)

class PiecewiseLinearDiscount(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseLinearDiscount, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseLinearDiscount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseLinearDiscount(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseLinearDiscount_dates(self)

    def times(self):
        return _QuantLib.PiecewiseLinearDiscount_times(self)

    def data(self):
        return _QuantLib.PiecewiseLinearDiscount_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseLinearDiscount_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseLinearDiscount
    __del__ = lambda self: None
PiecewiseLinearDiscount_swigregister = _QuantLib.PiecewiseLinearDiscount_swigregister
PiecewiseLinearDiscount_swigregister(PiecewiseLinearDiscount)

class PiecewiseLogLinearDiscount(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseLogLinearDiscount, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseLogLinearDiscount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseLogLinearDiscount(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseLogLinearDiscount_dates(self)

    def times(self):
        return _QuantLib.PiecewiseLogLinearDiscount_times(self)

    def data(self):
        return _QuantLib.PiecewiseLogLinearDiscount_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseLogLinearDiscount_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseLogLinearDiscount
    __del__ = lambda self: None
PiecewiseLogLinearDiscount_swigregister = _QuantLib.PiecewiseLogLinearDiscount_swigregister
PiecewiseLogLinearDiscount_swigregister(PiecewiseLogLinearDiscount)

class PiecewiseDefaultLogCubicDiscount(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseDefaultLogCubicDiscount, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseDefaultLogCubicDiscount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseDefaultLogCubicDiscount(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseDefaultLogCubicDiscount_dates(self)

    def times(self):
        return _QuantLib.PiecewiseDefaultLogCubicDiscount_times(self)

    def data(self):
        return _QuantLib.PiecewiseDefaultLogCubicDiscount_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseDefaultLogCubicDiscount_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseDefaultLogCubicDiscount
    __del__ = lambda self: None
PiecewiseDefaultLogCubicDiscount_swigregister = _QuantLib.PiecewiseDefaultLogCubicDiscount_swigregister
PiecewiseDefaultLogCubicDiscount_swigregister(PiecewiseDefaultLogCubicDiscount)

class PiecewiseMonotonicLogCubicDiscount(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseMonotonicLogCubicDiscount, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseMonotonicLogCubicDiscount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseMonotonicLogCubicDiscount(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseMonotonicLogCubicDiscount_dates(self)

    def times(self):
        return _QuantLib.PiecewiseMonotonicLogCubicDiscount_times(self)

    def data(self):
        return _QuantLib.PiecewiseMonotonicLogCubicDiscount_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseMonotonicLogCubicDiscount_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseMonotonicLogCubicDiscount
    __del__ = lambda self: None
PiecewiseMonotonicLogCubicDiscount_swigregister = _QuantLib.PiecewiseMonotonicLogCubicDiscount_swigregister
PiecewiseMonotonicLogCubicDiscount_swigregister(PiecewiseMonotonicLogCubicDiscount)

class PiecewiseKrugerLogDiscount(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseKrugerLogDiscount, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseKrugerLogDiscount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseKrugerLogDiscount(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseKrugerLogDiscount_dates(self)

    def times(self):
        return _QuantLib.PiecewiseKrugerLogDiscount_times(self)

    def data(self):
        return _QuantLib.PiecewiseKrugerLogDiscount_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseKrugerLogDiscount_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseKrugerLogDiscount
    __del__ = lambda self: None
PiecewiseKrugerLogDiscount_swigregister = _QuantLib.PiecewiseKrugerLogDiscount_swigregister
PiecewiseKrugerLogDiscount_swigregister(PiecewiseKrugerLogDiscount)

class PiecewiseLinearFlatZeroYield(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseLinearFlatZeroYield, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseLinearFlatZeroYield, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseLinearFlatZeroYield(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseLinearFlatZeroYield_dates(self)

    def times(self):
        return _QuantLib.PiecewiseLinearFlatZeroYield_times(self)

    def data(self):
        return _QuantLib.PiecewiseLinearFlatZeroYield_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseLinearFlatZeroYield_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseLinearFlatZeroYield
    __del__ = lambda self: None
PiecewiseLinearFlatZeroYield_swigregister = _QuantLib.PiecewiseLinearFlatZeroYield_swigregister
PiecewiseLinearFlatZeroYield_swigregister(PiecewiseLinearFlatZeroYield)

class PiecewiseBackwardFlatZeroYield(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseBackwardFlatZeroYield, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseBackwardFlatZeroYield, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseBackwardFlatZeroYield(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseBackwardFlatZeroYield_dates(self)

    def times(self):
        return _QuantLib.PiecewiseBackwardFlatZeroYield_times(self)

    def data(self):
        return _QuantLib.PiecewiseBackwardFlatZeroYield_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseBackwardFlatZeroYield_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseBackwardFlatZeroYield
    __del__ = lambda self: None
PiecewiseBackwardFlatZeroYield_swigregister = _QuantLib.PiecewiseBackwardFlatZeroYield_swigregister
PiecewiseBackwardFlatZeroYield_swigregister(PiecewiseBackwardFlatZeroYield)

class PiecewiseConvexMonotoneZeroYield(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseConvexMonotoneZeroYield, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseConvexMonotoneZeroYield, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseConvexMonotoneZeroYield(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseConvexMonotoneZeroYield_dates(self)

    def times(self):
        return _QuantLib.PiecewiseConvexMonotoneZeroYield_times(self)

    def data(self):
        return _QuantLib.PiecewiseConvexMonotoneZeroYield_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseConvexMonotoneZeroYield_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseConvexMonotoneZeroYield
    __del__ = lambda self: None
PiecewiseConvexMonotoneZeroYield_swigregister = _QuantLib.PiecewiseConvexMonotoneZeroYield_swigregister
PiecewiseConvexMonotoneZeroYield_swigregister(PiecewiseConvexMonotoneZeroYield)

class PiecewiseCubicZeroYield(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseCubicZeroYield, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseCubicZeroYield, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseCubicZeroYield(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseCubicZeroYield_dates(self)

    def times(self):
        return _QuantLib.PiecewiseCubicZeroYield_times(self)

    def data(self):
        return _QuantLib.PiecewiseCubicZeroYield_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseCubicZeroYield_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseCubicZeroYield
    __del__ = lambda self: None
PiecewiseCubicZeroYield_swigregister = _QuantLib.PiecewiseCubicZeroYield_swigregister
PiecewiseCubicZeroYield_swigregister(PiecewiseCubicZeroYield)

class PiecewiseForwardFlatZeroYield(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseForwardFlatZeroYield, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseForwardFlatZeroYield, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseForwardFlatZeroYield(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseForwardFlatZeroYield_dates(self)

    def times(self):
        return _QuantLib.PiecewiseForwardFlatZeroYield_times(self)

    def data(self):
        return _QuantLib.PiecewiseForwardFlatZeroYield_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseForwardFlatZeroYield_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseForwardFlatZeroYield
    __del__ = lambda self: None
PiecewiseForwardFlatZeroYield_swigregister = _QuantLib.PiecewiseForwardFlatZeroYield_swigregister
PiecewiseForwardFlatZeroYield_swigregister(PiecewiseForwardFlatZeroYield)

class PiecewiseLinearZeroYield(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseLinearZeroYield, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseLinearZeroYield, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseLinearZeroYield(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseLinearZeroYield_dates(self)

    def times(self):
        return _QuantLib.PiecewiseLinearZeroYield_times(self)

    def data(self):
        return _QuantLib.PiecewiseLinearZeroYield_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseLinearZeroYield_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseLinearZeroYield
    __del__ = lambda self: None
PiecewiseLinearZeroYield_swigregister = _QuantLib.PiecewiseLinearZeroYield_swigregister
PiecewiseLinearZeroYield_swigregister(PiecewiseLinearZeroYield)

class PiecewiseLogLinearZeroYield(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseLogLinearZeroYield, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseLogLinearZeroYield, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseLogLinearZeroYield(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseLogLinearZeroYield_dates(self)

    def times(self):
        return _QuantLib.PiecewiseLogLinearZeroYield_times(self)

    def data(self):
        return _QuantLib.PiecewiseLogLinearZeroYield_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseLogLinearZeroYield_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseLogLinearZeroYield
    __del__ = lambda self: None
PiecewiseLogLinearZeroYield_swigregister = _QuantLib.PiecewiseLogLinearZeroYield_swigregister
PiecewiseLogLinearZeroYield_swigregister(PiecewiseLogLinearZeroYield)

class PiecewiseDefaultLogCubicZeroYield(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseDefaultLogCubicZeroYield, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseDefaultLogCubicZeroYield, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseDefaultLogCubicZeroYield(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseDefaultLogCubicZeroYield_dates(self)

    def times(self):
        return _QuantLib.PiecewiseDefaultLogCubicZeroYield_times(self)

    def data(self):
        return _QuantLib.PiecewiseDefaultLogCubicZeroYield_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseDefaultLogCubicZeroYield_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseDefaultLogCubicZeroYield
    __del__ = lambda self: None
PiecewiseDefaultLogCubicZeroYield_swigregister = _QuantLib.PiecewiseDefaultLogCubicZeroYield_swigregister
PiecewiseDefaultLogCubicZeroYield_swigregister(PiecewiseDefaultLogCubicZeroYield)

class PiecewiseMonotonicLogCubicZeroYield(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseMonotonicLogCubicZeroYield, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseMonotonicLogCubicZeroYield, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseMonotonicLogCubicZeroYield(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseMonotonicLogCubicZeroYield_dates(self)

    def times(self):
        return _QuantLib.PiecewiseMonotonicLogCubicZeroYield_times(self)

    def data(self):
        return _QuantLib.PiecewiseMonotonicLogCubicZeroYield_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseMonotonicLogCubicZeroYield_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseMonotonicLogCubicZeroYield
    __del__ = lambda self: None
PiecewiseMonotonicLogCubicZeroYield_swigregister = _QuantLib.PiecewiseMonotonicLogCubicZeroYield_swigregister
PiecewiseMonotonicLogCubicZeroYield_swigregister(PiecewiseMonotonicLogCubicZeroYield)

class PiecewiseKrugerLogZeroYield(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseKrugerLogZeroYield, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseKrugerLogZeroYield, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_PiecewiseKrugerLogZeroYield(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.PiecewiseKrugerLogZeroYield_dates(self)

    def times(self):
        return _QuantLib.PiecewiseKrugerLogZeroYield_times(self)

    def data(self):
        return _QuantLib.PiecewiseKrugerLogZeroYield_data(self)

    def nodes(self):
        return _QuantLib.PiecewiseKrugerLogZeroYield_nodes(self)
    __swig_destroy__ = _QuantLib.delete_PiecewiseKrugerLogZeroYield
    __del__ = lambda self: None
PiecewiseKrugerLogZeroYield_swigregister = _QuantLib.PiecewiseKrugerLogZeroYield_swigregister
PiecewiseKrugerLogZeroYield_swigregister(PiecewiseKrugerLogZeroYield)

class GlobalLinearSimpleZeroCurve(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GlobalLinearSimpleZeroCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GlobalLinearSimpleZeroCurve, name)
    __repr__ = _swig_repr

    def __init__(self, referenceDate, instruments, dayCounter, b):
        this = _QuantLib.new_GlobalLinearSimpleZeroCurve(referenceDate, instruments, dayCounter, b)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.GlobalLinearSimpleZeroCurve_dates(self)

    def times(self):
        return _QuantLib.GlobalLinearSimpleZeroCurve_times(self)

    def nodes(self):
        return _QuantLib.GlobalLinearSimpleZeroCurve_nodes(self)
    __swig_destroy__ = _QuantLib.delete_GlobalLinearSimpleZeroCurve
    __del__ = lambda self: None
GlobalLinearSimpleZeroCurve_swigregister = _QuantLib.GlobalLinearSimpleZeroCurve_swigregister
GlobalLinearSimpleZeroCurve_swigregister(GlobalLinearSimpleZeroCurve)

class DiscountCurve(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscountCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiscountCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_DiscountCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def times(self):
        return _QuantLib.DiscountCurve_times(self)

    def data(self):
        return _QuantLib.DiscountCurve_data(self)

    def dates(self):
        return _QuantLib.DiscountCurve_dates(self)

    def discounts(self):
        return _QuantLib.DiscountCurve_discounts(self)

    def nodes(self):
        return _QuantLib.DiscountCurve_nodes(self)
    __swig_destroy__ = _QuantLib.delete_DiscountCurve
    __del__ = lambda self: None
DiscountCurve_swigregister = _QuantLib.DiscountCurve_swigregister
DiscountCurve_swigregister(DiscountCurve)

class MonotonicLogCubicDiscountCurve(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonotonicLogCubicDiscountCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MonotonicLogCubicDiscountCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_MonotonicLogCubicDiscountCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def times(self):
        return _QuantLib.MonotonicLogCubicDiscountCurve_times(self)

    def data(self):
        return _QuantLib.MonotonicLogCubicDiscountCurve_data(self)

    def dates(self):
        return _QuantLib.MonotonicLogCubicDiscountCurve_dates(self)

    def discounts(self):
        return _QuantLib.MonotonicLogCubicDiscountCurve_discounts(self)

    def nodes(self):
        return _QuantLib.MonotonicLogCubicDiscountCurve_nodes(self)
    __swig_destroy__ = _QuantLib.delete_MonotonicLogCubicDiscountCurve
    __del__ = lambda self: None
MonotonicLogCubicDiscountCurve_swigregister = _QuantLib.MonotonicLogCubicDiscountCurve_swigregister
MonotonicLogCubicDiscountCurve_swigregister(MonotonicLogCubicDiscountCurve)

class NaturalCubicDiscountCurve(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NaturalCubicDiscountCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NaturalCubicDiscountCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_NaturalCubicDiscountCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def times(self):
        return _QuantLib.NaturalCubicDiscountCurve_times(self)

    def data(self):
        return _QuantLib.NaturalCubicDiscountCurve_data(self)

    def dates(self):
        return _QuantLib.NaturalCubicDiscountCurve_dates(self)

    def discounts(self):
        return _QuantLib.NaturalCubicDiscountCurve_discounts(self)

    def nodes(self):
        return _QuantLib.NaturalCubicDiscountCurve_nodes(self)
    __swig_destroy__ = _QuantLib.delete_NaturalCubicDiscountCurve
    __del__ = lambda self: None
NaturalCubicDiscountCurve_swigregister = _QuantLib.NaturalCubicDiscountCurve_swigregister
NaturalCubicDiscountCurve_swigregister(NaturalCubicDiscountCurve)

class FittedBondDiscountCurve(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FittedBondDiscountCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FittedBondDiscountCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_FittedBondDiscountCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def fitResults(self):
        return _QuantLib.FittedBondDiscountCurve_fitResults(self)
    __swig_destroy__ = _QuantLib.delete_FittedBondDiscountCurve
    __del__ = lambda self: None
FittedBondDiscountCurve_swigregister = _QuantLib.FittedBondDiscountCurve_swigregister
FittedBondDiscountCurve_swigregister(FittedBondDiscountCurve)

class ZeroCurve(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZeroCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZeroCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ZeroCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def times(self):
        return _QuantLib.ZeroCurve_times(self)

    def data(self):
        return _QuantLib.ZeroCurve_data(self)

    def dates(self):
        return _QuantLib.ZeroCurve_dates(self)

    def zeroRates(self):
        return _QuantLib.ZeroCurve_zeroRates(self)

    def nodes(self):
        return _QuantLib.ZeroCurve_nodes(self)
    __swig_destroy__ = _QuantLib.delete_ZeroCurve
    __del__ = lambda self: None
ZeroCurve_swigregister = _QuantLib.ZeroCurve_swigregister
ZeroCurve_swigregister(ZeroCurve)

class LogLinearZeroCurve(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogLinearZeroCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LogLinearZeroCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_LogLinearZeroCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def times(self):
        return _QuantLib.LogLinearZeroCurve_times(self)

    def data(self):
        return _QuantLib.LogLinearZeroCurve_data(self)

    def dates(self):
        return _QuantLib.LogLinearZeroCurve_dates(self)

    def zeroRates(self):
        return _QuantLib.LogLinearZeroCurve_zeroRates(self)

    def nodes(self):
        return _QuantLib.LogLinearZeroCurve_nodes(self)
    __swig_destroy__ = _QuantLib.delete_LogLinearZeroCurve
    __del__ = lambda self: None
LogLinearZeroCurve_swigregister = _QuantLib.LogLinearZeroCurve_swigregister
LogLinearZeroCurve_swigregister(LogLinearZeroCurve)

class CubicZeroCurve(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CubicZeroCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CubicZeroCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_CubicZeroCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def times(self):
        return _QuantLib.CubicZeroCurve_times(self)

    def data(self):
        return _QuantLib.CubicZeroCurve_data(self)

    def dates(self):
        return _QuantLib.CubicZeroCurve_dates(self)

    def zeroRates(self):
        return _QuantLib.CubicZeroCurve_zeroRates(self)

    def nodes(self):
        return _QuantLib.CubicZeroCurve_nodes(self)
    __swig_destroy__ = _QuantLib.delete_CubicZeroCurve
    __del__ = lambda self: None
CubicZeroCurve_swigregister = _QuantLib.CubicZeroCurve_swigregister
CubicZeroCurve_swigregister(CubicZeroCurve)

class NaturalCubicZeroCurve(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NaturalCubicZeroCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NaturalCubicZeroCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_NaturalCubicZeroCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def times(self):
        return _QuantLib.NaturalCubicZeroCurve_times(self)

    def data(self):
        return _QuantLib.NaturalCubicZeroCurve_data(self)

    def dates(self):
        return _QuantLib.NaturalCubicZeroCurve_dates(self)

    def zeroRates(self):
        return _QuantLib.NaturalCubicZeroCurve_zeroRates(self)

    def nodes(self):
        return _QuantLib.NaturalCubicZeroCurve_nodes(self)
    __swig_destroy__ = _QuantLib.delete_NaturalCubicZeroCurve
    __del__ = lambda self: None
NaturalCubicZeroCurve_swigregister = _QuantLib.NaturalCubicZeroCurve_swigregister
NaturalCubicZeroCurve_swigregister(NaturalCubicZeroCurve)

class LogCubicZeroCurve(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogCubicZeroCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LogCubicZeroCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_LogCubicZeroCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def times(self):
        return _QuantLib.LogCubicZeroCurve_times(self)

    def data(self):
        return _QuantLib.LogCubicZeroCurve_data(self)

    def dates(self):
        return _QuantLib.LogCubicZeroCurve_dates(self)

    def zeroRates(self):
        return _QuantLib.LogCubicZeroCurve_zeroRates(self)

    def nodes(self):
        return _QuantLib.LogCubicZeroCurve_nodes(self)
    __swig_destroy__ = _QuantLib.delete_LogCubicZeroCurve
    __del__ = lambda self: None
LogCubicZeroCurve_swigregister = _QuantLib.LogCubicZeroCurve_swigregister
LogCubicZeroCurve_swigregister(LogCubicZeroCurve)

class MonotonicCubicZeroCurve(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonotonicCubicZeroCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MonotonicCubicZeroCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_MonotonicCubicZeroCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def times(self):
        return _QuantLib.MonotonicCubicZeroCurve_times(self)

    def data(self):
        return _QuantLib.MonotonicCubicZeroCurve_data(self)

    def dates(self):
        return _QuantLib.MonotonicCubicZeroCurve_dates(self)

    def zeroRates(self):
        return _QuantLib.MonotonicCubicZeroCurve_zeroRates(self)

    def nodes(self):
        return _QuantLib.MonotonicCubicZeroCurve_nodes(self)
    __swig_destroy__ = _QuantLib.delete_MonotonicCubicZeroCurve
    __del__ = lambda self: None
MonotonicCubicZeroCurve_swigregister = _QuantLib.MonotonicCubicZeroCurve_swigregister
MonotonicCubicZeroCurve_swigregister(MonotonicCubicZeroCurve)

class ForwardCurve(YieldTermStructure):
    __swig_setmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForwardCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [YieldTermStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForwardCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ForwardCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.ForwardCurve_dates(self)

    def forwards(self):
        return _QuantLib.ForwardCurve_forwards(self)

    def nodes(self):
        return _QuantLib.ForwardCurve_nodes(self)
    __swig_destroy__ = _QuantLib.delete_ForwardCurve
    __del__ = lambda self: None
ForwardCurve_swigregister = _QuantLib.ForwardCurve_swigregister
ForwardCurve_swigregister(ForwardCurve)

class FittingMethod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FittingMethod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FittingMethod, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _QuantLib.delete_FittingMethod
    __del__ = lambda self: None

    def size(self):
        return _QuantLib.FittingMethod_size(self)

    def solution(self):
        return _QuantLib.FittingMethod_solution(self)

    def numberOfIterations(self):
        return _QuantLib.FittingMethod_numberOfIterations(self)

    def minimumCostValue(self):
        return _QuantLib.FittingMethod_minimumCostValue(self)

    def constrainAtZero(self):
        return _QuantLib.FittingMethod_constrainAtZero(self)

    def weights(self):
        return _QuantLib.FittingMethod_weights(self)
FittingMethod_swigregister = _QuantLib.FittingMethod_swigregister
FittingMethod_swigregister(FittingMethod)

class ExponentialSplinesFitting(FittingMethod):
    __swig_setmethods__ = {}
    for _s in [FittingMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExponentialSplinesFitting, name, value)
    __swig_getmethods__ = {}
    for _s in [FittingMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExponentialSplinesFitting, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_ExponentialSplinesFitting(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_ExponentialSplinesFitting
    __del__ = lambda self: None
ExponentialSplinesFitting_swigregister = _QuantLib.ExponentialSplinesFitting_swigregister
ExponentialSplinesFitting_swigregister(ExponentialSplinesFitting)

class NelsonSiegelFitting(FittingMethod):
    __swig_setmethods__ = {}
    for _s in [FittingMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NelsonSiegelFitting, name, value)
    __swig_getmethods__ = {}
    for _s in [FittingMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NelsonSiegelFitting, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_NelsonSiegelFitting(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_NelsonSiegelFitting
    __del__ = lambda self: None
NelsonSiegelFitting_swigregister = _QuantLib.NelsonSiegelFitting_swigregister
NelsonSiegelFitting_swigregister(NelsonSiegelFitting)

class SvenssonFitting(FittingMethod):
    __swig_setmethods__ = {}
    for _s in [FittingMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SvenssonFitting, name, value)
    __swig_getmethods__ = {}
    for _s in [FittingMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SvenssonFitting, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_SvenssonFitting(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SvenssonFitting
    __del__ = lambda self: None
SvenssonFitting_swigregister = _QuantLib.SvenssonFitting_swigregister
SvenssonFitting_swigregister(SvenssonFitting)

class CubicBSplinesFitting(FittingMethod):
    __swig_setmethods__ = {}
    for _s in [FittingMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CubicBSplinesFitting, name, value)
    __swig_getmethods__ = {}
    for _s in [FittingMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CubicBSplinesFitting, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_CubicBSplinesFitting(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def basisFunction(self, i, t):
        return _QuantLib.CubicBSplinesFitting_basisFunction(self, i, t)
    __swig_destroy__ = _QuantLib.delete_CubicBSplinesFitting
    __del__ = lambda self: None
CubicBSplinesFitting_swigregister = _QuantLib.CubicBSplinesFitting_swigregister
CubicBSplinesFitting_swigregister(CubicBSplinesFitting)

class SimplePolynomialFitting(FittingMethod):
    __swig_setmethods__ = {}
    for _s in [FittingMethod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimplePolynomialFitting, name, value)
    __swig_getmethods__ = {}
    for _s in [FittingMethod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimplePolynomialFitting, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_SimplePolynomialFitting(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QuantLib.delete_SimplePolynomialFitting
    __del__ = lambda self: None
SimplePolynomialFitting_swigregister = _QuantLib.SimplePolynomialFitting_swigregister
SimplePolynomialFitting_swigregister(SimplePolynomialFitting)


def flatRate(*args):
    return _QuantLib.flatRate(*args)
flatRate = _QuantLib.flatRate

def flatVol(*args):
    return _QuantLib.flatVol(*args)
flatVol = _QuantLib.flatVol

def relativeError(x1, x2, reference):
    return _QuantLib.relativeError(x1, x2, reference)
relativeError = _QuantLib.relativeError
class Flag(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Flag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Flag, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _QuantLib.new_Flag()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def raiseFlag(self):
        return _QuantLib.Flag_raiseFlag(self)

    def lower(self):
        return _QuantLib.Flag_lower(self)

    def isUp(self):
        return _QuantLib.Flag_isUp(self)

    def update(self):
        return _QuantLib.Flag_update(self)

    def registerWith(self, arg2):
        return _QuantLib.Flag_registerWith(self, arg2)

    def unregisterWith(self, arg2):
        return _QuantLib.Flag_unregisterWith(self, arg2)
    __swig_destroy__ = _QuantLib.delete_Flag
    __del__ = lambda self: None
Flag_swigregister = _QuantLib.Flag_swigregister
Flag_swigregister(Flag)

class TimeBasket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeBasket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeBasket, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_TimeBasket(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __len__(self):
        return _QuantLib.TimeBasket___len__(self)

    def rebin(self, arg2):
        return _QuantLib.TimeBasket_rebin(self, arg2)

    def __getitem__(self, d):
        return _QuantLib.TimeBasket___getitem__(self, d)

    def __setitem__(self, d, value):
        return _QuantLib.TimeBasket___setitem__(self, d, value)

    def items(self):
        return _QuantLib.TimeBasket_items(self)

    def __contains__(self, d):
        return _QuantLib.TimeBasket___contains__(self, d)

    def __iter__(self):
        return _QuantLib.TimeBasket___iter__(self)
    __swig_destroy__ = _QuantLib.delete_TimeBasket
    __del__ = lambda self: None
TimeBasket_swigregister = _QuantLib.TimeBasket_swigregister
TimeBasket_swigregister(TimeBasket)

class RealTimeSeries(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealTimeSeries, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RealTimeSeries, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_RealTimeSeries(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.RealTimeSeries_dates(self)

    def values(self):
        return _QuantLib.RealTimeSeries_values(self)

    def __len__(self):
        return _QuantLib.RealTimeSeries___len__(self)

    def __getitem__(self, d):
        return _QuantLib.RealTimeSeries___getitem__(self, d)

    def __setitem__(self, d, value):
        return _QuantLib.RealTimeSeries___setitem__(self, d, value)
    __swig_destroy__ = _QuantLib.delete_RealTimeSeries
    __del__ = lambda self: None
RealTimeSeries_swigregister = _QuantLib.RealTimeSeries_swigregister
RealTimeSeries_swigregister(RealTimeSeries)

class IntervalPriceTimeSeries(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntervalPriceTimeSeries, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntervalPriceTimeSeries, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _QuantLib.new_IntervalPriceTimeSeries(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dates(self):
        return _QuantLib.IntervalPriceTimeSeries_dates(self)

    def values(self):
        return _QuantLib.IntervalPriceTimeSeries_values(self)

    def __len__(self):
        return _QuantLib.IntervalPriceTimeSeries___len__(self)

    def __getitem__(self, d):
        return _QuantLib.IntervalPriceTimeSeries___getitem__(self, d)

    def __setitem__(self, d, value):
        return _QuantLib.IntervalPriceTimeSeries___setitem__(self, d, value)
    __swig_destroy__ = _QuantLib.delete_IntervalPriceTimeSeries
    __del__ = lambda self: None
IntervalPriceTimeSeries_swigregister = _QuantLib.IntervalPriceTimeSeries_swigregister
IntervalPriceTimeSeries_swigregister(IntervalPriceTimeSeries)

class IntervalPriceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntervalPriceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntervalPriceVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _QuantLib.IntervalPriceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _QuantLib.IntervalPriceVector___nonzero__(self)

    def __bool__(self):
        return _QuantLib.IntervalPriceVector___bool__(self)

    def __len__(self):
        return _QuantLib.IntervalPriceVector___len__(self)

    def __getslice__(self, i, j):
        return _QuantLib.IntervalPriceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _QuantLib.IntervalPriceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _QuantLib.IntervalPriceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _QuantLib.IntervalPriceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _QuantLib.IntervalPriceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _QuantLib.IntervalPriceVector___setitem__(self, *args)

    def pop(self):
        return _QuantLib.IntervalPriceVector_pop(self)

    def append(self, x):
        return _QuantLib.IntervalPriceVector_append(self, x)

    def empty(self):
        return _QuantLib.IntervalPriceVector_empty(self)

    def size(self):
        return _QuantLib.IntervalPriceVector_size(self)

    def swap(self, v):
        return _QuantLib.IntervalPriceVector_swap(self, v)

    def begin(self):
        return _QuantLib.IntervalPriceVector_begin(self)

    def end(self):
        return _QuantLib.IntervalPriceVector_end(self)

    def rbegin(self):
        return _QuantLib.IntervalPriceVector_rbegin(self)

    def rend(self):
        return _QuantLib.IntervalPriceVector_rend(self)

    def clear(self):
        return _QuantLib.IntervalPriceVector_clear(self)

    def get_allocator(self):
        return _QuantLib.IntervalPriceVector_get_allocator(self)

    def pop_back(self):
        return _QuantLib.IntervalPriceVector_pop_back(self)

    def erase(self, *args):
        return _QuantLib.IntervalPriceVector_erase(self, *args)

    def __init__(self, *args):
        this = _QuantLib.new_IntervalPriceVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _QuantLib.IntervalPriceVector_push_back(self, x)

    def front(self):
        return _QuantLib.IntervalPriceVector_front(self)

    def back(self):
        return _QuantLib.IntervalPriceVector_back(self)

    def assign(self, n, x):
        return _QuantLib.IntervalPriceVector_assign(self, n, x)

    def resize(self, *args):
        return _QuantLib.IntervalPriceVector_resize(self, *args)

    def insert(self, *args):
        return _QuantLib.IntervalPriceVector_insert(self, *args)

    def reserve(self, n):
        return _QuantLib.IntervalPriceVector_reserve(self, n)

    def capacity(self):
        return _QuantLib.IntervalPriceVector_capacity(self)
    __swig_destroy__ = _QuantLib.delete_IntervalPriceVector
    __del__ = lambda self: None
IntervalPriceVector_swigregister = _QuantLib.IntervalPriceVector_swigregister
IntervalPriceVector_swigregister(IntervalPriceVector)

class IntervalPrice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntervalPrice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntervalPrice, name)
    __repr__ = _swig_repr
    Open = _QuantLib.IntervalPrice_Open
    Close = _QuantLib.IntervalPrice_Close
    High = _QuantLib.IntervalPrice_High
    Low = _QuantLib.IntervalPrice_Low

    def __init__(self, arg2, arg3, arg4, arg5):
        this = _QuantLib.new_IntervalPrice(arg2, arg3, arg4, arg5)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValue(self, arg2, arg3):
        return _QuantLib.IntervalPrice_setValue(self, arg2, arg3)

    def setValues(self, arg2, arg3, arg4, arg5):
        return _QuantLib.IntervalPrice_setValues(self, arg2, arg3, arg4, arg5)

    def value(self, t):
        return _QuantLib.IntervalPrice_value(self, t)

    def open(self):
        return _QuantLib.IntervalPrice_open(self)

    def close(self):
        return _QuantLib.IntervalPrice_close(self)

    def high(self):
        return _QuantLib.IntervalPrice_high(self)

    def low(self):
        return _QuantLib.IntervalPrice_low(self)
    if _newclass:
        makeSeries = staticmethod(_QuantLib.IntervalPrice_makeSeries)
    else:
        makeSeries = _QuantLib.IntervalPrice_makeSeries
    if _newclass:
        extractValues = staticmethod(_QuantLib.IntervalPrice_extractValues)
    else:
        extractValues = _QuantLib.IntervalPrice_extractValues
    if _newclass:
        extractComponent = staticmethod(_QuantLib.IntervalPrice_extractComponent)
    else:
        extractComponent = _QuantLib.IntervalPrice_extractComponent
    __swig_destroy__ = _QuantLib.delete_IntervalPrice
    __del__ = lambda self: None
IntervalPrice_swigregister = _QuantLib.IntervalPrice_swigregister
IntervalPrice_swigregister(IntervalPrice)

def IntervalPrice_makeSeries(d, open, close, high, low):
    return _QuantLib.IntervalPrice_makeSeries(d, open, close, high, low)
IntervalPrice_makeSeries = _QuantLib.IntervalPrice_makeSeries

def IntervalPrice_extractValues(arg2, t):
    return _QuantLib.IntervalPrice_extractValues(arg2, t)
IntervalPrice_extractValues = _QuantLib.IntervalPrice_extractValues

def IntervalPrice_extractComponent(arg2, t):
    return _QuantLib.IntervalPrice_extractComponent(arg2, t)
IntervalPrice_extractComponent = _QuantLib.IntervalPrice_extractComponent

class CmsMarket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmsMarket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CmsMarket, name)
    __repr__ = _swig_repr

    def __init__(self, swapLengths, swapIndexes, iborIndex, bidAskSpreads, pricers, discountingTS):
        this = _QuantLib.new_CmsMarket(swapLengths, swapIndexes, iborIndex, bidAskSpreads, pricers, discountingTS)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reprice(self, volStructure, meanReversion):
        return _QuantLib.CmsMarket_reprice(self, volStructure, meanReversion)

    def swapTenors(self):
        return _QuantLib.CmsMarket_swapTenors(self)

    def swapLengths(self):
        return _QuantLib.CmsMarket_swapLengths(self)

    def impliedCmsSpreads(self):
        return _QuantLib.CmsMarket_impliedCmsSpreads(self)

    def spreadErrors(self):
        return _QuantLib.CmsMarket_spreadErrors(self)

    def browse(self):
        return _QuantLib.CmsMarket_browse(self)

    def weightedSpreadError(self, weights):
        return _QuantLib.CmsMarket_weightedSpreadError(self, weights)

    def weightedSpotNpvError(self, weights):
        return _QuantLib.CmsMarket_weightedSpotNpvError(self, weights)

    def weightedFwdNpvError(self, weights):
        return _QuantLib.CmsMarket_weightedFwdNpvError(self, weights)

    def weightedSpreadErrors(self, weights):
        return _QuantLib.CmsMarket_weightedSpreadErrors(self, weights)

    def weightedSpotNpvErrors(self, weights):
        return _QuantLib.CmsMarket_weightedSpotNpvErrors(self, weights)

    def weightedFwdNpvErrors(self, weights):
        return _QuantLib.CmsMarket_weightedFwdNpvErrors(self, weights)
    __swig_destroy__ = _QuantLib.delete_CmsMarket
    __del__ = lambda self: None
CmsMarket_swigregister = _QuantLib.CmsMarket_swigregister
CmsMarket_swigregister(CmsMarket)

class CmsMarketCalibration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmsMarketCalibration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CmsMarketCalibration, name)
    __repr__ = _swig_repr
    OnSpread = _QuantLib.CmsMarketCalibration_OnSpread
    OnPrice = _QuantLib.CmsMarketCalibration_OnPrice
    OnForwardCmsPrice = _QuantLib.CmsMarketCalibration_OnForwardCmsPrice

    def __init__(self, volCube, cmsMarket, weights, calibrationType):
        this = _QuantLib.new_CmsMarketCalibration(volCube, cmsMarket, weights, calibrationType)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compute(self, *args):
        return _QuantLib.CmsMarketCalibration_compute(self, *args)

    def computeParametric(self, *args):
        return _QuantLib.CmsMarketCalibration_computeParametric(self, *args)

    def error(self):
        return _QuantLib.CmsMarketCalibration_error(self)

    def endCriteria(self):
        return _QuantLib.CmsMarketCalibration_endCriteria(self)
    __swig_destroy__ = _QuantLib.delete_CmsMarketCalibration
    __del__ = lambda self: None
CmsMarketCalibration_swigregister = _QuantLib.CmsMarketCalibration_swigregister
CmsMarketCalibration_swigregister(CmsMarketCalibration)

class StrippedOptionletBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrippedOptionletBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrippedOptionletBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def optionletStrikes(self, i):
        return _QuantLib.StrippedOptionletBase_optionletStrikes(self, i)

    def optionletVolatilities(self, i):
        return _QuantLib.StrippedOptionletBase_optionletVolatilities(self, i)

    def optionletFixingDates(self):
        return _QuantLib.StrippedOptionletBase_optionletFixingDates(self)

    def optionletFixingTimes(self):
        return _QuantLib.StrippedOptionletBase_optionletFixingTimes(self)

    def optionletMaturities(self):
        return _QuantLib.StrippedOptionletBase_optionletMaturities(self)

    def atmOptionletRates(self):
        return _QuantLib.StrippedOptionletBase_atmOptionletRates(self)

    def dayCounter(self):
        return _QuantLib.StrippedOptionletBase_dayCounter(self)

    def calendar(self):
        return _QuantLib.StrippedOptionletBase_calendar(self)

    def settlementDays(self):
        return _QuantLib.StrippedOptionletBase_settlementDays(self)

    def businessDayConvention(self):
        return _QuantLib.StrippedOptionletBase_businessDayConvention(self)
    __swig_destroy__ = _QuantLib.delete_StrippedOptionletBase
    __del__ = lambda self: None
StrippedOptionletBase_swigregister = _QuantLib.StrippedOptionletBase_swigregister
StrippedOptionletBase_swigregister(StrippedOptionletBase)

class OptionletStripper1(StrippedOptionletBase):
    __swig_setmethods__ = {}
    for _s in [StrippedOptionletBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionletStripper1, name, value)
    __swig_getmethods__ = {}
    for _s in [StrippedOptionletBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptionletStripper1, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _QuantLib.new_OptionletStripper1(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def capFloorPrices(self):
        return _QuantLib.OptionletStripper1_capFloorPrices(self)

    def capFloorVolatilities(self):
        return _QuantLib.OptionletStripper1_capFloorVolatilities(self)

    def optionletPrices(self):
        return _QuantLib.OptionletStripper1_optionletPrices(self)

    def switchStrike(self):
        return _QuantLib.OptionletStripper1_switchStrike(self)
    __swig_destroy__ = _QuantLib.delete_OptionletStripper1
    __del__ = lambda self: None
OptionletStripper1_swigregister = _QuantLib.OptionletStripper1_swigregister
OptionletStripper1_swigregister(OptionletStripper1)

class ConstantEstimator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantEstimator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantEstimator, name)
    __repr__ = _swig_repr

    def __init__(self, size):
        this = _QuantLib.new_ConstantEstimator(size)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def calculate(self, arg2):
        return _QuantLib.ConstantEstimator_calculate(self, arg2)
    __swig_destroy__ = _QuantLib.delete_ConstantEstimator
    __del__ = lambda self: None
ConstantEstimator_swigregister = _QuantLib.ConstantEstimator_swigregister
ConstantEstimator_swigregister(ConstantEstimator)

class ParkinsonSigma(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParkinsonSigma, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParkinsonSigma, name)
    __repr__ = _swig_repr

    def __init__(self, yearFraction):
        this = _QuantLib.new_ParkinsonSigma(yearFraction)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def calculate(self, arg2):
        return _QuantLib.ParkinsonSigma_calculate(self, arg2)
    __swig_destroy__ = _QuantLib.delete_ParkinsonSigma
    __del__ = lambda self: None
ParkinsonSigma_swigregister = _QuantLib.ParkinsonSigma_swigregister
ParkinsonSigma_swigregister(ParkinsonSigma)

class GarmanKlassSigma1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GarmanKlassSigma1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GarmanKlassSigma1, name)
    __repr__ = _swig_repr

    def __init__(self, yearFraction, marketOpenFraction):
        this = _QuantLib.new_GarmanKlassSigma1(yearFraction, marketOpenFraction)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def calculate(self, arg2):
        return _QuantLib.GarmanKlassSigma1_calculate(self, arg2)
    __swig_destroy__ = _QuantLib.delete_GarmanKlassSigma1
    __del__ = lambda self: None
GarmanKlassSigma1_swigregister = _QuantLib.GarmanKlassSigma1_swigregister
GarmanKlassSigma1_swigregister(GarmanKlassSigma1)

class GarmanKlassSigma3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GarmanKlassSigma3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GarmanKlassSigma3, name)
    __repr__ = _swig_repr

    def __init__(self, yearFraction, marketOpenFraction):
        this = _QuantLib.new_GarmanKlassSigma3(yearFraction, marketOpenFraction)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def calculate(self, arg2):
        return _QuantLib.GarmanKlassSigma3_calculate(self, arg2)
    __swig_destroy__ = _QuantLib.delete_GarmanKlassSigma3
    __del__ = lambda self: None
GarmanKlassSigma3_swigregister = _QuantLib.GarmanKlassSigma3_swigregister
GarmanKlassSigma3_swigregister(GarmanKlassSigma3)

class GarmanKlassSigma4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GarmanKlassSigma4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GarmanKlassSigma4, name)
    __repr__ = _swig_repr

    def __init__(self, yearFraction):
        this = _QuantLib.new_GarmanKlassSigma4(yearFraction)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def calculate(self, arg2):
        return _QuantLib.GarmanKlassSigma4_calculate(self, arg2)
    __swig_destroy__ = _QuantLib.delete_GarmanKlassSigma4
    __del__ = lambda self: None
GarmanKlassSigma4_swigregister = _QuantLib.GarmanKlassSigma4_swigregister
GarmanKlassSigma4_swigregister(GarmanKlassSigma4)

class GarmanKlassSigma5(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GarmanKlassSigma5, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GarmanKlassSigma5, name)
    __repr__ = _swig_repr

    def __init__(self, yearFraction):
        this = _QuantLib.new_GarmanKlassSigma5(yearFraction)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def calculate(self, arg2):
        return _QuantLib.GarmanKlassSigma5_calculate(self, arg2)
    __swig_destroy__ = _QuantLib.delete_GarmanKlassSigma5
    __del__ = lambda self: None
GarmanKlassSigma5_swigregister = _QuantLib.GarmanKlassSigma5_swigregister
GarmanKlassSigma5_swigregister(GarmanKlassSigma5)

class GarmanKlassSigma6(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GarmanKlassSigma6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GarmanKlassSigma6, name)
    __repr__ = _swig_repr

    def __init__(self, yearFraction, marketOpenFraction):
        this = _QuantLib.new_GarmanKlassSigma6(yearFraction, marketOpenFraction)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def calculate(self, arg2):
        return _QuantLib.GarmanKlassSigma6_calculate(self, arg2)
    __swig_destroy__ = _QuantLib.delete_GarmanKlassSigma6
    __del__ = lambda self: None
GarmanKlassSigma6_swigregister = _QuantLib.GarmanKlassSigma6_swigregister
GarmanKlassSigma6_swigregister(GarmanKlassSigma6)

# This file is compatible with both classic and new-style classes.


